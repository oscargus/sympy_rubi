
from sympy.external import import_module
matchpy = import_module("matchpy")
from sympy.utilities.decorator import doctest_depends_on

if matchpy:
    from matchpy import Pattern, ReplacementRule, CustomConstraint
    from sympy.integrals.rubi.utility_function import (Cancel, Part, Gamma, PolyLog, Int, Set, With, Scan, MapAnd, FalseQ, ZeroQ, NegativeQ, NonzeroQ, FreeQ, NFreeQ, List, Log, PositiveQ, PositiveIntegerQ, NegativeIntegerQ, IntegerQ, IntegersQ, ComplexNumberQ, PureComplexNumberQ, RealNumericQ, PositiveOrZeroQ, NegativeOrZeroQ, FractionOrNegativeQ, NegQ, Equal, Unequal, IntPart, FracPart, RationalQ, ProductQ, SumQ, NonsumQ, Subst, First, Rest, SqrtNumberQ, SqrtNumberSumQ, LinearQ, Sqrt, ArcCosh, Coefficient, Denominator, Hypergeometric2F1, Not, Simplify, FractionalPart, IntegerPart, AppellF1, EllipticPi, EllipticE, EllipticF, ArcTan, ArcCot, ArcCoth, ArcTanh, ArcSin, ArcSinh, ArcCos, ArcCsc, ArcCsch, Sinh, Tanh, Cosh, Sech, Csch, Coth, LessEqual, Less, Greater, GreaterEqual, FractionQ, IntLinearcQ, Expand, IndependentQ, PowerQ, IntegerPowerQ, PositiveIntegerPowerQ, FractionalPowerQ, AtomQ, ExpQ, LogQ, Head, MemberQ, TrigQ, SinQ, CosQ, TanQ, CotQ, SecQ, CscQ, Sin, Cos, Tan, Cot, Sec, Csc, HyperbolicQ, SinhQ, CoshQ, TanhQ, CothQ, SechQ, CschQ, InverseTrigQ, SinCosQ, SinhCoshQ, LeafCount, Numerator, NumberQ, NumericQ, Length, ListQ, Im, Re, InverseHyperbolicQ, InverseFunctionQ, TrigHyperbolicFreeQ, InverseFunctionFreeQ, RealQ, EqQ, FractionalPowerFreeQ, ComplexFreeQ, PolynomialQ, FactorSquareFree, PowerOfLinearQ, Exponent, QuadraticQ, LinearPairQ, BinomialParts, TrinomialParts, PolyQ, EvenQ, OddQ, PerfectSquareQ, NiceSqrtAuxQ, NiceSqrtQ, Together, PosAux, PosQ, CoefficientList, ReplaceAll, ExpandLinearProduct, GCD, ContentFactor, NumericFactor, NonnumericFactors, MakeAssocList, GensymSubst, KernelSubst, ExpandExpression, Apart, SmartApart, MatchQ, PolynomialQuotientRemainder, FreeFactors, NonfreeFactors, RemoveContentAux, RemoveContent, FreeTerms, NonfreeTerms, ExpandAlgebraicFunction, CollectReciprocals, ExpandCleanup, AlgebraicFunctionQ, Coeff, LeadTerm, RemainingTerms, LeadFactor, RemainingFactors, LeadBase, LeadDegree, Numer, Denom, hypergeom, Expon, MergeMonomials, PolynomialDivide, BinomialQ, TrinomialQ, GeneralizedBinomialQ, GeneralizedTrinomialQ, FactorSquareFreeList, PerfectPowerTest, SquareFreeFactorTest, RationalFunctionQ, RationalFunctionFactors, NonrationalFunctionFactors, Reverse, RationalFunctionExponents, RationalFunctionExpand, ExpandIntegrand, SimplerQ, SimplerSqrtQ, SumSimplerQ, BinomialDegree, TrinomialDegree, CancelCommonFactors, SimplerIntegrandQ, GeneralizedBinomialDegree, GeneralizedBinomialParts, GeneralizedTrinomialDegree, GeneralizedTrinomialParts, MonomialQ, MonomialSumQ, MinimumMonomialExponent, MonomialExponent, LinearMatchQ, PowerOfLinearMatchQ, QuadraticMatchQ, CubicMatchQ, BinomialMatchQ, TrinomialMatchQ, GeneralizedBinomialMatchQ, GeneralizedTrinomialMatchQ, QuotientOfLinearsMatchQ, PolynomialTermQ, PolynomialTerms, NonpolynomialTerms, PseudoBinomialParts, NormalizePseudoBinomial, PseudoBinomialPairQ, PseudoBinomialQ, PolynomialGCD, PolyGCD, AlgebraicFunctionFactors, NonalgebraicFunctionFactors, QuotientOfLinearsP, QuotientOfLinearsParts, QuotientOfLinearsQ, Flatten, Sort, AbsurdNumberQ, AbsurdNumberFactors, NonabsurdNumberFactors, SumSimplerAuxQ, Prepend, Drop, CombineExponents, FactorInteger, FactorAbsurdNumber, SubstForInverseFunction, SubstForFractionalPower, SubstForFractionalPowerOfQuotientOfLinears, FractionalPowerOfQuotientOfLinears, SubstForFractionalPowerQ, SubstForFractionalPowerAuxQ, FractionalPowerOfSquareQ, FractionalPowerSubexpressionQ, Apply, FactorNumericGcd, MergeableFactorQ, MergeFactor, MergeFactors, TrigSimplifyQ, TrigSimplify, TrigSimplifyRecur, Order, FactorOrder, Smallest, OrderedQ, MinimumDegree, PositiveFactors, Sign, NonpositiveFactors, PolynomialInAuxQ, PolynomialInQ, ExponentInAux, ExponentIn, PolynomialInSubstAux, PolynomialInSubst, Distrib, DistributeDegree, FunctionOfPower, DivideDegreesOfFactors, MonomialFactor, FullSimplify, FunctionOfLinearSubst, FunctionOfLinear, NormalizeIntegrand, NormalizeIntegrandAux, NormalizeIntegrandFactor, NormalizeIntegrandFactorBase, NormalizeTogether, NormalizeLeadTermSigns, AbsorbMinusSign, NormalizeSumFactors, SignOfFactor, NormalizePowerOfLinear, SimplifyIntegrand, SimplifyTerm, TogetherSimplify, SmartSimplify, SubstForExpn, ExpandToSum, UnifySum, UnifyTerms, UnifyTerm, CalculusQ, FunctionOfInverseLinear, PureFunctionOfSinhQ, PureFunctionOfTanhQ, PureFunctionOfCoshQ, IntegerQuotientQ, OddQuotientQ, EvenQuotientQ, FindTrigFactor, FunctionOfSinhQ, FunctionOfCoshQ, OddHyperbolicPowerQ, FunctionOfTanhQ, FunctionOfTanhWeight, FunctionOfHyperbolicQ, SmartNumerator, SmartDenominator, SubstForAux, ActivateTrig, ExpandTrig, TrigExpand, SubstForTrig, SubstForHyperbolic, InertTrigFreeQ, LCM, SubstForFractionalPowerOfLinear, FractionalPowerOfLinear, InverseFunctionOfLinear, InertTrigQ, InertReciprocalQ, DeactivateTrig, FixInertTrigFunction, DeactivateTrigAux, PowerOfInertTrigSumQ, PiecewiseLinearQ, KnownTrigIntegrandQ, KnownSineIntegrandQ, KnownTangentIntegrandQ, KnownCotangentIntegrandQ, KnownSecantIntegrandQ, TryPureTanSubst, TryTanhSubst, TryPureTanhSubst, AbsurdNumberGCD, AbsurdNumberGCDList, ExpandTrigExpand, ExpandTrigReduce, ExpandTrigReduceAux, NormalizeTrig, TrigToExp, ExpandTrigToExp, TrigReduce, FunctionOfTrig, AlgebraicTrigFunctionQ, FunctionOfHyperbolic, FunctionOfQ, FunctionOfExpnQ, PureFunctionOfSinQ, PureFunctionOfCosQ, PureFunctionOfTanQ, PureFunctionOfCotQ, FunctionOfCosQ, FunctionOfSinQ, OddTrigPowerQ, FunctionOfTanQ, FunctionOfTanWeight, FunctionOfTrigQ, FunctionOfDensePolynomialsQ, FunctionOfLog, PowerVariableExpn, PowerVariableDegree, PowerVariableSubst, EulerIntegrandQ, FunctionOfSquareRootOfQuadratic, SquareRootOfQuadraticSubst, Divides, EasyDQ, ProductOfLinearPowersQ, Rt, NthRoot, AtomBaseQ, SumBaseQ, NegSumBaseQ, AllNegTermQ, SomeNegTermQ, TrigSquareQ, RtAux, TrigSquare, IntSum, IntTerm, Map2, ConstantFactor, SameQ, ReplacePart, CommonFactors, MostMainFactorPosition, FunctionOfExponentialQ, FunctionOfExponential, FunctionOfExponentialFunction, FunctionOfExponentialFunctionAux, FunctionOfExponentialTest, FunctionOfExponentialTestAux, stdev, rubi_test, If, IntQuadraticQ, IntBinomialQ, RectifyTangent, RectifyCotangent, Inequality, Condition, Simp, SimpHelp, SplitProduct, SplitSum, Complex, UnsameQ, _SimpFixFactor, SimpFixFactor, _FixSimplify, FixSimplify, _SimplifyAntiderivativeSum, SimplifyAntiderivativeSum, _SimplifyAntiderivative, SimplifyAntiderivative, _TrigSimplifyAux, TrigSimplifyAux)
    from sympy import Integral, S, sqrt
    from sympy.integrals.rubi.symbol import WC
    from sympy.core.symbol import symbols
    from sympy.functions import (log, sin, cos, tan, cot, csc, sec, sqrt, erf, exp, log)
    from sympy.functions.elementary.hyperbolic import (acosh, asinh, atanh, acoth, acsch, asech, cosh, sinh, tanh, coth, sech, csch)
    from sympy.functions.elementary.trigonometric import (atan, acsc, asin, acot, acos, asec)


    A_, B_, C_, F_, a_, b_, c_, d_, e_, f_, g_, h_, i_, j_, k_, l_, m_, n_, p_, q_, r_, t_, u_, v_, s_, w_, x_, z_ = [WC(i) for i in 'ABCFabcdefghijklmnpqrtuvswxz']
    a1_, a2_, b1_, b2_, c1_, c2_, d1_, d2_, n1_, n2_, e1_, e2_, f1_, f2_, g1_, g2_, n1_, n2_, n3_, Pq_, Pm_, Px_, Qm_, Qr_, Qx_, jn_, mn_, non2_, RFx_, RGx_ = [WC(i) for i in ['a1', 'a2', 'b1', 'b2', 'c1', 'c2', 'd1', 'd2', 'n1', 'n2', 'e1', 'e2', 'f1', 'f2', 'g1', 'g2', 'n1', 'n2', 'n3',' Pq', 'Pm', ' Px', 'Qm', 'Qr', 'Qx', 'jn', 'mn', 'non2', 'RFx', 'RGx']]
    p, q, r, s, mn, gcd, P, Q, lst = symbols('p q r s mn gcd P Q lst')

    _UseGamma = False

def logarithms(rubi):

    pattern1 = Pattern(Integral(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)))
    rule1 = ReplacementRule(pattern1, lambda c, f, q, d, x, e, p : -p*q*x + (e + f*x)*Log(c*(d*(e + f*x)**p)**q)/f)
    rubi.add(rule1)

    pattern2 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))))
    rule2 = ReplacementRule(pattern2, lambda c, f, a, b, q, d, x, n, e, p : -b*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1)), x) + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*(e + f*x)/f)
    rubi.add(rule2)

    pattern3 = Pattern(Integral(1/Log((x_*WC('f', S(1)) + WC('e', S(0)))*WC('d', S(1))), x_), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)))
    rule3 = ReplacementRule(pattern3, lambda e, d, x, f : LogIntegral(d*(e + f*x))/(d*f))
    rubi.add(rule3)

    pattern4 = Pattern(Integral(1/(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)))
    rule4 = ReplacementRule(pattern4, lambda c, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-S(1)/(p*q))*(e + f*x)*ExpIntegralEi((a + b*Log(c*(d*(e + f*x)**p)**q))/(b*p*q))*exp(-a/(b*p*q))/(b*f*p*q))
    rubi.add(rule4)

    pattern5 = Pattern(Integral(1/sqrt(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda b, q, p: PosQ(b*p*q)))
    rule5 = ReplacementRule(pattern5, lambda c, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-S(1)/(p*q))*(e + f*x)*Erfi(Sqrt(a + b*Log(c*(d*(e + f*x)**p)**q))/Rt(b*p*q, S(2)))*Rt(b*p*q, S(2))*Sqrt(Pi)*exp(-a/(b*p*q))/(b*f*p*q))
    rubi.add(rule5)

    pattern6 = Pattern(Integral(1/sqrt(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda b, q, p: NegQ(b*p*q)))
    rule6 = ReplacementRule(pattern6, lambda c, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-S(1)/(p*q))*(e + f*x)*Erf(Sqrt(a + b*Log(c*(d*(e + f*x)**p)**q))/Rt(-b*p*q, S(2)))*Rt(-b*p*q, S(2))*Sqrt(Pi)*exp(-a/(b*p*q))/(b*f*p*q))
    rubi.add(rule6)

    pattern7 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Less(n, S(-1))))
    rule7 = ReplacementRule(pattern7, lambda c, f, a, b, q, d, x, n, e, p : -Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1)), x)/(b*p*q*(n + S(1))) + (a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(e + f*x)/(b*f*p*q*(n + S(1))))
    rubi.add(rule7)

    pattern8 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: ~(IntegerQ(S(2)*n))))
    rule8 = ReplacementRule(pattern8, lambda c, f, a, b, q, d, x, n, e, p : (c*(d*(e + f*x)**p)**q)**(-S(1)/(p*q))*((-a - b*Log(c*(d*(e + f*x)**p)**q))/(b*p*q))**(-n)*(a + b*Log(c*(d*(e + f*x)**p)**q))**n*(e + f*x)*Gamma(n + S(1), (-a - b*Log(c*(d*(e + f*x)**p)**q))/(b*p*q))*exp(-a/(b*p*q))/f)
    rubi.add(rule8)

    pattern9 = Pattern(Integral(S(1)/((x_*WC('h', S(1)) + WC('g', S(0)))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)))
    rule9 = ReplacementRule(pattern9, lambda c, h, g, f, a, b, q, d, x, e, p : Log(RemoveContent(a + b*Log(c*(d*(e + f*x)**p)**q), x))/(b*h*p*q))
    rubi.add(rule9)

    pattern10 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda n: NonzeroQ(n + S(1))))
    rule10 = ReplacementRule(pattern10, lambda c, h, g, f, a, b, q, d, x, n, e, p : (a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))/(b*h*p*q*(n + S(1))))
    rubi.add(rule10)

    pattern11 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))))
    rule11 = ReplacementRule(pattern11, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : -b*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*(g + h*x)**m, x)/(m + S(1)) + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**(m + S(1))/(h*(m + S(1))))
    rubi.add(rule11)

    pattern12 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))/Log((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1))), x_), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda m, p: ZeroQ(m - p + S(1))), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda h, p, f: IntegerQ(p) | PositiveQ(h/f)))
    rule12 = ReplacementRule(pattern12, lambda h, g, m, f, d, x, e, p : (h/f)**(p + S(-1))*LogIntegral(d*(e + f*x)**p)/(d*f*p))
    rubi.add(rule12)

    pattern13 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**m_/Log((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1))), x_), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda m, p: ZeroQ(m - p + S(1))), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda h, p, f: ~(IntegerQ(p) | PositiveQ(h/f))))
    rule13 = ReplacementRule(pattern13, lambda h, g, m, f, d, x, e, p : (e + f*x)**(-p + S(1))*(g + h*x)**(p + S(-1))*Int((e + f*x)**(p + S(-1))/Log(d*(e + f*x)**p), x))
    rubi.add(rule13)

    pattern14 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))/(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule14 = ReplacementRule(pattern14, lambda c, h, g, m, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-(m + S(1))/(p*q))*(g + h*x)**(m + S(1))*ExpIntegralEi((a + b*Log(c*(d*(e + f*x)**p)**q))*(m + S(1))/(b*p*q))*exp(-a*(m + S(1))/(b*p*q))/(b*h*p*q))
    rubi.add(rule14)

    pattern15 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))/sqrt(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda b, q, m, p: PosQ((m + S(1))/(b*p*q))))
    rule15 = ReplacementRule(pattern15, lambda c, h, g, m, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-(m + S(1))/(p*q))*(g + h*x)**(m + S(1))*Erfi(Rt((m + S(1))/(b*p*q), S(2))*Sqrt(a + b*Log(c*(d*(e + f*x)**p)**q)))*Sqrt(Pi)*exp(-a*(m + S(1))/(b*p*q))/(b*h*p*q*Rt((m + S(1))/(b*p*q), S(2))))
    rubi.add(rule15)

    pattern16 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))/sqrt(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda b, q, m, p: NegQ((m + S(1))/(b*p*q))))
    rule16 = ReplacementRule(pattern16, lambda c, h, g, m, f, a, b, q, d, x, e, p : (c*(d*(e + f*x)**p)**q)**(-(m + S(1))/(p*q))*(g + h*x)**(m + S(1))*Erf(Rt((-m + S(-1))/(b*p*q), S(2))*Sqrt(a + b*Log(c*(d*(e + f*x)**p)**q)))*Sqrt(Pi)*exp(-a*(m + S(1))/(b*p*q))/(b*h*p*q*Rt((-m + S(-1))/(b*p*q), S(2))))
    rubi.add(rule16)

    pattern17 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Less(n, S(-1))))
    rule17 = ReplacementRule(pattern17, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : -(m + S(1))*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(g + h*x)**m, x)/(b*p*q*(n + S(1))) + (a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(g + h*x)**(m + S(1))/(b*h*p*q*(n + S(1))))
    rubi.add(rule17)

    pattern18 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule18 = ReplacementRule(pattern18, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : (c*(d*(e + f*x)**p)**q)**(-(m + S(1))/(p*q))*((a + b*Log(c*(d*(e + f*x)**p)**q))*(-m + S(-1))/(b*p*q))**(-n)*(a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**(m + S(1))*Gamma(n + S(1), (a + b*Log(c*(d*(e + f*x)**p)**q))*(-m + S(-1))/(b*p*q))*exp(-a*(m + S(1))/(b*p*q))/(h*(m + S(1))))
    rubi.add(rule18)

    pattern19 = Pattern(Integral(Log((x_*WC('f', S(1)) + WC('e', S(0)))*WC('c', S(1)))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda c, h, g, f, e: ZeroQ(c*(-e*h + f*g) + h)))
    rule19 = ReplacementRule(pattern19, lambda c, h, g, f, x, e : -PolyLog(S(2), -(g + h*x)*Together(c*f/h))/h)
    rubi.add(rule19)

    pattern20 = Pattern(Integral((Log((x_*WC('f', S(1)) + WC('e', S(0)))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda c, h, g, f, e: NonzeroQ(c*(-e*h + f*g) + h)), CustomConstraint(lambda c, h, g, f, e: PositiveQ(c*(e - f*g/h))))
    rule20 = ReplacementRule(pattern20, lambda c, h, g, f, a, b, x, e : b*Int(Log(-h*(e + f*x)/(-e*h + f*g))/(g + h*x), x) + (a + b*Log(c*(e - f*g/h)))*Log(g + h*x)/h)
    rubi.add(rule20)

    pattern21 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule21 = ReplacementRule(pattern21, lambda c, h, g, f, a, b, q, d, x, n, e, p : -b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*Log(f*(g + h*x)/(-e*h + f*g))/(e + f*x), x)/h + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*Log(f*(g + h*x)/(-e*h + f*g))/h)
    rubi.add(rule21)

    pattern22 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule22 = ReplacementRule(pattern22, lambda c, h, g, m, f, a, b, q, d, x, e, p : -b*f*p*q*Int((g + h*x)**(m + S(1))/(e + f*x), x)/(h*(m + S(1))) + (a + b*Log(c*(d*(e + f*x)**p)**q))*(g + h*x)**(m + S(1))/(h*(m + S(1))))
    rubi.add(rule22)

    pattern23 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_/(x_*WC('h', S(1)) + WC('g', S(0)))**S(2), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))))
    rule23 = ReplacementRule(pattern23, lambda c, h, g, f, a, b, q, d, x, n, e, p : -b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))/(g + h*x), x)/(-e*h + f*g) + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*(e + f*x)/((g + h*x)*(-e*h + f*g)))
    rubi.add(rule23)

    pattern24 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda n, m: IntegersQ(S(2)*m, S(2)*n)), CustomConstraint(lambda n, m: Equal(n, S(1)) | ~(PositiveIntegerQ(m)) | (Equal(n, S(2)) & NonzeroQ(m + S(-1)))))
    rule24 = ReplacementRule(pattern24, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : -b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*(g + h*x)**(m + S(1))/(e + f*x), x)/(h*(m + S(1))) + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**(m + S(1))/(h*(m + S(1))))
    rubi.add(rule24)

    pattern25 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))/(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda m: PositiveIntegerQ(m)))
    rule25 = ReplacementRule(pattern25, lambda c, h, g, m, f, a, b, q, d, x, e, p : Int(ExpandIntegrand((g + h*x)**m/(a + b*Log(c*(d*(e + f*x)**p)**q)), x), x))
    rubi.add(rule25)

    pattern26 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda n, m: RationalQ(m, n)), CustomConstraint(lambda n: Less(n, S(-1))), CustomConstraint(lambda m: Greater(m, S(0))))
    rule26 = ReplacementRule(pattern26, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : -(m + S(1))*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(g + h*x)**m, x)/(b*p*q*(n + S(1))) + m*(-e*h + f*g)*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(g + h*x)**(m + S(-1)), x)/(b*f*p*q*(n + S(1))) + (a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(1))*(e + f*x)*(g + h*x)**m/(b*f*p*q*(n + S(1))))
    rubi.add(rule26)

    pattern27 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: NonzeroQ(-e*h + f*g)), CustomConstraint(lambda m: PositiveIntegerQ(m)))
    rule27 = ReplacementRule(pattern27, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : Int(ExpandIntegrand((a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**m, x), x))
    rubi.add(rule27)

    pattern28 = Pattern(Integral(u_**WC('m', S(1))*(Log((v_**p_*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda u, x, v: LinearQ(List(u, v), x)), CustomConstraint(lambda u, x, v: ~(LinearMatchQ(List(u, v), x))))
    rule28 = ReplacementRule(pattern28, lambda c, v, u, m, a, b, q, d, x, n, p : Int((a + b*Log(c*(d*ExpandToSum(v, x)**p)**q))**n*ExpandToSum(u, x)**m, x))
    rubi.add(rule28)

    pattern29 = Pattern(Integral((x_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)))
    rule29 = ReplacementRule(pattern29, lambda c, h, g, m, f, a, b, q, d, x, n, e, p : Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**m, x))
    rubi.add(rule29)

    pattern30 = Pattern(Integral(Log(WC('c', S(1))/(x_*WC('f', S(1)) + WC('e', S(0))))/((x_*WC('h', S(1)) + WC('g', S(0)))*(x_*WC('j', S(1)) + WC('i', S(0)))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda c, j, f, i, e: ZeroQ(f*i + j*(c - e))))
    rule30 = ReplacementRule(pattern30, lambda c, j, h, g, f, x, i, e : f*PolyLog(S(2), Simplify(f*(i + j*x)/(j*(e + f*x))))/(h*(-e*j + f*i)))
    rubi.add(rule30)

    pattern31 = Pattern(Integral((a_ + Log(WC('c', S(1))/(x_*WC('f', S(1)) + WC('e', S(0))))*WC('b', S(1)))/((x_*WC('h', S(1)) + WC('g', S(0)))*(x_*WC('j', S(1)) + WC('i', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda c, j, f, i, e: ZeroQ(f*i + j*(c - e))))
    rule31 = ReplacementRule(pattern31, lambda c, j, h, g, f, b, a, x, i, e : a*Int(S(1)/((g + h*x)*(i + j*x)), x) + b*Int(Log(c/(e + f*x))/((g + h*x)*(i + j*x)), x))
    rubi.add(rule31)

    pattern32 = Pattern(Integral((x_*WC('j', S(1)) + WC('i', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: IntegerQ(m + S(1)/2)))
    rule32 = ReplacementRule(pattern32, lambda c, j, h, g, m, f, a, b, q, d, x, i, e, p : With(List(Set(u, IntHide((i + j*x)**m/(g + h*x), x))), -b*h*p*q*Int(SimplifyIntegrand(u/(g + h*x), x), x) + Dist(a + b*Log(c*(d*(e + f*x)**p)**q), u)))
    rubi.add(rule32)

    pattern33 = Pattern(Integral((x_*WC('j', S(1)) + WC('i', S(0)))**WC('m', S(1))*(Log((x_*WC('f', S(1)) + WC('e', S(0)))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(-e*h + f*g)), CustomConstraint(lambda m: PositiveIntegerQ(m)), CustomConstraint(lambda n, m: IntegerQ(n) | Greater(m, S(0))))
    rule33 = ReplacementRule(pattern33, lambda c, j, h, g, m, f, a, b, x, i, n, e : c**(-m)*f**(-m)*Subst(Int((a + b*x)**n*(-c*e*j + c*f*i + j*exp(x))**m, x), x, Log(c*(e + f*x)))/h)
    rubi.add(rule33)

    pattern34 = Pattern(Integral((x_*WC('j', S(1)) + WC('i', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda m: IntegerQ(m)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule34 = ReplacementRule(pattern34, lambda c, j, h, g, m, f, a, b, q, d, x, i, n, e, p : With(List(Set(u, ExpandIntegrand((a + b*Log(c*(d*(e + f*x)**p)**q))**n, (i + j*x)**m/(g + h*x), x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule34)

    pattern35 = Pattern(Integral((x_*WC('j', S(1)) + WC('i', S(0)))**WC('m', S(1))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)))
    rule35 = ReplacementRule(pattern35, lambda c, j, h, g, m, f, a, b, q, d, x, i, n, e, p : Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n*(i + j*x)**m/(g + h*x), x))
    rubi.add(rule35)

    pattern36 = Pattern(Integral(Log(WC('c', S(1))/(x_*WC('f', S(1)) + WC('e', S(0))))/(g_ + x_**S(2)*WC('h', S(1))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(e**S(2)*h + f**S(2)*g)), CustomConstraint(lambda e, c: ZeroQ(c - S(2)*e)))
    rule36 = ReplacementRule(pattern36, lambda c, h, g, f, x, e : -f*PolyLog(S(2), Simplify((-e + f*x)/(e + f*x)))/(S(2)*e*h))
    rubi.add(rule36)

    pattern37 = Pattern(Integral((Log(WC('c', S(1))/(x_*WC('f', S(1)) + WC('e', S(0))))*WC('b', S(1)) + WC('a', S(0)))/(g_ + x_**S(2)*WC('h', S(1))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda e, h, g, f: ZeroQ(e**S(2)*h + f**S(2)*g)), CustomConstraint(lambda e, c: PositiveQ(c/(S(2)*e))), CustomConstraint(lambda a, e, c: NonzeroQ(a) | NonzeroQ(c - S(2)*e)))
    rule37 = ReplacementRule(pattern37, lambda c, h, g, f, a, b, x, e : b*Int(Log(S(2)*e/(e + f*x))/(g + h*x**S(2)), x) + (a + b*Log(c/(S(2)*e)))*Int(1/(g + h*x**S(2)), x))
    rubi.add(rule37)

    pattern38 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(x_**S(2)*WC('i', S(1)) + x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda h, g, f, i, e: ZeroQ(e**S(2)*i - e*f*h + f**S(2)*g)))
    rule38 = ReplacementRule(pattern38, lambda c, h, g, f, a, b, q, d, x, i, e, p : e*f*Int((a + b*Log(c*(d*(e + f*x)**p)**q))/((e + f*x)*(e*i*x + f*g)), x))
    rubi.add(rule38)

    pattern39 = Pattern(Integral((Log(((e_ + x_*WC('f', S(1)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(g_ + x_**S(2)*WC('i', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda e, i, g, f: ZeroQ(e**S(2)*i + f**S(2)*g)))
    rule39 = ReplacementRule(pattern39, lambda c, g, f, a, b, q, d, x, i, e, p : e*f*Int((a + b*Log(c*(d*(e + f*x)**p)**q))/((e + f*x)*(e*i*x + f*g)), x))
    rubi.add(rule39)

    pattern40 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/sqrt(g_ + x_**S(2)*WC('h', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda g: PositiveQ(g)))
    rule40 = ReplacementRule(pattern40, lambda c, h, g, f, a, b, q, d, x, e, p : With(List(Set(u, IntHide(1/Sqrt(g + h*x**S(2)), x))), -b*f*p*q*Int(SimplifyIntegrand(u/(e + f*x), x), x) + u*(a + b*Log(c*(d*(e + f*x)**p)**q))))
    rubi.add(rule40)

    pattern41 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(sqrt(g1_ + x_*WC('h1', S(1)))*sqrt(g2_ + x_*WC('h2', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g1, x: FreeQ(g1, x)), CustomConstraint(lambda h1, x: FreeQ(h1, x)), CustomConstraint(lambda g2, x: FreeQ(g2, x)), CustomConstraint(lambda h2, x: FreeQ(h2, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda g2, h2, h1, g1: ZeroQ(g1*h2 + g2*h1)), CustomConstraint(lambda g1: PositiveQ(g1)), CustomConstraint(lambda g2: PositiveQ(g2)))
    rule41 = ReplacementRule(pattern41, lambda c, h1, f, a, b, q, g1, d, x, g2, e, h2, p : With(List(Set(u, IntHide(1/Sqrt(g1*g2 + h1*h2*x**S(2)), x))), -b*f*p*q*Int(SimplifyIntegrand(u/(e + f*x), x), x) + u*(a + b*Log(c*(d*(e + f*x)**p)**q))))
    rubi.add(rule41)

    pattern42 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/sqrt(g_ + x_**S(2)*WC('h', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda g: ~(PositiveQ(g))))
    rule42 = ReplacementRule(pattern42, lambda c, h, g, f, a, b, q, d, x, e, p : Int((a + b*Log(c*(d*(e + f*x)**p)**q))/Sqrt(S(1) + h*x**S(2)/g), x)*Sqrt(S(1) + h*x**S(2)/g)/Sqrt(g + h*x**S(2)))
    rubi.add(rule42)

    pattern43 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(sqrt(g1_ + x_*WC('h1', S(1)))*sqrt(g2_ + x_*WC('h2', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g1, x: FreeQ(g1, x)), CustomConstraint(lambda h1, x: FreeQ(h1, x)), CustomConstraint(lambda g2, x: FreeQ(g2, x)), CustomConstraint(lambda h2, x: FreeQ(h2, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda g2, h2, h1, g1: ZeroQ(g1*h2 + g2*h1)))
    rule43 = ReplacementRule(pattern43, lambda c, h1, f, a, b, q, g1, d, x, g2, e, h2, p : Int((a + b*Log(c*(d*(e + f*x)**p)**q))/Sqrt(S(1) + h1*h2*x**S(2)/(g1*g2)), x)*Sqrt(S(1) + h1*h2*x**S(2)/(g1*g2))/(Sqrt(g1 + h1*x)*Sqrt(g2 + h2*x)))
    rubi.add(rule43)

    pattern44 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))*Log((x_*WC('k', S(1)) + WC('j', S(0)))*WC('i', S(1)))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda k, x: FreeQ(k, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))), CustomConstraint(lambda j, h, g, i, k: ZeroQ(h - i*(-g*k + h*j))))
    rule44 = ReplacementRule(pattern44, lambda c, j, h, g, f, a, b, q, d, x, i, n, e, k, p : b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*PolyLog(S(2), Together(-i*(j + k*x) + S(1)))/(e + f*x), x)/h - (a + b*Log(c*(d*(e + f*x)**p)**q))**n*PolyLog(S(2), Together(-i*(j + k*x) + S(1)))/h)
    rubi.add(rule44)

    pattern45 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))*Log((x_*WC('k', S(1)) + WC('j', S(0)))**WC('m', S(1))*WC('i', S(1)) + S(1))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda k, x: FreeQ(k, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))), CustomConstraint(lambda g, k, h, j: ZeroQ(-g*k + h*j)))
    rule45 = ReplacementRule(pattern45, lambda j, c, h, m, g, f, a, b, q, d, x, i, n, e, k, p : b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*PolyLog(S(2), -i*(j + k*x)**m)/(e + f*x), x)/(h*m) - (a + b*Log(c*(d*(e + f*x)**p)**q))**n*PolyLog(S(2), -i*(j + k*x)**m)/(h*m))
    rubi.add(rule45)

    pattern46 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))*PolyLog(r_, (x_*WC('k', S(1)) + WC('j', S(0)))**WC('m', S(1))*WC('i', S(1)))/(x_*WC('h', S(1)) + WC('g', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda i, x: FreeQ(i, x)), CustomConstraint(lambda j, x: FreeQ(j, x)), CustomConstraint(lambda k, x: FreeQ(k, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda r, x: FreeQ(r, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Greater(n, S(0))), CustomConstraint(lambda g, k, h, j: ZeroQ(-g*k + h*j)))
    rule46 = ReplacementRule(pattern46, lambda c, j, h, g, m, f, a, b, q, d, x, i, r, n, e, k, p : -b*f*n*p*q*Int((a + b*Log(c*(d*(e + f*x)**p)**q))**(n + S(-1))*PolyLog(r + S(1), i*(j + k*x)**m)/(e + f*x), x)/(h*m) + (a + b*Log(c*(d*(e + f*x)**p)**q))**n*PolyLog(r + S(1), i*(j + k*x)**m)/(h*m))
    rubi.add(rule46)

    pattern47 = Pattern(Integral(F_**(x_*WC('h', S(1)) + WC('g', S(0)))*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))*WC('Px', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda Px, x: PolynomialQ(Px, x)), CustomConstraint(lambda m: PositiveIntegerQ(m)), CustomConstraint(lambda F: MemberQ(List(Log, ArcSin, ArcCos, ArcTan, ArcCot, ArcSinh, ArcCosh, ArcTanh, ArcCoth), F)))
    rule47 = ReplacementRule(pattern47, lambda F, c, h, g, m, f, a, b, q, Px, d, x, e, p : With(List(Set(u, IntHide(Px*F(g + h*x)**m, x))), -b*f*p*q*Int(SimplifyIntegrand(u/(e + f*x), x), x) + Dist(a + b*Log(c*(d*(e + f*x)**p)**q), u, x)))
    rubi.add(rule47)

    pattern48 = Pattern(Integral((Log(((e_ + x_**m_*WC('f', S(1)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/x_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule48 = ReplacementRule(pattern48, lambda c, m, f, a, b, q, d, x, n, e, p : Subst(Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n/x, x), x, x**m)/m)
    rubi.add(rule48)

    pattern49 = Pattern(Integral((Log(((x_**m_*(f_ + x_**WC('r', S(1))*WC('e', S(1))))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/x_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda m, r: ZeroQ(m + r)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule49 = ReplacementRule(pattern49, lambda c, p, m, f, a, b, q, d, x, n, e, r : Subst(Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n/x, x), x, x**m)/m)
    rubi.add(rule49)

    pattern50 = Pattern(Integral(x_**WC('r1', S(1))*(Log(((x_**r_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda r, x: FreeQ(r, x)), CustomConstraint(lambda r, r1: ZeroQ(-r + r1 + S(1))))
    rule50 = ReplacementRule(pattern50, lambda c, r1, f, a, b, q, d, x, r, n, e, p : Subst(Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n, x), x, x**r)/r)
    rubi.add(rule50)

    pattern51 = Pattern(Integral(x_**WC('r1', S(1))*(x_**r_*WC('h', S(1)) + WC('g', S(0)))**WC('m', S(1))*(Log(((x_**r_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda r, x: FreeQ(r, x)), CustomConstraint(lambda r, r1: ZeroQ(-r + r1 + S(1))))
    rule51 = ReplacementRule(pattern51, lambda c, r1, h, g, m, f, a, b, q, d, x, r, n, e, p : Subst(Int((a + b*Log(c*(d*(e + f*x)**p)**q))**n*(g + h*x)**m, x), x, x**r)/r)
    rubi.add(rule51)

    pattern52 = Pattern(Integral((Log(x_**WC('n', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(d_ + x_**S(2)*WC('e', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)))
    rule52 = ReplacementRule(pattern52, lambda c, a, b, x, d, n, e : With(List(Set(u, IntHide(1/(d + e*x**S(2)), x))), -b*n*Int(u/x, x) + Dist(a + b*Log(c*x**n), u)))
    rubi.add(rule52)

    pattern53 = Pattern(Integral(Log((x_**mn_*WC('b', S(1)) + WC('a', S(0)))*WC('c', S(1)))/(x_*(d_ + x_**WC('n', S(1))*WC('e', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda n, mn: ZeroQ(mn + n)), CustomConstraint(lambda c, a, b, d, e: ZeroQ(-a*c*d + b*c*e + d)))
    rule53 = ReplacementRule(pattern53, lambda c, a, b, mn, x, d, n, e : PolyLog(S(2), -Together(b*c*x**(-n)*(d + e*x**n)/d))/(d*n))
    rubi.add(rule53)

    pattern54 = Pattern(Integral(Log(x_**mn_*(x_**WC('n', S(1))*WC('a', S(1)) + WC('b', S(0)))*WC('c', S(1)))/(x_*(d_ + x_**WC('n', S(1))*WC('e', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda n, mn: ZeroQ(mn + n)), CustomConstraint(lambda c, a, b, d, e: ZeroQ(-a*c*d + b*c*e + d)))
    rule54 = ReplacementRule(pattern54, lambda c, b, a, mn, x, d, n, e : PolyLog(S(2), -Together(b*c*x**(-n)*(d + e*x**n)/d))/(d*n))
    rubi.add(rule54)

    pattern55 = Pattern(Integral(Px_*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda Px, x: PolynomialQ(Px, x)))
    rule55 = ReplacementRule(pattern55, lambda c, f, a, b, q, Px, d, x, n, e, p : Int(ExpandIntegrand(Px*(a + b*Log(c*(d*(e + f*x)**p)**q))**n, x), x))
    rubi.add(rule55)

    pattern56 = Pattern(Integral(RFx_*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule56 = ReplacementRule(pattern56, lambda c, RFx, f, a, b, q, d, x, n, e, p : With(List(Set(u, ExpandIntegrand((a + b*Log(c*(d*(e + f*x)**p)**q))**n, RFx, x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule56)

    pattern57 = Pattern(Integral(RFx_*(Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule57 = ReplacementRule(pattern57, lambda c, RFx, f, a, b, q, d, x, n, e, p : With(List(Set(u, ExpandIntegrand(RFx*(a + b*Log(c*(d*(e + f*x)**p)**q))**n, x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule57)

    pattern58 = Pattern(Integral((Log(((x_**S(2)*WC('g', S(1)) + x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))*WC('u', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e, g, f: ZeroQ(-S(4)*e*g + f**S(2))), CustomConstraint(lambda p: IntegerQ(p)))
    rule58 = ReplacementRule(pattern58, lambda c, u, g, f, a, b, q, d, x, n, e, p : Int(u*(a + b*Log(c*(S(4)**(-p)*d*g**(-p)*(f + S(2)*g*x)**(S(2)*p))**q))**n, x))
    rubi.add(rule58)

    pattern59 = Pattern(Integral(Log(((x_**WC('n', S(1))*WC('c', S(1)))**p_*WC('b', S(1)))**q_*WC('a', S(1)))**WC('r', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda r, x: FreeQ(r, x)))
    rule59 = ReplacementRule(pattern59, lambda c, p, a, b, q, x, n, r : Subst(Int(Log(x**(n*p*q))**r, x), x**(n*p*q), a*(b*(c*x**n)**p)**q))
    rubi.add(rule59)

    pattern60 = Pattern(Integral(x_**WC('m', S(1))*Log(((x_**WC('n', S(1))*WC('c', S(1)))**p_*WC('b', S(1)))**q_*WC('a', S(1)))**WC('r', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda r, x: FreeQ(r, x)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda c, a, b, q, x, n, p: ~(SameQ(x**(n*p*q), a*(b*(c*x**n)**p)**q))))
    rule60 = ReplacementRule(pattern60, lambda c, p, m, a, b, q, x, n, r : Subst(Int(x**m*Log(x**(n*p*q))**r, x), x**(n*p*q), a*(b*(c*x**n)**p)**q))
    rubi.add(rule60)

    pattern61 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))*WC('e1', S(1))/(x_*WC('d', S(1)) + WC('c', S(0))))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))*WC('u', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda b, d, c, a: ZeroQ(-a*d + b*c)))
    rule61 = ReplacementRule(pattern61, lambda c, u, e1, a, b, d, x, n, e, p : Int(u, x)*Log(e*(b*e1/d)**n)**p)
    rubi.add(rule61)

    pattern62 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule62 = ReplacementRule(pattern62, lambda c, e1, a, b, n2, d, x, n1, n, e, p : -n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))/(c + d*x), x)/b + (a + b*x)*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/b)
    rubi.add(rule62)

    pattern63 = Pattern(Integral(Log((x_*WC('b', S(1)) + WC('a', S(0)))*WC('e', S(1))/(x_*WC('d', S(1)) + WC('c', S(0))))/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)), CustomConstraint(lambda b, e, d: ZeroQ(-b*e + d)))
    rule63 = ReplacementRule(pattern63, lambda c, g, f, a, b, d, x, e : PolyLog(S(2), Together(-a*e + c)/(c + d*x))/g)
    rubi.add(rule63)

    pattern64 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule64 = ReplacementRule(pattern64, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))*Log((-a*d + b*c)/(b*(c + d*x)))/((a + b*x)*(c + d*x)), x)/g - Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p*Log((-a*d + b*c)/(b*(c + d*x)))/g)
    rubi.add(rule64)

    pattern65 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: ZeroQ(-a*g + b*f)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule65 = ReplacementRule(pattern65, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))*Log((a*d - b*c)/(d*(a + b*x)))/((a + b*x)*(c + d*x)), x)/g - Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p*Log((a*d - b*c)/(d*(a + b*x)))/g)
    rubi.add(rule65)

    pattern66 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)))
    rule66 = ReplacementRule(pattern66, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e : -n*n1*(-a*d + b*c)*Int(Log(f + g*x)/((a + b*x)*(c + d*x)), x)/g + Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)*Log(f + g*x)/g)
    rubi.add(rule66)

    pattern67 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**p_/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda p: IntegerQ(p)), CustomConstraint(lambda p: Greater(p, S(1))))
    rule67 = ReplacementRule(pattern67, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : d*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(c + d*x), x)/g - (-c*g + d*f)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((c + d*x)*(f + g*x)), x)/g)
    rubi.add(rule67)

    pattern68 = Pattern(Integral(S(1)/((x_*WC('g', S(1)) + WC('f', S(0)))**S(2)*Log((x_*WC('b', S(1)) + WC('a', S(0)))*WC('e', S(1))/(x_*WC('d', S(1)) + WC('c', S(0))))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)))
    rule68 = ReplacementRule(pattern68, lambda c, g, f, a, b, d, x, e : d**S(2)*LogIntegral(e*(a + b*x)/(c + d*x))/(e*g**S(2)*(-a*d + b*c)))
    rubi.add(rule68)

    pattern69 = Pattern(Integral(S(1)/((x_*WC('g', S(1)) + WC('f', S(0)))**S(2)*Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)))
    rule69 = ReplacementRule(pattern69, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e : d**S(2)*(e*(e1*(a + b*x)**n1*(c + d*x)**n2)**n)**(-S(1)/(n*n1))*(a + b*x)*ExpIntegralEi(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)/(n*n1))/(g**S(2)*n*n1*(c + d*x)*(-a*d + b*c)))
    rubi.add(rule69)

    pattern70 = Pattern(Integral(S(1)/((x_*WC('g', S(1)) + WC('f', S(0)))**S(2)*Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: ZeroQ(-a*g + b*f)))
    rule70 = ReplacementRule(pattern70, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e : b**S(2)*(e*(e1*(a + b*x)**n1*(c + d*x)**n2)**n)**(S(1)/(n*n1))*(c + d*x)*ExpIntegralEi(-Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)/(n*n1))/(g**S(2)*n*n1*(a + b*x)*(-a*d + b*c)))
    rubi.add(rule70)

    pattern71 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_*WC('g', S(1)) + WC('f', S(0)))**S(2), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: NonzeroQ(-a*g + b*f)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule71 = ReplacementRule(pattern71, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : -n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))/((c + d*x)*(f + g*x)), x)/(-a*g + b*f) + (a + b*x)*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((f + g*x)*(-a*g + b*f)))
    rubi.add(rule71)

    pattern72 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_*WC('g', S(1)) + WC('f', S(0)))**S(2), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule72 = ReplacementRule(pattern72, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : -n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))/((a + b*x)*(f + g*x)), x)/(-c*g + d*f) + (c + d*x)*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((f + g*x)*(-c*g + d*f)))
    rubi.add(rule72)

    pattern73 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**p_/(x_*WC('g', S(1)) + WC('f', S(0)))**S(3), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: NonzeroQ(-a*g + b*f)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)))
    rule73 = ReplacementRule(pattern73, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : b*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(f + g*x)**S(2), x)/(-a*g + b*f) - g*Int((a + b*x)*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(f + g*x)**S(3), x)/(-a*g + b*f))
    rubi.add(rule73)

    pattern74 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**p_/(x_*WC('g', S(1)) + WC('f', S(0)))**S(3), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda b, g, a, f: ZeroQ(-a*g + b*f)))
    rule74 = ReplacementRule(pattern74, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : d*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(f + g*x)**S(2), x)/(-c*g + d*f) - g*Int((c + d*x)*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(f + g*x)**S(3), x)/(-c*g + d*f))
    rubi.add(rule74)

    pattern75 = Pattern(Integral((x_*WC('g', S(1)) + WC('f', S(0)))**WC('m', S(1))*Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: PositiveIntegerQ(p)), CustomConstraint(lambda m: IntegerQ(m)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule75 = ReplacementRule(pattern75, lambda c, e1, g, f, m, a, b, n2, d, x, n1, n, e, p : -n*n1*p*(-a*d + b*c)*Int((f + g*x)**(m + S(1))*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))/((a + b*x)*(c + d*x)), x)/(g*(m + S(1))) + (f + g*x)**(m + S(1))*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(g*(m + S(1))))
    rubi.add(rule75)

    pattern76 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))*Log(u_**n_*WC('e', S(1)))**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule76 = ReplacementRule(pattern76, lambda c, u, m, a, b, d, m2, x, n, e, p : -n*p*Int((a + b*x)**m*(c + d*x)**(-m + S(-2))*Log(e*u**n)**(p + S(-1)), x)/(m + S(1)) + (a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*Log(e*u**n)**p/((m + S(1))*(-a*d + b*c)))
    rubi.add(rule76)

    pattern77 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))*Log(u_)**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule77 = ReplacementRule(pattern77, lambda c, u, m, a, b, d, m2, x, p : -p*Int((a + b*x)**m*(c + d*x)**(-m + S(-2))*Log(u)**(p + S(-1)), x)/(m + S(1)) + (a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*Log(u)**p/((m + S(1))*(-a*d + b*c)))
    rubi.add(rule77)

    pattern78 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))/Log(u_**n_*WC('e', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule78 = ReplacementRule(pattern78, lambda c, u, m, a, b, d, m2, x, n, e : (e*u**n)**(-(m + S(1))/n)*(a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*ExpIntegralEi((m + S(1))*Log(e*u**n)/n)/(n*(-a*d + b*c)))
    rubi.add(rule78)

    pattern79 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))/Log(u_), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule79 = ReplacementRule(pattern79, lambda c, u, m, a, b, d, m2, x : u**(-m + S(-1))*(a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*ExpIntegralEi((m + S(1))*Log(u))/(-a*d + b*c))
    rubi.add(rule79)

    pattern80 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))*Log(u_**n_*WC('e', S(1)))**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule80 = ReplacementRule(pattern80, lambda c, u, m, a, b, d, m2, x, n, e, p : (a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*Log(e*u**n)**(p + S(1))/(n*(p + S(1))*(-a*d + b*c)) - (m + S(1))*Int((a + b*x)**m*(c + d*x)**(-m + S(-2))*Log(e*u**n)**(p + S(1)), x)/(n*(p + S(1))))
    rubi.add(rule80)

    pattern81 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**WC('m2', S(1))*Log(u_)**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda m2, m: ZeroQ(m + m2 + S(2))), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule81 = ReplacementRule(pattern81, lambda c, u, m, a, b, d, m2, x, p : (a + b*x)**(m + S(1))*(c + d*x)**(-m + S(-1))*Log(u)**(p + S(1))/((p + S(1))*(-a*d + b*c)) - (m + S(1))*Int((a + b*x)**m*(c + d*x)**(-m + S(-2))*Log(u)**(p + S(1)), x)/(p + S(1)))
    rubi.add(rule81)

    pattern82 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/((x_*WC('d', S(1)) + WC('c', S(0)))*(x_*WC('g', S(1)) + WC('f', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: NonzeroQ(-a*g + b*f)), CustomConstraint(lambda c, g, d, f: ZeroQ(-c*g + d*f)))
    rule82 = ReplacementRule(pattern82, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : d*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/(c + d*x)**S(2), x)/g)
    rubi.add(rule82)

    pattern83 = Pattern(Integral(Log((x_*WC('b', S(1)) + WC('a', S(0)))*WC('e', S(1))/(x_*WC('d', S(1)) + WC('c', S(0))))/((x_*WC('d', S(1)) + WC('c', S(0)))*(x_*WC('g', S(1)) + WC('f', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: NonzeroQ(-a*g + b*f)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda c, g, f, b, a, d, e: ZeroQ(-c*g + d*f - e*(-a*g + b*f))))
    rule83 = ReplacementRule(pattern83, lambda c, g, f, a, b, d, x, e : PolyLog(S(2), Simplify((f + g*x)*(-a*e + c)/(f*(c + d*x))))/(-c*g + d*f))
    rubi.add(rule83)

    pattern84 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/((x_*WC('d', S(1)) + WC('c', S(0)))*(x_*WC('g', S(1)) + WC('f', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda b, g, a, f: NonzeroQ(-a*g + b*f)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule84 = ReplacementRule(pattern84, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : n*n1*p*(-a*d + b*c)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**(p + S(-1))*Log((f + g*x)*(-a*d + b*c)/((c + d*x)*(-a*g + b*f)))/((a + b*x)*(c + d*x)), x)/(-c*g + d*f) - Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p*Log((f + g*x)*(-a*d + b*c)/((c + d*x)*(-a*g + b*f)))/(-c*g + d*f))
    rubi.add(rule84)

    pattern85 = Pattern(Integral(Log((x_*WC('b', S(1)) + WC('a', S(0)))*WC('e', S(1))/(x_*WC('d', S(1)) + WC('c', S(0))))/(f_ + x_**S(2)*WC('g', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda c, g, d, f: ZeroQ(c**S(2)*g + d**S(2)*f)), CustomConstraint(lambda c, b, a, d, e: ZeroQ(-a*d*e - b*c*e + S(2)*c*d)))
    rule85 = ReplacementRule(pattern85, lambda c, g, f, a, b, d, x, e : c*PolyLog(S(2), Simplify((c - d*x)*(-a*e + c)/(c*(c + d*x))))/(S(2)*d*f))
    rubi.add(rule85)

    pattern86 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_**S(2)*WC('h', S(1)) + x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, h, g, f, d: ZeroQ(c**S(2)*h - c*d*g + d**S(2)*f)))
    rule86 = ReplacementRule(pattern86, lambda c, h, e1, g, f, a, b, n2, d, x, n1, n, e, p : d**S(2)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((c + d*x)*(-c*h + d*g + d*h*x)), x))
    rubi.add(rule86)

    pattern87 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/(x_**S(2)*WC('h', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, h, d, f: ZeroQ(c**S(2)*h + d**S(2)*f)))
    rule87 = ReplacementRule(pattern87, lambda c, h, e1, f, a, b, n2, d, x, n1, n, e, p : -d**S(2)*Int(Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((c - d*x)*(c + d*x)), x)/h)
    rubi.add(rule87)

    pattern88 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))/((x_*WC('d', S(1)) + WC('c', S(0)))*(x_*WC('g', S(1)) + WC('f', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, g, d, f: NonzeroQ(-c*g + d*f)), CustomConstraint(lambda b, g, a, f: ZeroQ(-a*g + b*f)))
    rule88 = ReplacementRule(pattern88, lambda c, e1, g, f, a, b, n2, d, x, n1, n, e, p : b*Subst(Int(x**p, x), x, Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n))/(g*n*n1*(-a*d + b*c)))
    rubi.add(rule88)

    pattern89 = Pattern(Integral(Log(v_)*Log(u_**n_*WC('e', S(1)))**WC('p', S(1))/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(Add(S(1), Mul(S(-1), v)), S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule89 = ReplacementRule(pattern89, lambda c, v, u, a, b, d, x, n, e, p : n*p*Int(Log(e*u**n)**(p + S(-1))*PolyLog(S(2), Together(-v + S(1)))/((a + b*x)*(c + d*x)), x) - Log(e*u**n)**p*PolyLog(S(2), Together(-v + S(1)))/(-a*d + b*c))
    rubi.add(rule89)

    pattern90 = Pattern(Integral(Log(u_)**WC('p', S(1))*Log(v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(Add(S(1), Mul(S(-1), v)), S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule90 = ReplacementRule(pattern90, lambda c, v, u, a, b, d, x, p : p*Int(Log(u)**(p + S(-1))*PolyLog(S(2), Together(-v + S(1)))/((a + b*x)*(c + d*x)), x) - Log(u)**p*PolyLog(S(2), Together(-v + S(1)))/(-a*d + b*c))
    rubi.add(rule90)

    pattern91 = Pattern(Integral(Log(v_)*Log(u_**n_*WC('e', S(1)))**p_/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(Add(S(1), Mul(S(-1), v)), S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule91 = ReplacementRule(pattern91, lambda c, v, u, a, b, d, x, n, e, p : With(List(Set(f, Simplify((-v + S(1))/u))), f*Int(Log(e*u**n)**(p + S(1))/((c + d*x)*(-a*f - b*f + c + d)), x)/(n*(p + S(1))) + Log(v)*Log(e*u**n)**(p + S(1))/(n*(p + S(1))*(-a*d + b*c))))
    rubi.add(rule91)

    pattern92 = Pattern(Integral(Log(u_)**p_*Log(v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(Add(S(1), Mul(S(-1), v)), S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule92 = ReplacementRule(pattern92, lambda c, v, u, a, b, d, x, p : With(List(Set(f, Simplify((-v + S(1))/u))), f*Int(Log(u)**(p + S(1))/((c + d*x)*(-a*f - b*f + c + d)), x)/(p + S(1)) + Log(u)**(p + S(1))*Log(v)/((p + S(1))*(-a*d + b*c))))
    rubi.add(rule92)

    pattern93 = Pattern(Integral(Log(v_)*Log(u_**n_*WC('e', S(1)))**WC('p', S(1))/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Add(S(1), Mul(S(-1), v)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule93 = ReplacementRule(pattern93, lambda c, v, u, a, b, d, x, n, e, p : -n*p*Int(Log(e*u**n)**(p + S(-1))*PolyLog(S(2), Together(-v + S(1)))/((a + b*x)*(c + d*x)), x) + Log(e*u**n)**p*PolyLog(S(2), Together(-v + S(1)))/(-a*d + b*c))
    rubi.add(rule93)

    pattern94 = Pattern(Integral(Log(u_)**WC('p', S(1))*Log(v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Add(S(1), Mul(S(-1), v)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(0))))
    rule94 = ReplacementRule(pattern94, lambda c, v, u, a, b, d, x, p : -p*Int(Log(u)**(p + S(-1))*PolyLog(S(2), Together(-v + S(1)))/((a + b*x)*(c + d*x)), x) + Log(u)**p*PolyLog(S(2), Together(-v + S(1)))/(-a*d + b*c))
    rubi.add(rule94)

    pattern95 = Pattern(Integral(Log(v_)*Log(u_**n_*WC('e', S(1)))**p_/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Add(S(1), Mul(S(-1), v)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule95 = ReplacementRule(pattern95, lambda c, v, u, a, b, d, x, n, e, p : With(List(Set(f, Simplify(u*(-v + S(1))))), -f*Int(Log(e*u**n)**(p + S(1))/((a + b*x)*(a + b - c*f - d*f)), x)/(n*(p + S(1))) + Log(v)*Log(e*u**n)**(p + S(1))/(n*(p + S(1))*(-a*d + b*c))))
    rubi.add(rule95)

    pattern96 = Pattern(Integral(Log(u_)**p_*Log(v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Add(S(1), Mul(S(-1), v)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule96 = ReplacementRule(pattern96, lambda c, v, u, a, b, d, x, p : With(List(Set(f, Simplify(u*(-v + S(1))))), -f*Int(Log(u)**(p + S(1))/((a + b*x)*(a + b - c*f - d*f)), x)/(p + S(1)) + Log(u)**(p + S(1))*Log(v)/((p + S(1))*(-a*d + b*c))))
    rubi.add(rule96)

    pattern97 = Pattern(Integral(Log(u_**n_*WC('e', S(1)))**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(v, S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(1))))
    rule97 = ReplacementRule(pattern97, lambda c, v, u, a, b, q, d, x, n, e, p : -n*p*Int(Log(e*u**n)**(p + S(-1))*PolyLog(q + S(1), v)/((a + b*x)*(c + d*x)), x) + Log(e*u**n)**p*PolyLog(q + S(1), v)/(-a*d + b*c))
    rubi.add(rule97)

    pattern98 = Pattern(Integral(Log(u_)**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(v, S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(1))))
    rule98 = ReplacementRule(pattern98, lambda c, v, u, a, b, q, d, x, p : -p*Int(Log(u)**(p + S(-1))*PolyLog(q + S(1), v)/((a + b*x)*(c + d*x)), x) + Log(u)**p*PolyLog(q + S(1), v)/(-a*d + b*c))
    rubi.add(rule98)

    pattern99 = Pattern(Integral(Log(u_**n_*WC('e', S(1)))**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(v, S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule99 = ReplacementRule(pattern99, lambda c, v, u, a, b, q, d, x, n, e, p : -Int(Log(e*u**n)**(p + S(1))*PolyLog(q + S(-1), v)/((a + b*x)*(c + d*x)), x)/(n*(p + S(1))) + Log(e*u**n)**(p + S(1))*PolyLog(q, v)/(n*(p + S(1))*(-a*d + b*c)))
    rubi.add(rule99)

    pattern100 = Pattern(Integral(Log(u_)**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Pow(v, S(-1)))), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule100 = ReplacementRule(pattern100, lambda c, v, u, a, b, q, d, x, p : -Int(Log(u)**(p + S(1))*PolyLog(q + S(-1), v)/((a + b*x)*(c + d*x)), x)/(p + S(1)) + Log(u)**(p + S(1))*PolyLog(q, v)/((p + S(1))*(-a*d + b*c)))
    rubi.add(rule100)

    pattern101 = Pattern(Integral(Log(u_**n_*WC('e', S(1)))**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, v)), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(1))))
    rule101 = ReplacementRule(pattern101, lambda c, v, u, a, b, q, d, x, n, e, p : n*p*Int(Log(e*u**n)**(p + S(-1))*PolyLog(q + S(1), v)/((a + b*x)*(c + d*x)), x) - Log(e*u**n)**p*PolyLog(q + S(1), v)/(-a*d + b*c))
    rubi.add(rule101)

    pattern102 = Pattern(Integral(Log(u_)**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, v)), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Greater(p, S(1))))
    rule102 = ReplacementRule(pattern102, lambda c, v, u, a, b, q, d, x, p : p*Int(Log(u)**(p + S(-1))*PolyLog(q + S(1), v)/((a + b*x)*(c + d*x)), x) - Log(u)**p*PolyLog(q + S(1), v)/(-a*d + b*c))
    rubi.add(rule102)

    pattern103 = Pattern(Integral(Log(u_**n_*WC('e', S(1)))**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, v)), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule103 = ReplacementRule(pattern103, lambda c, v, u, a, b, q, d, x, n, e, p : Int(Log(e*u**n)**(p + S(1))*PolyLog(q + S(-1), v)/((a + b*x)*(c + d*x)), x)/(n*(p + S(1))) + Log(e*u**n)**(p + S(1))*PolyLog(q, v)/(n*(p + S(1))*(-a*d + b*c)))
    rubi.add(rule103)

    pattern104 = Pattern(Integral(Log(u_)**p_*PolyLog(q_, v_)/((x_*WC('b', S(1)) + WC('a', S(0)))*(x_*WC('d', S(1)) + WC('c', S(0)))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, v)), x)), CustomConstraint(lambda c, v, u, a, b, x, d: FreeQ(Simplify(Mul(u, Mul(Add(c, Mul(d, x)), Pow(Add(a, Mul(b, x)), S(-1))))), x)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda p: RationalQ(p)), CustomConstraint(lambda p: Less(p, S(-1))))
    rule104 = ReplacementRule(pattern104, lambda c, v, u, a, b, q, d, x, p : Int(Log(u)**(p + S(1))*PolyLog(q + S(-1), v)/((a + b*x)*(c + d*x)), x)/(p + S(1)) + Log(u)**(p + S(1))*PolyLog(q, v)/((p + S(1))*(-a*d + b*c)))
    rubi.add(rule104)

    pattern105 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))*WC('u', S(1))/(x_**S(2)*WC('h', S(1)) + x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, h, f, b, a, d: ZeroQ(-a*c*h + b*d*f)), CustomConstraint(lambda c, h, g, b, a, d: ZeroQ(-a*d*h - b*c*h + b*d*g)))
    rule105 = ReplacementRule(pattern105, lambda c, u, h, e1, g, f, a, b, n2, d, x, n1, n, e, p : b*d*Int(u*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((a + b*x)*(c + d*x)), x)/h)
    rubi.add(rule105)

    pattern106 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1))*WC('u', S(1))/(x_**S(2)*WC('h', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda b, d, c, a: NonzeroQ(-a*d + b*c)), CustomConstraint(lambda c, h, f, b, a, d: ZeroQ(-a*c*h + b*d*f)), CustomConstraint(lambda b, d, c, a: ZeroQ(a*d + b*c)))
    rule106 = ReplacementRule(pattern106, lambda c, u, h, e1, f, a, b, n2, d, x, n1, n, e, p : b*d*Int(u*Log(e*(e1*(a + b*x)**n1*(c + d*x)**(-n1))**n)**p/((a + b*x)*(c + d*x)), x)/h)
    rubi.add(rule106)

    pattern107 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))/(f_ + x_**S(2)*WC('h', S(1)) + x_*WC('g', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)))
    rule107 = ReplacementRule(pattern107, lambda c, h, e1, g, f, a, b, n2, d, x, n1, n, e : With(List(Set(u, IntHide(1/(f + g*x + h*x**S(2)), x))), -n*(-a*d + b*c)*Int(u/((a + b*x)*(c + d*x)), x) + u*Log(e*(e1*(a + b*x)**n1*(c + d*x)**n2)**n)))
    rubi.add(rule107)

    pattern108 = Pattern(Integral(Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))/(f_ + x_**S(2)*WC('h', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda h, x: FreeQ(h, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)))
    rule108 = ReplacementRule(pattern108, lambda c, h, e1, f, a, b, n2, d, x, n1, n, e : With(List(Set(u, IntHide(1/(f + h*x**S(2)), x))), -n*(-a*d + b*c)*Int(u/((a + b*x)*(c + d*x)), x) + u*Log(e*(e1*(a + b*x)**n1*(c + d*x)**n2)**n)))
    rubi.add(rule108)

    pattern109 = Pattern(Integral(RFx_*Log(((x_*WC('b', S(1)) + WC('a', S(0)))**WC('n1', S(1))*(x_*WC('d', S(1)) + WC('c', S(0)))**n2_*WC('e1', S(1)))**WC('n', S(1))*WC('e', S(1)))**WC('p', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda e1, x: FreeQ(e1, x)), CustomConstraint(lambda n1, x: FreeQ(n1, x)), CustomConstraint(lambda n2, n1: ZeroQ(n1 + n2)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda p: PositiveIntegerQ(p)))
    rule109 = ReplacementRule(pattern109, lambda c, RFx, e1, a, b, n2, d, x, n1, n, e, p : With(List(Set(u, ExpandIntegrand(Log(e*(e1*(a + b*x)**n1*(c + d*x)**n2)**n)**p, RFx, x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule109)

    pattern110 = Pattern(Integral(Log(v_)**WC('p', S(1))*WC('u', S(1)), x_), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda x, v: QuotientOfLinearsQ(v, x)), CustomConstraint(lambda x, v: ~(QuotientOfLinearsMatchQ(v, x))))
    rule110 = ReplacementRule(pattern110, lambda u, x, p, v : With(List(Set(lst, QuotientOfLinearsParts(v, x))), Condition(Int(u*Log((x*Part(lst, S(2)) + Part(lst, S(1)))/(x*Part(lst, S(4)) + Part(lst, S(3))))**p, x), ~(OneQ(p) & ZeroQ(Part(lst, S(3)))))))
    rubi.add(rule110)

    pattern111 = Pattern(Integral(Log((x_**n_*WC('b', S(1)) + WC('a', S(0)))**WC('p', S(1))*WC('c', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)))
    rule111 = ReplacementRule(pattern111, lambda c, a, b, x, n, p : -b*n*p*Int(x**n/(a + b*x**n), x) + x*Log(c*(a + b*x**n)**p))
    rubi.add(rule111)

    pattern112 = Pattern(Integral(Log(v_**WC('p', S(1))*WC('c', S(1))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda x, v: BinomialQ(v, x)), CustomConstraint(lambda x, v: ~(BinomialMatchQ(v, x))))
    rule112 = ReplacementRule(pattern112, lambda x, c, p, v : Int(Log(c*ExpandToSum(v, x)**p), x))
    rubi.add(rule112)

    pattern113 = Pattern(Integral((Log((x_**n_*WC('e', S(1)) + WC('d', S(0)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(x_*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)))
    rule113 = ReplacementRule(pattern113, lambda c, g, f, a, b, d, x, n, e, p : -b*e*n*p*Int(x**(n + S(-1))*Log(f + g*x)/(d + e*x**n), x)/g + (a + b*Log(c*(d + e*x**n)**p))*Log(f + g*x)/g)
    rubi.add(rule113)

    pattern114 = Pattern(Integral((x_*WC('g', S(1)) + WC('f', S(0)))**WC('m', S(1))*(Log((x_**n_*WC('e', S(1)) + WC('d', S(0)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule114 = ReplacementRule(pattern114, lambda c, g, m, f, a, b, d, x, n, e, p : -b*e*n*p*Int(x**(n + S(-1))*(f + g*x)**(m + S(1))/(d + e*x**n), x)/(g*(m + S(1))) + (a + b*Log(c*(d + e*x**n)**p))*(f + g*x)**(m + S(1))/(g*(m + S(1))))
    rubi.add(rule114)

    pattern115 = Pattern(Integral(u_**WC('m', S(1))*(Log(v_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda u, x: LinearQ(u, x)), CustomConstraint(lambda x, v: BinomialQ(v, x)), CustomConstraint(lambda u, x, v: ~(BinomialMatchQ(v, x) & LinearMatchQ(u, x))))
    rule115 = ReplacementRule(pattern115, lambda c, v, u, m, a, b, x, p : Int((a + b*Log(c*ExpandToSum(v, x)**p))*ExpandToSum(u, x)**m, x))
    rubi.add(rule115)

    pattern116 = Pattern(Integral((Log((x_**n_*WC('e', S(1)) + WC('d', S(0)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))*ArcSin(x_*WC('g', S(1)) + WC('f', S(0)))**WC('m', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda m: PositiveIntegerQ(m)))
    rule116 = ReplacementRule(pattern116, lambda c, m, g, f, a, b, d, x, n, e, p : With(List(Set(w, IntHide(ArcSin(f + g*x)**m, x))), -b*e*n*p*Int(SimplifyIntegrand(w*x**(n + S(-1))/(d + e*x**n), x), x) + Dist(a + b*Log(c*(d + e*x**n)**p), w, x)))
    rubi.add(rule116)

    pattern117 = Pattern(Integral((Log((x_**S(2)*WC('e', S(1)) + WC('d', S(0)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))/(x_**S(2)*WC('g', S(1)) + WC('f', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda p, x: FreeQ(p, x)))
    rule117 = ReplacementRule(pattern117, lambda c, g, f, a, b, d, x, e, p : With(List(Set(u, IntHide(1/(f + g*x**S(2)), x))), -S(2)*b*e*p*Int(u*x/(d + e*x**S(2)), x) + u*(a + b*Log(c*(d + e*x**S(2))**p))))
    rubi.add(rule117)

    pattern118 = Pattern(Integral((Log((d_ + x_**S(2)*WC('e', S(1)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule118 = ReplacementRule(pattern118, lambda c, a, b, d, x, n, e, p : -S(2)*b*e*n*p*Int(x**S(2)*(a + b*Log(c*(d + e*x**S(2))**p))**(n + S(-1))/(d + e*x**S(2)), x) + x*(a + b*Log(c*(d + e*x**S(2))**p))**n)
    rubi.add(rule118)

    pattern119 = Pattern(Integral(x_**WC('m', S(1))*(Log((d_ + x_**S(2)*WC('e', S(1)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)), CustomConstraint(lambda m: IntegerQ(m/S(2) + S(-1)/2)))
    rule119 = ReplacementRule(pattern119, lambda c, m, a, b, d, x, n, e, p : Subst(Int(x**(m/S(2) + S(-1)/2)*(a + b*Log(c*(d + e*x)**p))**n, x), x, x**S(2))/S(2))
    rubi.add(rule119)

    pattern120 = Pattern(Integral(x_**WC('m', S(1))*(Log((d_ + x_**S(2)*WC('e', S(1)))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)), CustomConstraint(lambda m: ~(IntegerQ(m/S(2) + S(-1)/2))))
    rule120 = ReplacementRule(pattern120, lambda c, m, a, b, d, x, n, e, p : -S(2)*b*e*n*p*Int(x**(m + S(2))*(a + b*Log(c*(d + e*x**S(2))**p))**(n + S(-1))/(d + e*x**S(2)), x)/(m + S(1)) + x**(m + S(1))*(a + b*Log(c*(d + e*x**S(2))**p))**n/(m + S(1)))
    rubi.add(rule120)

    pattern121 = Pattern(Integral(u_*Log(v_), x_))
    rule121 = ReplacementRule(pattern121, lambda u, x, v : With(List(Set(w, DerivativeDivides(v, u*(-v + S(1)), x))), Condition(w*PolyLog(S(2), Together(-v + S(1))), ~(FalseQ(w)))))
    rubi.add(rule121)

    pattern122 = Pattern(Integral(w_*(Log(u_)*WC('b', S(1)) + WC('a', S(0)))*Log(v_), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)))
    rule122 = ReplacementRule(pattern122, lambda v, u, a, b, x, w : With(List(Set(z, DerivativeDivides(v, w*(-v + S(1)), x))), Condition(-b*Int(SimplifyIntegrand(z*D(u, x)*PolyLog(S(2), Together(-v + S(1)))/u, x), x) + z*(a + b*Log(u))*PolyLog(S(2), Together(-v + S(1))), ~(FalseQ(z)))))
    rubi.add(rule122)

    pattern123 = Pattern(Integral(Log((a_ + (x_*WC('e', S(1)) + WC('d', S(0)))**n_*WC('b', S(1)))**WC('p', S(1))*WC('c', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: RationalQ(n)), CustomConstraint(lambda n: Less(n, S(0))))
    rule123 = ReplacementRule(pattern123, lambda c, b, a, d, x, n, e, p : -b*n*p*Int(1/(a*(d + e*x)**(-n) + b), x) + (d + e*x)*Log(c*(a + b*(d + e*x)**n)**p)/e)
    rubi.add(rule123)

    pattern124 = Pattern(Integral(Log((a_ + (x_*WC('e', S(1)) + WC('d', S(0)))**WC('n', S(1))*WC('b', S(1)))**WC('p', S(1))*WC('c', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: ~(RationalQ(n) & Less(n, S(0)))))
    rule124 = ReplacementRule(pattern124, lambda c, b, a, d, x, n, e, p : a*n*p*Int(1/(a + b*(d + e*x)**n), x) - n*p*x + (d + e*x)*Log(c*(a + b*(d + e*x)**n)**p)/e)
    rubi.add(rule124)

    pattern125 = Pattern(Integral((Log((d_ + WC('e', S(1))/(x_*WC('g', S(1)) + WC('f', S(0))))**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule125 = ReplacementRule(pattern125, lambda c, g, f, a, b, d, x, n, e, p : -b*e*n*p*Subst(Int((a + b*Log(c*(d + e*x)**p))**(n + S(-1))/x, x), x, 1/(f + g*x))/(d*g) + (a + b*Log(c*(d + e/(f + g*x))**p))**n*(d*(f + g*x) + e)/(d*g))
    rubi.add(rule125)

    pattern126 = Pattern(Integral((Log(RFx_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule126 = ReplacementRule(pattern126, lambda c, RFx, a, b, x, n, p : -b*n*p*Int(SimplifyIntegrand(x*(a + b*Log(RFx**p*c))**(n + S(-1))*D(RFx, x)/RFx, x), x) + x*(a + b*Log(RFx**p*c))**n)
    rubi.add(rule126)

    pattern127 = Pattern(Integral((Log(RFx_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1))/(x_*WC('e', S(1)) + WC('d', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule127 = ReplacementRule(pattern127, lambda c, RFx, a, b, d, x, n, e, p : -b*n*p*Int((a + b*Log(RFx**p*c))**(n + S(-1))*D(RFx, x)*Log(d + e*x)/RFx, x)/e + (a + b*Log(RFx**p*c))**n*Log(d + e*x)/e)
    rubi.add(rule127)

    pattern128 = Pattern(Integral((x_*WC('e', S(1)) + WC('d', S(0)))**WC('m', S(1))*(Log(RFx_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)), CustomConstraint(lambda n, m: IntegerQ(m) | Equal(n, S(1))), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule128 = ReplacementRule(pattern128, lambda c, RFx, m, a, b, d, x, n, e, p : -b*n*p*Int(SimplifyIntegrand((a + b*Log(RFx**p*c))**(n + S(-1))*(d + e*x)**(m + S(1))*D(RFx, x)/RFx, x), x)/(e*(m + S(1))) + (a + b*Log(RFx**p*c))**n*(d + e*x)**(m + S(1))/(e*(m + S(1))))
    rubi.add(rule128)

    pattern129 = Pattern(Integral(Log(RFx_**WC('n', S(1))*WC('c', S(1)))/(d_ + x_**S(2)*WC('e', S(1))), x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda RFx, x: ~(PolynomialQ(RFx, x))))
    rule129 = ReplacementRule(pattern129, lambda c, RFx, d, x, n, e : With(List(Set(u, IntHide(1/(d + e*x**S(2)), x))), -n*Int(SimplifyIntegrand(u*D(RFx, x)/RFx, x), x) + u*Log(RFx**n*c)))
    rubi.add(rule129)

    pattern130 = Pattern(Integral(Log(Px_**WC('n', S(1))*WC('c', S(1)))/Qx_, x_), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda Px, x, Qx: QuadraticQ(List(Qx, Px), x)), CustomConstraint(lambda Px, x, Qx: ZeroQ(D(Px/Qx, x))))
    rule130 = ReplacementRule(pattern130, lambda c, Qx, Px, x, n : With(List(Set(u, IntHide(1/Qx, x))), -n*Int(SimplifyIntegrand(u*D(Px, x)/Px, x), x) + u*Log(Px**n*c)))
    rubi.add(rule130)

    pattern131 = Pattern(Integral(RGx_*(Log(RFx_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda RGx, x: RationalFunctionQ(RGx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule131 = ReplacementRule(pattern131, lambda c, RGx, RFx, a, b, x, n, p : With(List(Set(u, ExpandIntegrand((a + b*Log(RFx**p*c))**n, RGx, x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule131)

    pattern132 = Pattern(Integral(RGx_*(Log(RFx_**WC('p', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**WC('n', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)), CustomConstraint(lambda RGx, x: RationalFunctionQ(RGx, x)), CustomConstraint(lambda n: PositiveIntegerQ(n)))
    rule132 = ReplacementRule(pattern132, lambda c, RGx, RFx, a, b, x, n, p : With(List(Set(u, ExpandIntegrand(RGx*(a + b*Log(RFx**p*c))**n, x))), Condition(Int(u, x), SumQ(u))))
    rubi.add(rule132)

    pattern133 = Pattern(Integral(RFx_*(Log(u_)*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda RFx, x: RationalFunctionQ(RFx, x)))
    rule133 = ReplacementRule(pattern133, lambda u, RFx, a, b, x : With(List(Set(lst, SubstForFractionalPowerOfLinear(RFx*(a + b*Log(u)), x))), Condition(Part(lst, S(2))*Part(lst, S(4))*Subst(Int(Part(lst, S(1)), x), x, Part(lst, S(3))**(1/Part(lst, S(2)))), ~(FalseQ(lst)))))
    rubi.add(rule133)

    pattern134 = Pattern(Integral((x_*WC('g', S(1)) + WC('f', S(0)))**WC('m', S(1))*Log((F_**((x_*WC('b', S(1)) + WC('a', S(0)))*WC('c', S(1))))**WC('n', S(1))*WC('e', S(1)) + S(1)), x_), CustomConstraint(lambda F, x: FreeQ(F, x)), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda m: RationalQ(m)), CustomConstraint(lambda m: Greater(m, S(0))))
    rule134 = ReplacementRule(pattern134, lambda F, c, g, m, f, a, b, x, n, e : g*m*Int((f + g*x)**(m + S(-1))*PolyLog(S(2), -e*(F**(c*(a + b*x)))**n), x)/(b*c*n*Log(F)) - (f + g*x)**m*PolyLog(S(2), -e*(F**(c*(a + b*x)))**n)/(b*c*n*Log(F)))
    rubi.add(rule134)

    pattern135 = Pattern(Integral((x_*WC('g', S(1)) + WC('f', S(0)))**WC('m', S(1))*Log(d_ + (F_**((x_*WC('b', S(1)) + WC('a', S(0)))*WC('c', S(1))))**WC('n', S(1))*WC('e', S(1))), x_), CustomConstraint(lambda F, x: FreeQ(F, x)), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda m: RationalQ(m)), CustomConstraint(lambda m: Greater(m, S(0))), CustomConstraint(lambda d: NonzeroQ(d + S(-1))))
    rule135 = ReplacementRule(pattern135, lambda F, c, g, m, f, a, b, d, x, n, e : Int((f + g*x)**m*Log(S(1) + e*(F**(c*(a + b*x)))**n/d), x) - (f + g*x)**(m + S(1))*Log(S(1) + e*(F**(c*(a + b*x)))**n/d)/(g*(m + S(1))) + (f + g*x)**(m + S(1))*Log(d + e*(F**(c*(a + b*x)))**n)/(g*(m + S(1))))
    rubi.add(rule135)

    pattern136 = Pattern(Integral(Log(x_*WC('e', S(1)) + sqrt(x_**S(2)*WC('c', S(1)) + x_*WC('b', S(1)) + WC('a', S(0)))*WC('f', S(1)) + WC('d', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda e, c, f: ZeroQ(-c*f**S(2) + e**S(2))))
    rule136 = ReplacementRule(pattern136, lambda c, f, a, b, d, x, e : f**S(2)*(-S(2)*a*c + b**S(2)/S(2))*Int(x/(-f*(-S(2)*a*e + b*d + x*(-b*e + S(2)*c*d))*Sqrt(a + b*x + c*x**S(2)) + (-b*f**S(2) + S(2)*d*e)*(a + b*x + c*x**S(2))), x) + x*Log(d + e*x + f*Sqrt(a + b*x + c*x**S(2))))
    rubi.add(rule136)

    pattern137 = Pattern(Integral(Log(x_*WC('e', S(1)) + sqrt(x_**S(2)*WC('c', S(1)) + WC('a', S(0)))*WC('f', S(1)) + WC('d', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda e, c, f: ZeroQ(-c*f**S(2) + e**S(2))))
    rule137 = ReplacementRule(pattern137, lambda c, f, a, d, x, e : -a*c*f**S(2)*Int(x/(d*e*(a + c*x**S(2)) + f*(a*e - c*d*x)*Sqrt(a + c*x**S(2))), x) + x*Log(d + e*x + f*Sqrt(a + c*x**S(2))))
    rubi.add(rule137)

    pattern138 = Pattern(Integral((x_*WC('g', S(1)))**WC('m', S(1))*Log(x_*WC('e', S(1)) + sqrt(x_**S(2)*WC('c', S(1)) + x_*WC('b', S(1)) + WC('a', S(0)))*WC('f', S(1)) + WC('d', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda e, c, f: ZeroQ(-c*f**S(2) + e**S(2))), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda m: IntegerQ(S(2)*m)))
    rule138 = ReplacementRule(pattern138, lambda c, g, m, f, a, b, d, x, e : f**S(2)*(-S(4)*a*c + b**S(2))*Int((g*x)**(m + S(1))/(-f*(-S(2)*a*e + b*d + x*(-b*e + S(2)*c*d))*Sqrt(a + b*x + c*x**S(2)) + (-b*f**S(2) + S(2)*d*e)*(a + b*x + c*x**S(2))), x)/(S(2)*g*(m + S(1))) + (g*x)**(m + S(1))*Log(d + e*x + f*Sqrt(a + b*x + c*x**S(2)))/(g*(m + S(1))))
    rubi.add(rule138)

    pattern139 = Pattern(Integral((x_*WC('g', S(1)))**WC('m', S(1))*Log(x_*WC('e', S(1)) + sqrt(x_**S(2)*WC('c', S(1)) + WC('a', S(0)))*WC('f', S(1)) + WC('d', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda g, x: FreeQ(g, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda e, c, f: ZeroQ(-c*f**S(2) + e**S(2))), CustomConstraint(lambda m: NonzeroQ(m + S(1))), CustomConstraint(lambda m: IntegerQ(S(2)*m)))
    rule139 = ReplacementRule(pattern139, lambda c, g, m, f, a, d, x, e : -a*c*f**S(2)*Int((g*x)**(m + S(1))/(d*e*(a + c*x**S(2)) + f*(a*e - c*d*x)*Sqrt(a + c*x**S(2))), x)/(g*(m + S(1))) + (g*x)**(m + S(1))*Log(d + e*x + f*Sqrt(a + c*x**S(2)))/(g*(m + S(1))))
    rubi.add(rule139)

    pattern140 = Pattern(Integral(Log(u_), x_), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)))
    rule140 = ReplacementRule(pattern140, lambda u, x : x*Log(u) - Int(SimplifyIntegrand(x*D(u, x)/u, x), x))
    rubi.add(rule140)

    pattern141 = Pattern(Integral(Log(u_)/(x_*WC('b', S(1)) + WC('a', S(0))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda u, x: RationalFunctionQ(D(u, x)/u, x)), CustomConstraint(lambda a, u, x: NonzeroQ(a) | ~(BinomialQ(u, x) & ZeroQ(BinomialDegree(u, x)**S(2) + S(-1)))))
    rule141 = ReplacementRule(pattern141, lambda a, u, b, x : -Int(SimplifyIntegrand(D(u, x)*Log(a + b*x)/u, x), x)/b + Log(u)*Log(a + b*x)/b)
    rubi.add(rule141)

    pattern142 = Pattern(Integral((x_*WC('b', S(1)) + WC('a', S(0)))**WC('m', S(1))*Log(u_), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule142 = ReplacementRule(pattern142, lambda u, m, a, b, x : (a + b*x)**(m + S(1))*Log(u)/(b*(m + S(1))) - Int(SimplifyIntegrand((a + b*x)**(m + S(1))*D(u, x)/u, x), x)/(b*(m + S(1))))
    rubi.add(rule142)

    pattern143 = Pattern(Integral(Log(u_)/Qx_, x_), CustomConstraint(lambda x, Qx: QuadraticQ(Qx, x)), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)))
    rule143 = ReplacementRule(pattern143, lambda u, x, Qx : With(List(Set(v, IntHide(1/Qx, x))), v*Log(u) - Int(SimplifyIntegrand(v*D(u, x)/u, x), x)))
    rubi.add(rule143)

    pattern144 = Pattern(Integral(u_**(x_*WC('a', S(1)))*Log(u_), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)))
    rule144 = ReplacementRule(pattern144, lambda a, u, x : -Int(SimplifyIntegrand(u**(a*x + S(-1))*x*D(u, x), x), x) + u**(a*x)/a)
    rubi.add(rule144)

    pattern145 = Pattern(Integral(v_*Log(u_), x_), CustomConstraint(lambda u, x: InverseFunctionFreeQ(u, x)))
    rule145 = ReplacementRule(pattern145, lambda u, x, v : With(List(Set(w, IntHide(v, x))), Condition(Dist(Log(u), w, x) - Int(SimplifyIntegrand(w*D(u, x)/u, x), x), InverseFunctionFreeQ(w, x))))
    rubi.add(rule145)

    pattern146 = Pattern(Integral(Log(v_)*Log(w_), x_), CustomConstraint(lambda x, v: InverseFunctionFreeQ(v, x)), CustomConstraint(lambda x, w: InverseFunctionFreeQ(w, x)))
    rule146 = ReplacementRule(pattern146, lambda x, w, v : x*Log(v)*Log(w) - Int(SimplifyIntegrand(x*D(v, x)*Log(w)/v, x), x) - Int(SimplifyIntegrand(x*D(w, x)*Log(v)/w, x), x))
    rubi.add(rule146)

    pattern147 = Pattern(Integral(u_*Log(v_)*Log(w_), x_), CustomConstraint(lambda x, v: InverseFunctionFreeQ(v, x)), CustomConstraint(lambda x, w: InverseFunctionFreeQ(w, x)))
    rule147 = ReplacementRule(pattern147, lambda u, x, w, v : With(List(Set(z, IntHide(u, x))), Condition(Dist(Log(v)*Log(w), z, x) - Int(SimplifyIntegrand(z*D(v, x)*Log(w)/v, x), x) - Int(SimplifyIntegrand(z*D(w, x)*Log(v)/w, x), x), InverseFunctionFreeQ(z, x))))
    rubi.add(rule147)

    pattern148 = Pattern(Integral(Log(Log(x_**WC('n', S(1))*WC('b', S(1)))**WC('p', S(1))*WC('a', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)))
    rule148 = ReplacementRule(pattern148, lambda b, a, x, n, p : -n*p*Int(1/Log(b*x**n), x) + x*Log(a*Log(b*x**n)**p))
    rubi.add(rule148)

    pattern149 = Pattern(Integral(Log(Log(x_**WC('n', S(1))*WC('b', S(1)))**WC('p', S(1))*WC('a', S(1)))/x_, x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)))
    rule149 = ReplacementRule(pattern149, lambda b, a, x, n, p : (-p + Log(a*Log(b*x**n)**p))*Log(b*x**n)/n)
    rubi.add(rule149)

    pattern150 = Pattern(Integral(x_**WC('m', S(1))*Log(Log(x_**WC('n', S(1))*WC('b', S(1)))**WC('p', S(1))*WC('a', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda m, x: FreeQ(m, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda m: NonzeroQ(m + S(1))))
    rule150 = ReplacementRule(pattern150, lambda m, b, a, x, n, p : -n*p*Int(x**m/Log(b*x**n), x)/(m + S(1)) + x**(m + S(1))*Log(a*Log(b*x**n)**p)/(m + S(1)))
    rubi.add(rule150)

    pattern151 = Pattern(Integral((Log(x_*WC('d', S(1)) + WC('c', S(0)))*WC('B', S(1)) + WC('A', S(0)))/sqrt(a_ + Log(x_*WC('d', S(1)) + WC('c', S(0)))*WC('b', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda A, x: FreeQ(A, x)), CustomConstraint(lambda B, x: FreeQ(B, x)), CustomConstraint(lambda b, A, B, a: NonzeroQ(A*b - B*a)))
    rule151 = ReplacementRule(pattern151, lambda c, B, A, b, a, d, x : B*Int(Sqrt(a + b*Log(c + d*x)), x)/b + (A*b - B*a)*Int(1/Sqrt(a + b*Log(c + d*x)), x)/b)
    rubi.add(rule151)

    pattern152 = Pattern(Integral(f_**(Log(u_)*WC('a', S(1))), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda f, x: FreeQ(f, x)))
    rule152 = ReplacementRule(pattern152, lambda a, u, x, f : Int(u**(a*Log(f)), x))
    rubi.add(rule152)

    pattern153 = Pattern(Integral(u_, x_), CustomConstraint(lambda u: NonsumQ(u)))
    rule153 = ReplacementRule(pattern153, lambda u, x : With(List(Set(lst, FunctionOfLog(Cancel(u*x), x))), Condition(Subst(Int(Part(lst, S(1)), x), x, Log(Part(lst, S(2))))/Part(lst, S(3)), ~(FalseQ(lst)))))
    rubi.add(rule153)

    pattern154 = Pattern(Integral(Log(Gamma(v_))*WC('u', S(1)), x_))
    rule154 = ReplacementRule(pattern154, lambda u, x, v : (Log(Gamma(v)) - LogGamma(v))*Int(u, x) + Int(u*LogGamma(v), x))
    rubi.add(rule154)

    pattern155 = Pattern(Integral((w_*Log(v_)**WC('n', S(1))*WC('b', S(1)) + w_*WC('a', S(1)))**WC('p', S(1))*WC('u', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p: IntegerQ(p)))
    rule155 = ReplacementRule(pattern155, lambda v, u, b, a, x, n, p, w : Int(u*w**p*(a + b*Log(v)**n)**p, x))
    rubi.add(rule155)

    pattern156 = Pattern(Integral((Log(((x_*WC('f', S(1)) + WC('e', S(0)))**WC('p', S(1))*WC('d', S(1)))**WC('q', S(1))*WC('c', S(1)))*WC('b', S(1)) + WC('a', S(0)))**n_*WC('u', S(1)), x_), CustomConstraint(lambda a, x: FreeQ(a, x)), CustomConstraint(lambda b, x: FreeQ(b, x)), CustomConstraint(lambda c, x: FreeQ(c, x)), CustomConstraint(lambda d, x: FreeQ(d, x)), CustomConstraint(lambda e, x: FreeQ(e, x)), CustomConstraint(lambda f, x: FreeQ(f, x)), CustomConstraint(lambda n, x: FreeQ(n, x)), CustomConstraint(lambda p, x: FreeQ(p, x)), CustomConstraint(lambda q, x: FreeQ(q, x)), CustomConstraint(lambda u, x: AlgebraicFunctionQ(u, x)))
    rule156 = ReplacementRule(pattern156, lambda c, u, f, a, b, q, d, x, n, e, p : Int(u*(a + b*Log(c*(d*(e + f*x)**p)**q))**n, x))
    rubi.add(rule156)

    return rubi
