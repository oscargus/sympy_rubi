from sympy.external import import_module
matchpy = import_module("matchpy")

if matchpy:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = matchpy.Wildcard, matchpy.Pattern, matchpy.ReplacementRule, matchpy.ManyToOneReplacer
else:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = object, object, object, object
    class Wildcard(object):
        def __init__(self):
            pass
        @staticmethod
        def dot(x):
            pass
        @staticmethod
        def symbol(x):
            pass
    class Pattern(object):
        def __init__(self, a, b):
            pass

from sympy.integrals.rubi.operation import (Int, Mul, Add, Pow, And, Or, ZeroQ, NonzeroQ, List, Log, RemoveContent, PositiveIntegerQ, NegativeIntegerQ, PositiveQ, IntegerQ, IntegersQ, PosQ, NegQ, FracPart, IntPart, RationalQ, Subst, LinearQ, Sqrt, NegativeQ, ArcCosh, Rational, Less, Not, Simplify, Denominator, Coefficient, SumSimplerQ, Equal, Unequal, SimplerQ, LessEqual, IntLinearcQ, Greater, GreaterEqual, FractionQ, ExpandIntegrand, With, Set, Hypergeometric2F1, TogetherSimplify, Inequality)
from sympy.integrals.rubi.symbol import VariableSymbol, Integer
from sympy.integrals.rubi.constraint import cons, FreeQ
from sympy.utilities.decorator import doctest_depends_on

a, b, c, d, e, f, g, h, i, r, x, u, p, q = map(VariableSymbol, 'abcdefghirxupq')
n, m = map(VariableSymbol, 'nm')
zoo = VariableSymbol('zoo')

a_, b_, c_, d_, e_, f_, g_, h_, p_ = map(Wildcard.dot, 'abcdefghp')
n_, m_ = map(Wildcard.dot, 'nm')
x_, u_ = map(Wildcard.symbol, 'xu')


def rubi_object():
    rubi = ManyToOneReplacer()
    pattern1 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', Integer(1)), Wildcard.dot('x')), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Pow(Wildcard.dot('x'), Wildcard.dot('n')))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(Wildcard.dot('p'))), Or(NegativeIntegerQ(Wildcard.dot('p')), PositiveQ(Wildcard.dot('a')))), (n, p, b, m, a, x, c)))
    rule1 = ReplacementRule(pattern1, lambda n, p, b, m, a, x, c : Mul(Pow(a, p), Pow(c, Integer(-1)), Pow(Mul(c, x), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Hypergeometric2F1(Mul(Integer(-1), p), Mul(Pow(n, Integer(-1)), Add(m, Integer(1))), Add(Integer(1), Mul(Pow(n, Integer(-1)), Add(m, Integer(1)))), Mul(Integer(-1), Pow(a, Integer(-1)), b, Pow(x, n)))))
    rubi.add(rule1)

    pattern2 = Pattern(Int(a, x_), FreeQ(a, x), cons(True, (x,)))
    rule2 = ReplacementRule(pattern2, lambda x : Mul(a, x))
    rubi.add(rule2)

    pattern3 = Pattern(Int(Pow(x_, Integer(-1)), x_), cons(True, (x,)))
    rule3 = ReplacementRule(pattern3, lambda x : Log(x))
    rubi.add(rule3)

    pattern4 = Pattern(Int(Pow(Wildcard.dot('x'), Wildcard.optional('m', Integer(1))), Wildcard.dot('x')), FreeQ(m, x), cons(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), (x, m)))
    rule4 = ReplacementRule(pattern4, lambda x, m : Mul(Pow(x, Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1))))
    rubi.add(rule4)

    pattern5 = Pattern(Int(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule5 = ReplacementRule(pattern5, lambda b, x, a : Mul(Pow(b, Integer(-1)), Log(RemoveContent(Add(a, Mul(b, x)), x))))
    rubi.add(rule5)

    pattern6 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), (b, m, x, a)))
    rule6 = ReplacementRule(pattern6, lambda b, m, x, a : Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1))))
    rubi.add(rule6)

    pattern7 = Pattern(Int(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('u'))), Wildcard.dot('m')), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(And(LinearQ(Wildcard.dot('u'), Wildcard.dot('x')), NonzeroQ(Add(Wildcard.dot('u'), Mul(Integer(-1), Wildcard.dot('x'))))), (b, m, u, a, x)))
    rule7 = ReplacementRule(pattern7, lambda b, m, u, a, x : Mul(Pow(Coefficient(u, x, Integer(1)), Integer(-1)), Subst(Int(Pow(Add(a, Mul(b, x)), m), x), x, u)))
    rubi.add(rule7)

    pattern8 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), (b, a, x, d, c)))
    rule8 = ReplacementRule(pattern8, lambda b, a, x, d, c : Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), Integer(-1)), x))
    rubi.add(rule8)

    pattern9 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), (b, a, x, d, c)))
    rule9 = ReplacementRule(pattern9, lambda b, a, x, d, c : Add(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Pow(Add(a, Mul(b, x)), Integer(-1)), x)), Mul(Integer(-1), d, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Pow(Add(c, Mul(d, x)), Integer(-1)), x))))
    rubi.add(rule9)

    pattern10 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule10 = ReplacementRule(pattern10, lambda n, b, m, a, x, d, c : Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))))
    rubi.add(rule10)

    pattern11 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveIntegerQ(Add(Wildcard.dot('m'), Integer(1/2))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, m, a, x, d, c)))
    rule11 = ReplacementRule(pattern11, lambda b, m, a, x, d, c : Add(Mul(Integer(2), a, c, m, Pow(Add(Mul(Integer(2), m), Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(m, Integer(-1)))), x)), Mul(x, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), m), Pow(Add(Mul(Integer(2), m), Integer(1)), Integer(-1)))))
    rubi.add(rule11)

    pattern12 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-3/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-3/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), (b, a, x, d, c)))
    rule12 = ReplacementRule(pattern12, lambda b, a, x, d, c : Mul(Pow(a, Integer(-1)), Pow(c, Integer(-1)), x, Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))
    rubi.add(rule12)

    pattern13 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegativeIntegerQ(Add(Wildcard.dot('m'), Integer(3/2))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, m, a, x, d, c)))
    rule13 = ReplacementRule(pattern13, lambda b, m, a, x, d, c : Add(Mul(Integer(-1), Integer(1/2), Pow(a, Integer(-1)), Pow(c, Integer(-1)), x, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1))), Mul(Integer(1/2), Pow(a, Integer(-1)), Pow(c, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Add(Mul(Integer(2), m), Integer(3)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(m, Integer(1)))), x))))
    rubi.add(rule13)

    pattern14 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Or(IntegerQ(Wildcard.dot('m')), And(PositiveQ(Wildcard.dot('a')), PositiveQ(Wildcard.dot('c'))))), (b, m, a, x, d, c)))
    rule14 = ReplacementRule(pattern14, lambda b, m, a, x, d, c : Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), x))
    rubi.add(rule14)

    pattern15 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveQ(Wildcard.dot('a')), ZeroQ(Add(Wildcard.dot('a'), Wildcard.dot('c'))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule15 = ReplacementRule(pattern15, lambda b, a, x, d, c : Mul(Pow(b, Integer(-1)), ArcCosh(Mul(Pow(a, Integer(-1)), b, x))))
    rubi.add(rule15)

    pattern16 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), (b, a, x, d, c)))
    rule16 = ReplacementRule(pattern16, lambda b, a, x, d, c : Mul(Integer(2), Subst(Int(Pow(Add(b, Mul(Integer(-1), d, Pow(x, Integer(2)))), Integer(-1)), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))))
    rubi.add(rule16)

    pattern17 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(Not(IntegerQ(Mul(Integer(2), Wildcard.dot('m')))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, m, a, x, d, c)))
    rule17 = ReplacementRule(pattern17, lambda b, m, a, x, d, c : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), Mul(Integer(-1), FracPart(m))), Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m), x)))
    rubi.add(rule17)

    pattern18 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-5/4)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), PosQ(Mul(Pow(Wildcard.dot('a'), Integer(-1)), Wildcard.dot('b'), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d')))), (b, a, x, d, c)))
    rule18 = ReplacementRule(pattern18, lambda b, a, x, d, c : Add(Mul(Integer(1/2), Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-5/4)), Pow(Add(c, Mul(d, x)), Integer(-5/4))), x)), Mul(Integer(-1), Integer(2), Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Integer(-1/4)), Pow(Add(c, Mul(d, x)), Integer(-1/4)))))
    rubi.add(rule18)

    pattern19 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-9/4)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), PosQ(Mul(Pow(Wildcard.dot('a'), Integer(-1)), Wildcard.dot('b'), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d')))), (b, a, x, d, c)))
    rule19 = ReplacementRule(pattern19, lambda b, a, x, d, c : Add(Mul(Integer(-1), Integer(1/5), Pow(b, Integer(-1)), d, Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-5/4)), Pow(Add(c, Mul(d, x)), Integer(-5/4))), x)), Mul(Integer(-1), Integer(4/5), Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Integer(-5/4)), Pow(Add(c, Mul(d, x)), Integer(-1/4)))))
    rubi.add(rule19)

    pattern20 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(Add(Wildcard.dot('m'), Integer(1/2))), IntegerQ(Add(Wildcard.dot('n'), Integer(1/2))), Less(Integer(0), Wildcard.dot('m'), Wildcard.dot('n')), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule20 = ReplacementRule(pattern20, lambda n, b, m, a, x, d, c : Add(Mul(Integer(2), c, n, Pow(Add(m, n, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x)), Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(m, n, Integer(1)), Integer(-1)))))
    rubi.add(rule20)

    pattern21 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(IntegerQ(Add(Wildcard.dot('m'), Integer(1/2))), IntegerQ(Add(Wildcard.dot('n'), Integer(1/2))), Less(Wildcard.dot('m'), Wildcard.dot('n'), Integer(0)), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule21 = ReplacementRule(pattern21, lambda n, b, m, a, x, d, c : Add(Mul(Integer(1/2), Pow(a, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Add(m, n, Integer(2)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(Integer(-1), Integer(1/2), Pow(a, Integer(-1)), Pow(d, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)))))
    rubi.add(rule21)

    pattern22 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Wildcard.dot('m')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Or(Not(IntegerQ(Wildcard.dot('n'))), Greater(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2)), Integer(0)), Less(Add(Mul(Integer(9), Wildcard.dot('m')), Mul(Integer(5), Wildcard.dot('n')), Integer(5)), Integer(0)), And(ZeroQ(Wildcard.dot('c')), LessEqual(Add(Mul(Integer(7), Wildcard.dot('m')), Mul(Integer(4), Wildcard.dot('n'))), Integer(0))))), (n, b, m, a, x, d, c)))
    rule22 = ReplacementRule(pattern22, lambda n, b, m, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule22)

    pattern23 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(IntegerQ(Wildcard.dot('n')), NegativeIntegerQ(Wildcard.dot('m')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Not(And(PositiveIntegerQ(Wildcard.dot('n')), Less(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2)), Integer(0))))), (n, b, m, a, x, d, c)))
    rule23 = ReplacementRule(pattern23, lambda n, b, m, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule23)

    pattern24 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('n')), Greater(Wildcard.dot('n'), Integer(0)), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, a, x, d, c)))
    rule24 = ReplacementRule(pattern24, lambda n, b, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x)), Mul(Pow(b, Integer(-1)), Pow(n, Integer(-1)), Pow(Add(c, Mul(d, x)), n))))
    rubi.add(rule24)

    pattern25 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('n')), Less(Wildcard.dot('n'), Integer(-1)), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, a, x, d, c)))
    rule25 = ReplacementRule(pattern25, lambda n, b, a, x, d, c : Add(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), x)), Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))))
    rubi.add(rule25)

    pattern26 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(PosQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule26 = ReplacementRule(pattern26, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c))), Integer(3)))), Add(Mul(Integer(3/2), Pow(b, Integer(-1)), Subst(Int(Pow(Add(Pow(q, Integer(2)), Mul(q, x), Pow(x, Integer(2))), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))), Mul(Integer(-1), Integer(1/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Log(RemoveContent(Add(a, Mul(b, x)), x))), Mul(Integer(-1), Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Subst(Int(Pow(Add(q, Mul(Integer(-1), x)), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))))))
    rubi.add(rule26)

    pattern27 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(NegQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule27 = ReplacementRule(pattern27, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(b, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(3)))), Add(Mul(Integer(3/2), Pow(b, Integer(-1)), Subst(Int(Pow(Add(Pow(q, Integer(2)), Mul(Integer(-1), q, x), Pow(x, Integer(2))), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))), Mul(Integer(1/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Log(RemoveContent(Add(a, Mul(b, x)), x))), Mul(Integer(-1), Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Subst(Int(Pow(Add(q, x), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))))))
    rubi.add(rule27)

    pattern28 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-2/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(PosQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule28 = ReplacementRule(pattern28, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c))), Integer(3)))), Add(Mul(Integer(-1), Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Subst(Int(Pow(Add(Pow(q, Integer(2)), Mul(q, x), Pow(x, Integer(2))), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))), Mul(Integer(-1), Integer(1/2), Pow(b, Integer(-1)), Pow(q, Integer(-2)), Log(RemoveContent(Add(a, Mul(b, x)), x))), Mul(Integer(-1), Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-2)), Subst(Int(Pow(Add(q, Mul(Integer(-1), x)), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))))))
    rubi.add(rule28)

    pattern29 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-2/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(NegQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule29 = ReplacementRule(pattern29, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(b, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(3)))), Add(Mul(Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-1)), Subst(Int(Pow(Add(Pow(q, Integer(2)), Mul(Integer(-1), q, x), Pow(x, Integer(2))), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))), Mul(Integer(-1), Integer(1/2), Pow(b, Integer(-1)), Pow(q, Integer(-2)), Log(RemoveContent(Add(a, Mul(b, x)), x))), Mul(Integer(3/2), Pow(b, Integer(-1)), Pow(q, Integer(-2)), Subst(Int(Pow(Add(q, x), Integer(-1)), x), x, Pow(Add(c, Mul(d, x)), Integer(1/3)))))))
    rubi.add(rule29)

    pattern30 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('n')), Less(Integer(-1), Wildcard.dot('n'), Integer(0)), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, a, x, d, c)))
    rule30 = ReplacementRule(pattern30, lambda n, b, a, x, d, c : With(List(Set(p, Denominator(n))), Mul(p, Subst(Int(Mul(Pow(x, Add(Mul(p, Add(n, Integer(1))), Integer(-1))), Pow(Add(Mul(a, d), Mul(Integer(-1), b, c), Mul(b, Pow(x, p))), Integer(-1))), x), x, Pow(Add(c, Mul(d, x)), Pow(p, Integer(-1)))))))
    rubi.add(rule30)

    pattern31 = Pattern(Int(Mul(Pow(Wildcard.dot('x'), Integer(-1)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(Not(IntegerQ(Wildcard.dot('n'))), (x, d, n, c)))
    rule31 = ReplacementRule(pattern31, lambda x, d, n, c : Mul(Integer(-1), Pow(c, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), Hypergeometric2F1(Integer(1), Add(n, Integer(1)), Add(n, Integer(2)), Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)))))
    rubi.add(rule31)

    pattern32 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('n'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, a, x, d, c)))
    rule32 = ReplacementRule(pattern32, lambda n, b, a, x, d, c : Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Hypergeometric2F1(Integer(1), Add(n, Integer(1)), Add(n, Integer(2)), TogetherSimplify(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))))))
    rubi.add(rule32)

    pattern33 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(Greater(Wildcard.dot('n'), Integer(0)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), Not(And(IntegerQ(Wildcard.dot('n')), Not(IntegerQ(Wildcard.dot('m'))))), IntLinearcQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('d'), Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('x')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Not(And(IntegerQ(Add(Wildcard.dot('m'), Wildcard.dot('n'))), LessEqual(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2)), Integer(0)), Or(FractionQ(Wildcard.dot('m')), GreaterEqual(Add(Wildcard.dot('m'), Mul(Integer(2), Wildcard.dot('n')), Integer(1)), Integer(0)))))), (n, b, m, a, x, d, c)))
    rule33 = ReplacementRule(pattern33, lambda n, b, m, a, x, d, c : Add(Mul(Integer(-1), Pow(b, Integer(-1)), d, n, Pow(Add(m, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x)), Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(m, Integer(1)), Integer(-1)))))
    rubi.add(rule33)

    pattern34 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), IntLinearcQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('d'), Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('x')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Not(And(Less(Wildcard.dot('n'), Integer(-1)), Or(ZeroQ(Wildcard.dot('a')), And(IntegerQ(Wildcard.dot('n')), NonzeroQ(Wildcard.dot('c')), Less(Wildcard.dot('m'), Wildcard.dot('n'))))))), (n, b, m, a, x, d, c)))
    rule34 = ReplacementRule(pattern34, lambda n, b, m, a, x, d, c : Add(Mul(Integer(-1), d, Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(m, n, Integer(2)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))))
    rubi.add(rule34)

    pattern35 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(Greater(Wildcard.dot('n'), Integer(0)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), Unequal(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(1)), Integer(0)), IntLinearcQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('d'), Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('x')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Not(And(IntegerQ(Add(Wildcard.dot('m'), Wildcard.dot('n'))), Less(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2)), Integer(0)))), Not(And(PositiveIntegerQ(Wildcard.dot('m')), Or(Not(IntegerQ(Wildcard.dot('n'))), Less(Integer(0), Wildcard.dot('m'), Wildcard.dot('n')))))), (n, b, m, a, x, d, c)))
    rule35 = ReplacementRule(pattern35, lambda n, b, m, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), n, Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(m, n, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1)))), x)), Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(m, n, Integer(1)), Integer(-1)))))
    rubi.add(rule35)

    pattern36 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveQ(Add(Wildcard.dot('a'), Wildcard.dot('c'))), ZeroQ(Add(Wildcard.dot('b'), Wildcard.dot('d')))), (b, a, x, d, c)))
    rule36 = ReplacementRule(pattern36, lambda b, a, x, d, c : Int(Pow(Sqrt(Add(Mul(a, c), Mul(Integer(-1), Pow(b, Integer(2)), Pow(x, Integer(2))), Mul(Integer(-1), b, x, Add(a, Mul(Integer(-1), c))))), Integer(-1)), x))
    rubi.add(rule36)

    pattern37 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveQ(Wildcard.dot('b')), PositiveQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule37 = ReplacementRule(pattern37, lambda b, a, x, d, c : Mul(Integer(2), Pow(Sqrt(b), Integer(-1)), Subst(Int(Pow(Sqrt(Add(Mul(Integer(-1), a, d), Mul(b, c), Mul(d, Pow(x, Integer(2))))), Integer(-1)), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule37)

    pattern38 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Wildcard.dot('b'), Mul(Integer(-1), Wildcard.dot('d')))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule38 = ReplacementRule(pattern38, lambda b, a, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), Subst(Int(Pow(Sqrt(Add(Mul(Integer(-1), a), c, Pow(x, Integer(2)))), Integer(-1)), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule38)

    pattern39 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), (b, a, x, d, c)))
    rule39 = ReplacementRule(pattern39, lambda b, a, x, d, c : Mul(Integer(2), Subst(Int(Pow(Add(b, Mul(Integer(-1), d, Pow(x, Integer(2)))), Integer(-1)), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))))
    rubi.add(rule39)

    pattern40 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('m')), Less(Integer(-1), Wildcard.dot('m'), Integer(0)), LessEqual(Integer(3), Denominator(Wildcard.dot('m')), Integer(4)), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, m, a, x, d, c)))
    rule40 = ReplacementRule(pattern40, lambda b, m, a, x, d, c : Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), m), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2))), Mul(x, Add(Mul(a, d), Mul(b, c)))), Mul(Integer(-1), m)), Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2))), Mul(x, Add(Mul(a, d), Mul(b, c)))), m), x)))
    rubi.add(rule40)

    pattern41 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/3)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-2/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Wildcard.dot('d'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule41 = ReplacementRule(pattern41, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(b, Integer(-1)), d), Integer(3)))), Add(Mul(Integer(-1), Pow(d, Integer(-1)), q, ArcTan(Add(Mul(Integer(2), q, Pow(Add(a, Mul(b, x)), Integer(1/3)), Pow(Add(c, Mul(d, x)), Integer(-1/3)), Pow(Sqrt(Integer(3)), Integer(-1))), Pow(Sqrt(Integer(3)), Integer(-1)))), Sqrt(Integer(3))), Mul(Integer(-1), Integer(1/2), Pow(d, Integer(-1)), q, Log(Add(c, Mul(d, x)))), Mul(Integer(-1), Integer(3/2), Pow(d, Integer(-1)), q, Log(Add(Mul(q, Pow(Add(a, Mul(b, x)), Integer(1/3)), Pow(Add(c, Mul(d, x)), Integer(-1/3))), Integer(-1)))))))
    rubi.add(rule41)

    pattern42 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/3)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-2/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Wildcard.dot('d'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (b, a, x, d, c)))
    rule42 = ReplacementRule(pattern42, lambda b, a, x, d, c : With(List(Set(q, Rt(Mul(Integer(-1), Pow(b, Integer(-1)), d), Integer(3)))), Add(Mul(Pow(d, Integer(-1)), q, ArcTan(Add(Mul(Integer(-1), Integer(2), q, Pow(Add(a, Mul(b, x)), Integer(1/3)), Pow(Add(c, Mul(d, x)), Integer(-1/3)), Pow(Sqrt(Integer(3)), Integer(-1))), Pow(Sqrt(Integer(3)), Integer(-1)))), Sqrt(Integer(3))), Mul(Integer(1/2), Pow(d, Integer(-1)), q, Log(Add(c, Mul(d, x)))), Mul(Integer(3/2), Pow(d, Integer(-1)), q, Log(Add(Mul(q, Pow(Add(a, Mul(b, x)), Integer(1/3)), Pow(Add(c, Mul(d, x)), Integer(-1/3))), Integer(1)))))))
    rubi.add(rule42)

    pattern43 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), Less(Integer(-1), Wildcard.dot('m'), Integer(0)), Equal(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(1)), Integer(0)), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule43 = ReplacementRule(pattern43, lambda n, b, m, a, x, d, c : With(List(Set(p, Denominator(m))), Mul(p, Subst(Int(Mul(Pow(x, Add(Mul(p, Add(m, Integer(1))), Integer(-1))), Pow(Add(b, Mul(Integer(-1), d, Pow(x, p))), Integer(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Pow(p, Integer(-1))), Pow(Add(c, Mul(d, x)), Mul(Integer(-1), Pow(p, Integer(-1)))))))))
    rubi.add(rule43)

    pattern44 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), Less(Integer(-1), Wildcard.dot('m'), Integer(0)), Less(Integer(-1), Wildcard.dot('n'), Integer(0)), LessEqual(Denominator(Wildcard.dot('n')), Denominator(Wildcard.dot('m'))), IntLinearcQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('d'), Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('x')), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule44 = ReplacementRule(pattern44, lambda n, b, m, a, x, d, c : With(List(Set(p, Denominator(m))), Mul(Pow(b, Integer(-1)), p, Subst(Int(Mul(Pow(x, Add(Mul(p, Add(m, Integer(1))), Integer(-1))), Pow(Add(Mul(Integer(-1), a, Pow(b, Integer(-1)), d), c, Mul(Pow(b, Integer(-1)), d, Pow(x, p))), n)), x), x, Pow(Add(a, Mul(b, x)), Pow(p, Integer(-1)))))))
    rubi.add(rule44)

    pattern45 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), NegativeIntegerQ(Simplify(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2)))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), Not(SumSimplerQ(Wildcard.dot('n'), Integer(1)))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule45 = ReplacementRule(pattern45, lambda n, b, m, a, x, d, c : Add(Mul(Integer(-1), d, Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Simplify(Add(m, Integer(1)))), Pow(Add(c, Mul(d, x)), n)), x), Simplify(Add(m, n, Integer(2)))), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))))
    rubi.add(rule45)

    pattern46 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Or(IntegerQ(Wildcard.dot('n')), And(PositiveQ(Wildcard.dot('c')), Not(And(ZeroQ(Add(Wildcard.dot('n'), Integer(1/2))), PositiveQ(Mul(Integer(-1), Pow(Wildcard.dot('b'), Integer(-1)), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d'))), ZeroQ(Add(Pow(Wildcard.dot('c'), Integer(2)), Mul(Integer(-1), Pow(Wildcard.dot('d'), Integer(2)))))))))), (n, b, m, x, d, c)))
    rule46 = ReplacementRule(pattern46, lambda n, b, m, x, d, c : Mul(Pow(b, Integer(-1)), Pow(c, n), Pow(Mul(b, x), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Integer(-1), Pow(c, Integer(-1)), d, x))))
    rubi.add(rule46)

    pattern47 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('n'))), Or(IntegerQ(Wildcard.dot('m')), PositiveQ(Mul(Integer(-1), Pow(Wildcard.dot('b'), Integer(-1)), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d'))))), (n, b, m, x, d, c)))
    rule47 = ReplacementRule(pattern47, lambda n, b, m, x, d, c : Mul(Pow(d, Integer(-1)), Pow(Mul(Integer(-1), Pow(b, Integer(-1)), Pow(c, Integer(-1)), d), Mul(Integer(-1), m)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), Hypergeometric2F1(Mul(Integer(-1), m), Add(n, Integer(1)), Add(n, Integer(2)), Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)))))
    rubi.add(rule47)

    pattern48 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(PositiveQ(Wildcard.dot('c'))), Not(PositiveQ(Mul(Integer(-1), Pow(Wildcard.dot('b'), Integer(-1)), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d')))), Or(Not(RationalQ(Wildcard.dot('n'))), And(RationalQ(Wildcard.dot('m')), Not(And(ZeroQ(Add(Wildcard.dot('n'), Integer(1/2))), ZeroQ(Add(Pow(Wildcard.dot('c'), Integer(2)), Mul(Integer(-1), Pow(Wildcard.dot('d'), Integer(2)))))))))), (n, b, m, x, d, c)))
    rule48 = ReplacementRule(pattern48, lambda n, b, m, x, d, c : Mul(Pow(c, IntPart(n)), Pow(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)), Mul(Integer(-1), FracPart(n))), Pow(Add(c, Mul(d, x)), FracPart(n)), Int(Mul(Pow(Mul(b, x), m), Pow(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)), n)), x)))
    rubi.add(rule48)

    pattern49 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(PositiveQ(Wildcard.dot('c'))), Not(PositiveQ(Mul(Integer(-1), Pow(Wildcard.dot('b'), Integer(-1)), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d'))))), (n, b, m, x, d, c)))
    rule49 = ReplacementRule(pattern49, lambda n, b, m, x, d, c : Mul(Pow(Mul(b, x), FracPart(m)), Pow(Mul(Integer(-1), b, c, Pow(d, Integer(-1))), IntPart(m)), Pow(Mul(Integer(-1), Pow(c, Integer(-1)), d, x), Mul(Integer(-1), FracPart(m))), Int(Mul(Pow(Mul(Integer(-1), Pow(c, Integer(-1)), d, x), m), Pow(Add(c, Mul(d, x)), n)), x)))
    rubi.add(rule49)

    pattern50 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(IntegerQ(Wildcard.dot('n')), Not(IntegerQ(Wildcard.dot('m'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, b, m, a, x, d, c)))
    rule50 = ReplacementRule(pattern50, lambda n, b, m, a, x, d, c : Mul(Pow(b, Add(Mul(Integer(-1), n), Integer(-1))), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), n), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Integer(-1), d, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))))))
    rubi.add(rule50)

    pattern51 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), Or(RationalQ(Wildcard.dot('m')), Not(And(RationalQ(Wildcard.dot('n')), PositiveQ(Mul(Integer(-1), Wildcard.dot('d'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))))))), (n, b, m, a, x, d, c)))
    rule51 = ReplacementRule(pattern51, lambda n, b, m, a, x, d, c : Mul(Pow(b, Integer(-1)), Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), n)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Hypergeometric2F1(Mul(Integer(-1), n), Add(m, Integer(1)), Add(m, Integer(2)), Mul(Integer(-1), d, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))))))
    rubi.add(rule51)

    pattern52 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Or(RationalQ(Wildcard.dot('m')), Not(SimplerQ(Add(Wildcard.dot('n'), Integer(1)), Add(Wildcard.dot('m'), Integer(1)))))), (n, b, m, a, x, d, c)))
    rule52 = ReplacementRule(pattern52, lambda n, b, m, a, x, d, c : Mul(Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), IntPart(n))), Pow(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), FracPart(n))), Pow(Add(c, Mul(d, x)), FracPart(n)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, c, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(b, d, x, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))), n)), x)))
    rubi.add(rule52)

    pattern53 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(Wildcard.dot('u'), Wildcard.dot('x')), NonzeroQ(Coefficient(Wildcard.dot('u'), Wildcard.dot('x'), Integer(0)))), (n, b, m, u, a, x, d, c)))
    rule53 = ReplacementRule(pattern53, lambda n, b, m, u, a, x, d, c : Mul(Pow(Coefficient(u, x, Integer(1)), Integer(-1)), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x, u)))
    rubi.add(rule53)

    pattern54 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), ZeroQ(Add(Wildcard.dot('m'), Mul(Integer(-1), Wildcard.dot('n')))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule54 = ReplacementRule(pattern54, lambda n, p, b, m, f, e, a, x, d, c : Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m)), x))
    rubi.add(rule54)

    pattern55 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d'), Wildcard.dot('f'), Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Mul(Integer(-1), Wildcard.dot('b'), Add(Mul(Wildcard.dot('c'), Wildcard.dot('f'), Add(Wildcard.dot('p'), Integer(1))), Mul(Wildcard.dot('d'), Wildcard.dot('e'), Add(Wildcard.dot('n'), Integer(1)))))))), (n, p, b, f, e, a, x, d, c)))
    rule55 = ReplacementRule(pattern55, lambda n, p, b, f, e, a, x, d, c : Mul(b, Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(n, p, Integer(2)), Integer(-1))))
    rubi.add(rule55)

    pattern56 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x')), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Wildcard.dot('p')), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e')))), Not(And(NegativeIntegerQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Greater(Add(Wildcard.dot('n'), Mul(Integer(2), Wildcard.dot('p'))), Integer(0))))), (n, p, b, f, e, a, x, d)))
    rule56 = ReplacementRule(pattern56, lambda n, p, b, f, e, a, x, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), n), Add(a, Mul(b, x)), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule56)

    pattern57 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x')), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Wildcard.dot('p')), NonzeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e')))), Or(Equal(Wildcard.dot('p'), Integer(1)), NonzeroQ(Add(Wildcard.dot('n'), Integer(1)))), Or(Not(IntegerQ(Wildcard.dot('n'))), GreaterEqual(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(1)), Integer(0)), Less(Add(Mul(Integer(5), Wildcard.dot('n')), Mul(Integer(9), Wildcard.dot('p'))), Integer(0)), And(GreaterEqual(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)), Integer(0)), RationalQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('d'), Wildcard.dot('e'), Wildcard.dot('f'))))), (n, p, b, f, e, a, x, d)))
    rule57 = ReplacementRule(pattern57, lambda n, p, b, f, e, a, x, d : Int(ExpandIntegrand(Mul(Pow(Mul(d, x), n), Add(a, Mul(b, x)), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule57)

    pattern58 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))), Or(NegativeIntegerQ(Wildcard.dot('n'), Wildcard.dot('p')), ZeroQ(Add(Wildcard.dot('p'), Integer(-1))), And(PositiveIntegerQ(Wildcard.dot('p')), Or(Not(IntegerQ(Wildcard.dot('n'))), GreaterEqual(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(1)), Integer(0)), LessEqual(Add(Mul(Integer(5), Wildcard.dot('n')), Mul(Integer(9), Wildcard.dot('p')), Integer(10)), Integer(0)), And(GreaterEqual(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)), Integer(0)), RationalQ(Wildcard.dot('a'), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('d'), Wildcard.dot('e'), Wildcard.dot('f'))))))), (n, p, b, f, e, a, x, d, c)))
    rule58 = ReplacementRule(pattern58, lambda n, p, b, f, e, a, x, d, c : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule58)

    pattern59 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('p'), Integer(1))), ZeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Not(And(SumSimplerQ(Wildcard.dot('n'), Integer(1)), Not(SumSimplerQ(Wildcard.dot('p'), Integer(1)))))), (n, p, b, f, e, a, x, d, c)))
    rule59 = ReplacementRule(pattern59, lambda n, p, b, f, e, a, x, d, c : Add(Mul(b, Pow(f, Integer(-1)), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1)))), x)), Mul(Pow(f, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(p, Integer(1)), Integer(-1)), Add(Mul(a, f), Mul(Integer(-1), b, e)), Pow(Add(Mul(c, f), Mul(Integer(-1), d, e)), Integer(-1)))))
    rubi.add(rule59)

    pattern60 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(RationalQ(Wildcard.dot('p')), Less(Wildcard.dot('p'), Integer(-1)), NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Or(IntegerQ(Wildcard.dot('p')), Not(And(RationalQ(Wildcard.dot('n')), Less(Wildcard.dot('n'), Integer(-1)))), Not(Or(IntegerQ(Wildcard.dot('n')), Not(Or(ZeroQ(Wildcard.dot('e')), Not(Or(ZeroQ(Wildcard.dot('c')), Less(Wildcard.dot('p'), Wildcard.dot('n')))))))))), (n, p, b, f, e, a, x, d, c)))
    rule60 = ReplacementRule(pattern60, lambda n, p, b, f, e, a, x, d, c : Add(Mul(Pow(f, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(p, Integer(1)), Integer(-1)), Add(Mul(a, f), Mul(Integer(-1), b, e)), Pow(Add(Mul(c, f), Mul(Integer(-1), d, e)), Integer(-1))), Mul(Integer(-1), Pow(f, Integer(-1)), Pow(Add(p, Integer(1)), Integer(-1)), Pow(Add(Mul(c, f), Mul(Integer(-1), d, e)), Integer(-1)), Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), b, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1)))), x))))
    rubi.add(rule60)

    pattern61 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(SumSimplerQ(Wildcard.dot('p'), Integer(1)), Not(RationalQ(Wildcard.dot('p'))), NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)))), (n, p, b, f, e, a, x, d, c)))
    rule61 = ReplacementRule(pattern61, lambda n, p, b, f, e, a, x, d, c : Add(Mul(Pow(f, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(p, Integer(1)), Integer(-1)), Add(Mul(a, f), Mul(Integer(-1), b, e)), Pow(Add(Mul(c, f), Mul(Integer(-1), d, e)), Integer(-1))), Mul(Integer(-1), Pow(f, Integer(-1)), Pow(Add(p, Integer(1)), Integer(-1)), Pow(Add(Mul(c, f), Mul(Integer(-1), d, e)), Integer(-1)), Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), b, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Simplify(Add(p, Integer(1))))), x))))
    rubi.add(rule61)

    pattern62 = Pattern(Int(Mul(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), (n, p, b, f, e, a, x, d, c)))
    rule62 = ReplacementRule(pattern62, lambda n, p, b, f, e, a, x, d, c : Add(Mul(b, Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(n, p, Integer(2)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Add(Mul(a, d, f, Add(n, p, Integer(2))), Mul(Integer(-1), b, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), Pow(Add(n, p, Integer(2)), Integer(-1)), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule62)

    pattern63 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(3))), ZeroQ(Add(Mul(Integer(-1), Wildcard.dot('b'), Add(Mul(Wildcard.dot('c'), Wildcard.dot('f'), Add(Wildcard.dot('p'), Integer(1))), Mul(Wildcard.dot('d'), Wildcard.dot('e'), Add(Wildcard.dot('n'), Integer(1)))), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d'), Wildcard.dot('f'), Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(4))), Mul(Integer(-1), Wildcard.dot('b'), Add(Mul(Wildcard.dot('c'), Wildcard.dot('f'), Add(Wildcard.dot('p'), Integer(2))), Mul(Wildcard.dot('d'), Wildcard.dot('e'), Add(Wildcard.dot('n'), Integer(2))))))), Mul(Wildcard.dot('d'), Wildcard.dot('f'), Add(Mul(Pow(Wildcard.dot('a'), Integer(2)), Wildcard.dot('d'), Wildcard.dot('f'), Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(3))), Mul(Integer(-1), Wildcard.dot('b'), Add(Mul(Wildcard.dot('a'), Add(Mul(Wildcard.dot('c'), Wildcard.dot('f'), Add(Wildcard.dot('p'), Integer(1))), Mul(Wildcard.dot('d'), Wildcard.dot('e'), Add(Wildcard.dot('n'), Integer(1))))), Mul(Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('e'))))), Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)))))), (n, p, b, f, e, a, x, d, c)))
    rule63 = ReplacementRule(pattern63, lambda n, p, b, f, e, a, x, d, c : Mul(b, Pow(d, Integer(-2)), Pow(f, Integer(-2)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(n, p, Integer(2)), Integer(-1)), Pow(Add(n, p, Integer(3)), Integer(-1)), Add(Mul(Integer(2), a, d, f, Add(n, p, Integer(3))), Mul(b, d, f, x, Add(n, p, Integer(2))), Mul(Integer(-1), b, Add(Mul(c, f, Add(p, Integer(2))), Mul(d, e, Add(n, Integer(2))))))))
    rubi.add(rule63)

    pattern64 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x')), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(Wildcard.dot('m'))), Not(RationalQ(Wildcard.dot('p'))), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), ZeroQ(Add(Wildcard.dot('m'), Mul(Integer(-1), Wildcard.dot('n')), Integer(-1))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, p, b, m, f, a, x, d, c)))
    rule64 = ReplacementRule(pattern64, lambda n, p, b, m, f, a, x, d, c : Add(Mul(a, Int(Mul(Pow(Mul(f, x), p), Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n)), x)), Mul(b, Pow(f, Integer(-1)), Int(Mul(Pow(Mul(f, x), Add(p, Integer(1))), Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule64)

    pattern65 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(IntegerQ(Wildcard.dot('p')), (p, b, f, e, a, x, d, c)))
    rule65 = ReplacementRule(pattern65, lambda p, b, f, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule65)

    pattern66 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(Wildcard.dot('p')), Less(Integer(0), Wildcard.dot('p'), Integer(1))), (p, b, f, e, a, x, d, c)))
    rule66 = ReplacementRule(pattern66, lambda p, b, f, e, a, x, d, c : Add(Mul(Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1)))), x)), Mul(Integer(-1), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e)), Int(Mul(Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1)))), x))))
    rubi.add(rule66)

    pattern67 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(Wildcard.dot('p')), Greater(Wildcard.dot('p'), Integer(1))), (p, b, f, e, a, x, d, c)))
    rule67 = ReplacementRule(pattern67, lambda p, b, f, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(d, Integer(-1)), f, Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Add(p, Integer(-1)), Integer(-1))), Mul(Pow(b, Integer(-1)), Pow(d, Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(-2))), Add(Mul(Integer(-1), a, c, Pow(f, Integer(2))), Mul(b, d, Pow(e, Integer(2))), Mul(f, x, Add(Mul(Integer(-1), a, d, f), Mul(Integer(-1), b, c, f), Mul(Integer(2), b, d, e))))), x))))
    rubi.add(rule67)

    pattern68 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(Wildcard.dot('p')), Less(Wildcard.dot('p'), Integer(-1))), (p, b, f, e, a, x, d, c)))
    rule68 = ReplacementRule(pattern68, lambda p, b, f, e, a, x, d, c : Add(Mul(f, Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(p, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))), Mul(Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Add(Mul(Integer(-1), a, d, f), Mul(Integer(-1), b, c, f), Mul(b, d, e), Mul(Integer(-1), b, d, f, x))), x))))
    rubi.add(rule68)

    pattern69 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(Not(IntegerQ(Wildcard.dot('p'))), (p, b, f, e, a, x, d, c)))
    rule69 = ReplacementRule(pattern69, lambda p, b, f, e, a, x, d, c : Add(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Integer(-1), d, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule69)

    pattern70 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(FractionQ(Wildcard.dot('p')), PositiveIntegerQ(Wildcard.dot('n')), Less(Wildcard.dot('p'), Integer(-1))), (n, p, b, f, e, a, x, d, c)))
    rule70 = ReplacementRule(pattern70, lambda n, p, b, f, e, a, x, d, c : Int(ExpandIntegrand(Pow(Add(e, Mul(f, x)), FractionalPart(p)), Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), IntegerPart(p))), x), x))
    rubi.add(rule70)

    pattern71 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(IntegersQ(Wildcard.dot('m'), Wildcard.dot('n')), Or(IntegerQ(Wildcard.dot('p')), And(Greater(Wildcard.dot('m'), Integer(0)), GreaterEqual(Wildcard.dot('n'), Integer(-1))))), (n, p, b, m, f, e, a, x, d, c)))
    rule71 = ReplacementRule(pattern71, lambda n, p, b, m, f, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule71)

    pattern72 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(Or(And(RationalQ(Wildcard.dot('n')), Less(Wildcard.dot('n'), Integer(-1))), And(NonzeroQ(Add(Wildcard.dot('n'), Integer(1))), ZeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(3))), Or(SumSimplerQ(Wildcard.dot('n'), Integer(1)), Not(SumSimplerQ(Wildcard.dot('p'), Integer(1)))))), (n, p, b, f, e, a, x, d, c)))
    rule72 = ReplacementRule(pattern72, lambda n, p, b, f, e, a, x, d, c : Add(Mul(Pow(d, Integer(-2)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(2)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))), Mul(Integer(-1), Pow(d, Integer(-2)), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, Add(n, p, Integer(2))), Mul(Integer(-1), Integer(2), a, b, d, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(Pow(b, Integer(2)), c, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(Integer(-1), Pow(b, Integer(2)), d, x, Add(n, Integer(1)), Add(Mul(Integer(-1), c, f), Mul(d, e)))), x)), x))))
    rubi.add(rule72)

    pattern73 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(NonzeroQ(Add(Wildcard.dot('n'), Wildcard.dot('p'), Integer(3))), (n, p, b, f, e, a, x, d, c)))
    rule73 = ReplacementRule(pattern73, lambda n, p, b, f, e, a, x, d, c : Add(Mul(b, Pow(d, Integer(-1)), Pow(f, Integer(-1)), Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(n, p, Integer(3)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(n, p, Integer(3)), Integer(-1)), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(n, p, Integer(3))), Mul(b, x, Add(Mul(a, d, f, Add(n, p, Integer(4))), Mul(Integer(-1), b, Add(Mul(c, f, Add(p, Integer(2))), Mul(d, e, Add(n, Integer(2))))))), Mul(Integer(-1), b, Add(Mul(a, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(b, c, e)))), x)), x))))
    rubi.add(rule73)

    pattern74 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/3)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-2/3)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, f, e, a, x, d, c)))
    rule74 = ReplacementRule(pattern74, lambda b, f, e, a, x, d, c : With(List(Set(q, Rt(Mul(Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e))), Integer(3)))), Add(Mul(Integer(-1), q, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)), ArcTan(Add(Mul(Integer(2), q, Pow(Add(a, Mul(b, x)), Integer(1/3)), Pow(Add(c, Mul(d, x)), Integer(-1/3)), Pow(Sqrt(Integer(3)), Integer(-1))), Pow(Sqrt(Integer(3)), Integer(-1)))), Sqrt(Integer(3))), Mul(q, Pow(Add(Mul(Integer(-1), Integer(2), c, f), Mul(Integer(2), d, e)), Integer(-1)), Log(Add(e, Mul(f, x)))), Mul(Integer(-1), Integer(3), q, Pow(Add(Mul(Integer(-1), Integer(2), c, f), Mul(Integer(2), d, e)), Integer(-1)), Log(Add(Mul(q, Pow(Add(a, Mul(b, x)), Integer(1/3))), Mul(Integer(-1), Pow(Add(c, Mul(d, x)), Integer(1/3)))))))))
    rubi.add(rule74)

    pattern75 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(ZeroQ(Add(Mul(Integer(2), Wildcard.dot('b'), Wildcard.dot('d'), Wildcard.dot('e')), Mul(Integer(-1), Wildcard.dot('f'), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c')))))), (b, f, e, a, x, d, c)))
    rule75 = ReplacementRule(pattern75, lambda b, f, e, a, x, d, c : Mul(b, f, Subst(Int(Pow(Add(Mul(b, Pow(f, Integer(2)), Pow(x, Integer(2))), Mul(d, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(2)))), Integer(-1)), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))))))
    rubi.add(rule75)

    pattern76 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), Less(Integer(-1), Wildcard.dot('m'), Integer(0)), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(1))), SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))))), (n, b, m, f, e, a, x, d, c)))
    rule76 = ReplacementRule(pattern76, lambda n, b, m, f, e, a, x, d, c : With(List(Set(q, Denominator(m))), Mul(q, Subst(Int(Mul(Pow(x, Add(Mul(q, Add(m, Integer(1))), Integer(-1))), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e), Mul(Integer(-1), Pow(x, q), Add(Mul(Integer(-1), c, f), Mul(d, e)))), Integer(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Pow(q, Integer(-1))), Pow(Add(c, Mul(d, x)), Mul(Integer(-1), Pow(q, Integer(-1)))))))))
    rubi.add(rule76)

    pattern77 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(RationalQ(Wildcard.dot('n')), Greater(Wildcard.dot('n'), Integer(0)), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Not(And(SumSimplerQ(Wildcard.dot('p'), Integer(1)), Not(SumSimplerQ(Wildcard.dot('m'), Integer(1)))))), (n, p, b, m, f, e, a, x, d, c)))
    rule77 = ReplacementRule(pattern77, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(Integer(-1), n, Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))))
    rubi.add(rule77)

    pattern78 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), ZeroQ(Simplify(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(3)))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d'), Wildcard.dot('f'), Add(Wildcard.dot('m'), Integer(1))), Mul(Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('f'), Add(Wildcard.dot('n'), Integer(1))), Mul(Wildcard.dot('b'), Wildcard.dot('d'), Wildcard.dot('e'), Add(Wildcard.dot('p'), Integer(1)))))), (n, p, b, m, f, e, a, x, d, c)))
    rule78 = ReplacementRule(pattern78, lambda n, p, b, m, f, e, a, x, d, c : Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))
    rubi.add(rule78)

    pattern79 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Simplify(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(3)))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1))))), (n, p, b, m, f, e, a, x, d, c)))
    rule79 = ReplacementRule(pattern79, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(a, d, f, Add(m, Integer(1))), Mul(b, c, f, Add(n, Integer(1))), Mul(b, d, e, Add(p, Integer(1)))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule79)

    pattern80 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Greater(Wildcard.dot('n'), Integer(0)), Greater(Wildcard.dot('p'), Integer(0)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p')), Or(IntegersQ(Wildcard.dot('m'), Add(Wildcard.dot('n'), Wildcard.dot('p'))), IntegersQ(Wildcard.dot('p'), Add(Wildcard.dot('m'), Wildcard.dot('n'))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule80 = ReplacementRule(pattern80, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(m, Integer(1)), Integer(-1))), Mul(Integer(-1), Pow(b, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Simp(Add(Mul(c, f, p), Mul(d, e, n), Mul(d, f, x, Add(n, p))), x)), x))))
    rubi.add(rule80)

    pattern81 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(Greater(Wildcard.dot('n'), Integer(1)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p')), Or(IntegersQ(Wildcard.dot('m'), Add(Wildcard.dot('n'), Wildcard.dot('p'))), IntegersQ(Wildcard.dot('p'), Add(Wildcard.dot('m'), Wildcard.dot('n'))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule81 = ReplacementRule(pattern81, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Pow(b, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-2))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(-1))))), Mul(b, c, Add(Mul(Integer(-1), c, f, Add(m, p, Integer(2))), Mul(d, e, Add(m, Mul(Integer(-1), n), Integer(2))))), Mul(d, x, Add(Mul(a, d, f, Add(n, p)), Mul(b, Add(Mul(Integer(-1), c, f, Add(m, n, p, Integer(1))), Mul(d, e, Add(m, Integer(1)))))))), x)), x))))
    rubi.add(rule81)

    pattern82 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(Greater(Wildcard.dot('n'), Integer(0)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p')), Or(IntegersQ(Wildcard.dot('m'), Add(Wildcard.dot('n'), Wildcard.dot('p'))), IntegersQ(Wildcard.dot('p'), Add(Wildcard.dot('m'), Wildcard.dot('n'))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule82 = ReplacementRule(pattern82, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Integer(-1), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(c, f, Add(m, p, Integer(2))), Mul(d, e, n), Mul(d, f, x, Add(m, n, p, Integer(2)))), x)), x))))
    rubi.add(rule82)

    pattern83 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), RationalQ(Wildcard.dot('m')), Greater(Wildcard.dot('m'), Integer(1)), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(1)))), (n, p, b, m, f, e, a, x, d, c)))
    rule83 = ReplacementRule(pattern83, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, n, p, Integer(1)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(m, n, p, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(m, n, p, Integer(1))), Mul(b, x, Add(Mul(a, d, f, Add(Mul(Integer(2), m), n, p)), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p)), Mul(d, e, Add(m, n)))))), Mul(Integer(-1), b, Add(Mul(a, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(b, c, e, Add(m, Integer(-1)))))), x)), x))))
    rubi.add(rule83)

    pattern84 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Greater(Wildcard.dot('m'), Integer(0)), Greater(Wildcard.dot('n'), Integer(0)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p')), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(1))), Or(IntegersQ(Wildcard.dot('m'), Add(Wildcard.dot('n'), Wildcard.dot('p'))), IntegersQ(Wildcard.dot('p'), Add(Wildcard.dot('m'), Wildcard.dot('n'))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule84 = ReplacementRule(pattern84, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(Pow(f, Integer(-1)), Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, n, p, Integer(1)), Integer(-1))), Mul(Integer(-1), Pow(f, Integer(-1)), Pow(Add(m, n, p, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, n, Add(Mul(Integer(-1), c, f), Mul(d, e))), Mul(c, m, Add(Mul(Integer(-1), a, f), Mul(b, e))), Mul(x, Add(Mul(b, n, Add(Mul(Integer(-1), c, f), Mul(d, e))), Mul(d, m, Add(Mul(Integer(-1), a, f), Mul(b, e)))))), x)), x))))
    rubi.add(rule84)

    pattern85 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(Wildcard.dot('m')), Greater(Wildcard.dot('m'), Integer(1)), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(1))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p')))), (n, p, b, m, f, e, a, x, d, c)))
    rule85 = ReplacementRule(pattern85, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, n, p, Integer(1)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(m, n, p, Integer(1)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, Integer(2)), d, f, Add(m, n, p, Integer(1))), Mul(b, x, Add(Mul(a, d, f, Add(Mul(Integer(2), m), n, p)), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p)), Mul(d, e, Add(m, n)))))), Mul(Integer(-1), b, Add(Mul(a, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(b, c, e, Add(m, Integer(-1)))))), x)), x))))
    rubi.add(rule85)

    pattern86 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1)), Or(IntegerQ(Wildcard.dot('n')), IntegersQ(Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p'))))), (n, p, b, m, f, e, a, x, d, c)))
    rule86 = ReplacementRule(pattern86, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), b, d, f, x, Add(m, n, p, Integer(3))), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p, Integer(2))), Mul(d, e, Add(m, n, Integer(2)))))), x)), x))))
    rubi.add(rule86)

    pattern87 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1)), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p')))), (n, p, b, m, f, e, a, x, d, c)))
    rule87 = ReplacementRule(pattern87, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), b, d, f, x, Add(m, n, p, Integer(3))), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p, Integer(2))), Mul(d, e, Add(m, n, Integer(2)))))), x)), x))))
    rubi.add(rule87)

    pattern88 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Simplify(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(1)))), Or(And(RationalQ(Wildcard.dot('m')), Greater(Wildcard.dot('m'), Integer(0))), And(Not(RationalQ(Wildcard.dot('m'))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(-1)), Not(SumSimplerQ(Wildcard.dot('n'), Integer(-1))))))), (n, b, m, f, e, a, x, d, c)))
    rule88 = ReplacementRule(pattern88, lambda n, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(f, Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(Integer(-1), Pow(f, Integer(-1)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Integer(-1))), x))))
    rubi.add(rule88)

    pattern89 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(PositiveQ(Mul(Integer(-1), Wildcard.dot('f'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1)))), (b, f, e, a, x, d, c)))
    rule89 = ReplacementRule(pattern89, lambda b, f, e, a, x, d, c : Mul(Integer(-1), Integer(4), Subst(Int(Mul(Pow(x, Integer(2)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e), Mul(Integer(-1), b, Pow(x, Integer(4)))), Integer(-1)), Pow(Sqrt(Add(c, Mul(Integer(-1), d, e, Pow(f, Integer(-1))), Mul(d, Pow(f, Integer(-1)), Pow(x, Integer(4))))), Integer(-1))), x), x, Pow(Add(e, Mul(f, x)), Integer(1/4)))))
    rubi.add(rule89)

    pattern90 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(Not(PositiveQ(Mul(Integer(-1), Wildcard.dot('f'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1))))), (b, f, e, a, x, d, c)))
    rule90 = ReplacementRule(pattern90, lambda b, f, e, a, x, d, c : Mul(Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Integer(-1/4)), Pow(Sqrt(Add(Mul(Integer(-1), c, f, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))), Mul(Integer(-1), d, f, x, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))))), Integer(-1))), x), Sqrt(Mul(Integer(-1), f, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))
    rubi.add(rule90)

    pattern91 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-3/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(PositiveQ(Mul(Integer(-1), Wildcard.dot('f'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1)))), (b, f, e, a, x, d, c)))
    rule91 = ReplacementRule(pattern91, lambda b, f, e, a, x, d, c : Mul(Integer(-1), Integer(4), Subst(Int(Mul(Pow(Add(Mul(Integer(-1), a, f), Mul(b, e), Mul(Integer(-1), b, Pow(x, Integer(4)))), Integer(-1)), Pow(Sqrt(Add(c, Mul(Integer(-1), d, e, Pow(f, Integer(-1))), Mul(d, Pow(f, Integer(-1)), Pow(x, Integer(4))))), Integer(-1))), x), x, Pow(Add(e, Mul(f, x)), Integer(1/4)))))
    rubi.add(rule91)

    pattern92 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-3/4))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(Not(PositiveQ(Mul(Integer(-1), Wildcard.dot('f'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1))))), (b, f, e, a, x, d, c)))
    rule92 = ReplacementRule(pattern92, lambda b, f, e, a, x, d, c : Mul(Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Integer(-3/4)), Pow(Sqrt(Add(Mul(Integer(-1), c, f, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))), Mul(Integer(-1), d, f, x, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))))), Integer(-1))), x), Sqrt(Mul(Integer(-1), f, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1))))
    rubi.add(rule92)

    pattern93 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')), Not(NegativeQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('d'), Integer(-1))))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))))), (b, f, e, x, d, c)))
    rule93 = ReplacementRule(pattern93, lambda b, f, e, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticE(ArcSin(Mul(Pow(Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Integer(-1)), Pow(Sqrt(c), Integer(-1)), Sqrt(Mul(b, x)))), Mul(c, Pow(d, Integer(-1)), Pow(e, Integer(-1)), f)), Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Sqrt(e)))
    rubi.add(rule93)

    pattern94 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')), NegativeQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('d'), Integer(-1)))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))))), (b, f, e, x, d, c)))
    rule94 = ReplacementRule(pattern94, lambda b, f, e, x, d, c : Mul(Int(Mul(Pow(Sqrt(Mul(Integer(-1), b, x)), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Sqrt(Add(e, Mul(f, x)))), x), Sqrt(Mul(Integer(-1), b, x)), Pow(Sqrt(Mul(b, x)), Integer(-1))))
    rubi.add(rule94)

    pattern95 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')))), NonzeroQ(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))))), (b, f, e, x, d, c)))
    rule95 = ReplacementRule(pattern95, lambda b, f, e, x, d, c : Mul(Int(Mul(Pow(Sqrt(Mul(b, x)), Integer(-1)), Pow(Sqrt(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x))), Integer(-1)), Sqrt(Add(Integer(1), Mul(Pow(e, Integer(-1)), f, x)))), x), Sqrt(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x))), Pow(Sqrt(Add(Integer(1), Mul(Pow(e, Integer(-1)), f, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Sqrt(Add(e, Mul(f, x)))))
    rubi.add(rule95)

    pattern96 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))), Not(NegativeQ(Mul(Pow(Wildcard.dot('d'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c')))))), Not(And(SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('d'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1)))), PositiveQ(Mul(Integer(-1), Wildcard.dot('d'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), Not(NegativeQ(Mul(Pow(Wildcard.dot('b'), Integer(-1)), Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))))))), (b, f, e, a, x, d, c)))
    rule96 = ReplacementRule(pattern96, lambda b, f, e, a, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticE(ArcSin(Mul(Pow(Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(2)), Integer(-1)), Sqrt(Add(a, Mul(b, x))))), Mul(Pow(d, Integer(-1)), f, Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, f), Mul(Integer(-1), b, e))), Integer(2))))
    rubi.add(rule96)

    pattern97 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(NegativeQ(Mul(Pow(Wildcard.dot('d'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c')))))), Not(And(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1))))))), (b, f, e, a, x, d, c)))
    rule97 = ReplacementRule(pattern97, lambda b, f, e, a, x, d, c : Mul(Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(Mul(b, c, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(b, d, x, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))))), Integer(-1)), Sqrt(Add(Mul(b, e, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(b, f, x, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))))), x), Sqrt(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))), Pow(Sqrt(Mul(b, Add(e, Mul(f, x)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Sqrt(Add(e, Mul(f, x)))))
    rubi.add(rule97)

    pattern98 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')), Or(NegativeQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('f'), Integer(-1)))), PositiveQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('d'), Integer(-1)))))), (b, f, e, x, d, c)))
    rule98 = ReplacementRule(pattern98, lambda b, f, e, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticF(ArcSin(Mul(Pow(Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Integer(-1)), Pow(Sqrt(c), Integer(-1)), Sqrt(Mul(b, x)))), Mul(c, Pow(d, Integer(-1)), Pow(e, Integer(-1)), f)), Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Pow(Sqrt(e), Integer(-1))))
    rubi.add(rule98)

    pattern99 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')), Or(NegQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('f'), Integer(-1)))), PosQ(Mul(Integer(-1), Wildcard.dot('b'), Pow(Wildcard.dot('d'), Integer(-1)))))), (b, f, e, x, d, c)))
    rule99 = ReplacementRule(pattern99, lambda b, f, e, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticF(ArcSin(Mul(Pow(Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Integer(-1)), Pow(Sqrt(c), Integer(-1)), Sqrt(Mul(b, x)))), Mul(c, Pow(d, Integer(-1)), Pow(e, Integer(-1)), f)), Rt(Mul(Integer(-1), b, Pow(d, Integer(-1))), Integer(2)), Pow(Sqrt(e), Integer(-1))))
    rubi.add(rule99)

    pattern100 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(Not(And(PositiveQ(Wildcard.dot('c')), PositiveQ(Wildcard.dot('e')))), (b, f, e, x, d, c)))
    rule100 = ReplacementRule(pattern100, lambda b, f, e, x, d, c : Mul(Int(Mul(Pow(Sqrt(Mul(b, x)), Integer(-1)), Pow(Sqrt(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x))), Integer(-1)), Pow(Sqrt(Add(Integer(1), Mul(Pow(e, Integer(-1)), f, x))), Integer(-1))), x), Sqrt(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x))), Sqrt(Add(Integer(1), Mul(Pow(e, Integer(-1)), f, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1))))
    rubi.add(rule100)

    pattern101 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x')))), SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))), Or(NegativeQ(Mul(Pow(Wildcard.dot('f'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('e'))))), PositiveQ(Mul(Pow(Wildcard.dot('d'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'))))))), (b, f, e, a, x, d, c)))
    rule101 = ReplacementRule(pattern101, lambda b, f, e, a, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticF(ArcSin(Mul(Pow(Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(2)), Integer(-1)), Sqrt(Add(a, Mul(b, x))))), Mul(Pow(d, Integer(-1)), f, Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(2)), Sqrt(Mul(Pow(b, Integer(2)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))))
    rubi.add(rule101)

    pattern102 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x')))), SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))), Or(NegQ(Mul(Pow(Wildcard.dot('f'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('e'))))), PosQ(Mul(Pow(Wildcard.dot('d'), Integer(-1)), Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'))))))), (b, f, e, a, x, d, c)))
    rule102 = ReplacementRule(pattern102, lambda b, f, e, a, x, d, c : Mul(Integer(2), Pow(b, Integer(-1)), EllipticF(ArcSin(Mul(Pow(Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(2)), Integer(-1)), Sqrt(Add(a, Mul(b, x))))), Mul(Pow(d, Integer(-1)), f, Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), Rt(Mul(Pow(d, Integer(-1)), Add(Mul(a, d), Mul(Integer(-1), b, c))), Integer(2)), Sqrt(Mul(Pow(b, Integer(2)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))))
    rubi.add(rule102)

    pattern103 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x')))), SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x')))), Not(And(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1))))))), (b, f, e, a, x, d, c)))
    rule103 = ReplacementRule(pattern103, lambda b, f, e, a, x, d, c : Mul(Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(Mul(b, c, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(b, d, x, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))))), Integer(-1)), Pow(Sqrt(Add(Mul(b, e, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(b, f, x, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))), Integer(-1))), x), Sqrt(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))), Sqrt(Mul(b, Add(e, Mul(f, x)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1))))
    rubi.add(rule103)

    pattern104 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/3)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(ZeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Integer(2), Wildcard.dot('b'), Wildcard.dot('d'), Wildcard.dot('e')))), (b, f, e, a, x, d, c)))
    rule104 = ReplacementRule(pattern104, lambda b, f, e, a, x, d, c : With(List(Set(q, Rt(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-2)), Add(Mul(Integer(-1), a, f), Mul(b, e))), Integer(3)))), Add(Mul(Integer(-1), Integer(1/2), Pow(q, Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), ArcTan(Add(Mul(Integer(2), q, Pow(Add(c, Mul(d, x)), Integer(2/3)), Pow(Add(e, Mul(f, x)), Integer(-1/3)), Pow(Sqrt(Integer(3)), Integer(-1))), Pow(Sqrt(Integer(3)), Integer(-1)))), Sqrt(Integer(3))), Mul(Integer(-1), Integer(1/2), Pow(q, Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Log(Add(a, Mul(b, x)))), Mul(Integer(3/4), Pow(q, Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Log(Add(Mul(q, Pow(Add(c, Mul(d, x)), Integer(2/3))), Mul(Integer(-1), Pow(Add(e, Mul(f, x)), Integer(1/3)))))))))
    rubi.add(rule104)

    pattern105 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/3)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/3))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(IntegerQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1)), ZeroQ(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Integer(2), Wildcard.dot('b'), Wildcard.dot('d'), Wildcard.dot('e'))))), (b, m, f, e, a, x, d, c)))
    rule105 = ReplacementRule(pattern105, lambda b, m, f, e, a, x, d, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Integer(2/3)), Pow(Add(e, Mul(f, x)), Integer(2/3)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Integer(1/6), f, Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Integer(-1/3)), Pow(Add(e, Mul(f, x)), Integer(-1/3)), Add(Mul(a, d, Add(Mul(Integer(3), m), Integer(1))), Mul(Integer(-1), Integer(3), b, c, Add(Mul(Integer(3), m), Integer(5))), Mul(Integer(-1), Integer(2), b, d, x, Add(Mul(Integer(3), m), Integer(7))))), x))))
    rubi.add(rule105)

    pattern106 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x')), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveQ(Wildcard.dot('a')), PositiveQ(Wildcard.dot('c')), ZeroQ(Add(Wildcard.dot('m'), Mul(Integer(-1), Wildcard.dot('n')))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, p, b, m, f, a, x, d, c)))
    rule106 = ReplacementRule(pattern106, lambda n, p, b, m, f, a, x, d, c : Int(Mul(Pow(Mul(f, x), p), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m)), x))
    rubi.add(rule106)

    pattern107 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x')), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Wildcard.dot('m'), Mul(Integer(-1), Wildcard.dot('n')))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, p, b, m, f, a, x, d, c)))
    rule107 = ReplacementRule(pattern107, lambda n, p, b, m, f, a, x, d, c : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), Mul(Integer(-1), FracPart(m))), Int(Mul(Pow(Mul(f, x), p), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, Integer(2)))), m)), x)))
    rubi.add(rule107)

    pattern108 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x')), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), PositiveIntegerQ(Add(Wildcard.dot('m'), Mul(Integer(-1), Wildcard.dot('n')))), ZeroQ(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))))), (n, p, b, m, f, a, x, d, c)))
    rule108 = ReplacementRule(pattern108, lambda n, p, b, m, f, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Mul(f, x), p), Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n)), Pow(Add(a, Mul(b, x)), Add(m, Mul(Integer(-1), n))), x), x))
    rubi.add(rule108)

    pattern109 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(Or(PositiveIntegerQ(Wildcard.dot('m')), NegativeIntegerQ(Wildcard.dot('m'), Wildcard.dot('n'))), (n, p, b, m, f, e, a, x, d, c)))
    rule109 = ReplacementRule(pattern109, lambda n, p, b, m, f, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule109)

    pattern110 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), NegativeIntegerQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(Not(And(SumSimplerQ(Wildcard.dot('n'), Integer(1)), NonzeroQ(Add(Wildcard.dot('n'), Integer(1))))), Not(And(SumSimplerQ(Wildcard.dot('p'), Integer(1)), NonzeroQ(Add(Wildcard.dot('p'), Integer(1)))))))), (n, p, b, m, f, e, a, x, d, c)))
    rule110 = ReplacementRule(pattern110, lambda n, p, b, m, f, e, a, x, d, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, Integer(1))), Mul(Integer(-1), b, d, f, x, Add(m, n, p, Integer(3))), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p, Integer(2))), Mul(d, e, Add(m, n, Integer(2)))))), x)), x))))
    rubi.add(rule110)

    pattern111 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Wildcard.dot('n')), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)))), (n, p, b, m, f, e, a, x, d, c)))
    rule111 = ReplacementRule(pattern111, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(e, Mul(f, x)), Add(Mul(Integer(-1), m), Integer(-1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), n), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Add(Mul(Integer(-1), n), Integer(-1))), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), n), Add(m, Integer(2)), Mul(Add(a, Mul(b, x)), Pow(Add(e, Mul(f, x)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(c, f), Mul(Integer(-1), d, e))))))
    rubi.add(rule111)

    pattern112 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('n'))), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)))), (n, p, b, m, f, e, a, x, d, c)))
    rule112 = ReplacementRule(pattern112, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(Mul(Add(c, Mul(d, x)), Pow(Add(e, Mul(f, x)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), a, f), Mul(b, e))), Mul(Integer(-1), n)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Hypergeometric2F1(Add(m, Integer(1)), Mul(Integer(-1), n), Add(m, Integer(2)), Mul(Add(a, Mul(b, x)), Pow(Add(e, Mul(f, x)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(c, f), Mul(Integer(-1), d, e))))))
    rubi.add(rule112)

    pattern113 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveQ(Wildcard.dot('c')), Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Or(IntegerQ(Wildcard.dot('p')), PositiveQ(Wildcard.dot('e')))), (n, p, b, m, f, e, x, d, c)))
    rule113 = ReplacementRule(pattern113, lambda n, p, b, m, f, e, x, d, c : Mul(Pow(b, Integer(-1)), Pow(c, n), Pow(e, p), Pow(Mul(b, x), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Integer(-1), Pow(c, Integer(-1)), d, x), Mul(Integer(-1), Pow(e, Integer(-1)), f, x))))
    rubi.add(rule113)

    pattern114 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), PositiveQ(Mul(Integer(-1), Pow(Wildcard.dot('b'), Integer(-1)), Pow(Wildcard.dot('c'), Integer(-1)), Wildcard.dot('d'))), Or(IntegerQ(Wildcard.dot('p')), PositiveQ(Mul(Wildcard.dot('d'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1)))))), (n, p, b, m, f, e, x, d, c)))
    rule114 = ReplacementRule(pattern114, lambda n, p, b, m, f, e, x, d, c : Mul(Pow(d, Integer(-1)), Pow(Mul(d, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))), Mul(Integer(-1), p)), Pow(Mul(Integer(-1), Pow(b, Integer(-1)), Pow(c, Integer(-1)), d), Mul(Integer(-1), m)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(n, Integer(1)), Integer(-1)), AppellF1(Add(n, Integer(1)), Mul(Integer(-1), m), Mul(Integer(-1), p), Add(n, Integer(2)), Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)), Mul(Integer(-1), f, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1))))))
    rubi.add(rule114)

    pattern115 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x')), Wildcard.dot('m')), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(PositiveQ(Wildcard.dot('c')))), (n, p, b, m, f, e, x, d, c)))
    rule115 = ReplacementRule(pattern115, lambda n, p, b, m, f, e, x, d, c : Mul(Pow(c, IntPart(n)), Pow(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)), Mul(Integer(-1), FracPart(n))), Pow(Add(c, Mul(d, x)), FracPart(n)), Int(Mul(Pow(Mul(b, x), m), Pow(Add(Integer(1), Mul(Pow(c, Integer(-1)), d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule115)

    pattern116 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Wildcard.dot('p')), Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), Not(And(SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('d'), Pow(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1))))))), (n, p, b, m, f, e, a, x, d, c)))
    rule116 = ReplacementRule(pattern116, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(b, Add(Mul(Integer(-1), p), Integer(-1))), Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), n)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), p), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Integer(-1), d, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), f, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))))
    rubi.add(rule116)

    pattern117 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Wildcard.dot('p')), Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))))), Not(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))))), (n, p, b, m, f, e, a, x, d, c)))
    rule117 = ReplacementRule(pattern117, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), IntPart(n))), Pow(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), FracPart(n))), Pow(Add(c, Mul(d, x)), FracPart(n)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(e, Mul(f, x)), p), Pow(Add(Mul(b, c, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(b, d, x, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))), n)), x)))
    rubi.add(rule117)

    pattern118 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(IntegerQ(Wildcard.dot('p'))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))), Not(And(SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('d'), Pow(Add(Mul(Wildcard.dot('a'), Wildcard.dot('d')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('d'), Pow(Add(Mul(Integer(-1), Wildcard.dot('c'), Wildcard.dot('f')), Mul(Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1)))))), Not(And(SimplerQ(Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x')))), PositiveQ(Mul(Wildcard.dot('f'), Pow(Add(Mul(Wildcard.dot('a'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))), PositiveQ(Mul(Wildcard.dot('f'), Pow(Add(Mul(Wildcard.dot('c'), Wildcard.dot('f')), Mul(Integer(-1), Wildcard.dot('d'), Wildcard.dot('e'))), Integer(-1))))))), (n, p, b, m, f, e, a, x, d, c)))
    rule118 = ReplacementRule(pattern118, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(b, Integer(-1)), Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), n)), Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Integer(-1), p)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), AppellF1(Add(m, Integer(1)), Mul(Integer(-1), n), Mul(Integer(-1), p), Add(m, Integer(2)), Mul(Integer(-1), d, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), f, Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))))))
    rubi.add(rule118)

    pattern119 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(IntegerQ(Wildcard.dot('p'))), PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))), Not(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('f')), Mul(Wildcard.dot('b'), Wildcard.dot('e'))), Integer(-1)))))), (n, p, b, m, f, e, a, x, d, c)))
    rule119 = ReplacementRule(pattern119, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Integer(-1), IntPart(p))), Pow(Mul(b, Add(e, Mul(f, x)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(Integer(-1), FracPart(p))), Pow(Add(e, Mul(f, x)), FracPart(p)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(Mul(b, e, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1))), Mul(b, f, x, Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)))), p)), x)))
    rubi.add(rule119)

    pattern120 = Pattern(Int(Mul(Pow(Add(Wildcard.dot('a'), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(Wildcard.dot('m'))), Not(IntegerQ(Wildcard.dot('n'))), Not(IntegerQ(Wildcard.dot('p'))), Not(SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))))), Not(SimplerQ(Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x'))), Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))))), Not(PositiveQ(Mul(Wildcard.dot('b'), Pow(Add(Mul(Integer(-1), Wildcard.dot('a'), Wildcard.dot('d')), Mul(Wildcard.dot('b'), Wildcard.dot('c'))), Integer(-1)))))), (n, p, b, m, f, e, a, x, d, c)))
    rule120 = ReplacementRule(pattern120, lambda n, p, b, m, f, e, a, x, d, c : Mul(Pow(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), IntPart(n))), Pow(Mul(b, Add(c, Mul(d, x)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(Integer(-1), FracPart(n))), Pow(Add(c, Mul(d, x)), FracPart(n)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(e, Mul(f, x)), p), Pow(Add(Mul(b, c, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1))), Mul(b, d, x, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)))), n)), x)))
    rubi.add(rule120)

    pattern121 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('p', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(Wildcard.dot('u'), Wildcard.dot('x')), NonzeroQ(Add(Wildcard.dot('u'), Mul(Integer(-1), Wildcard.dot('x'))))), (n, p, b, m, f, e, u, a, x, d, c)))
    rule121 = ReplacementRule(pattern121, lambda n, p, b, m, f, e, u, a, x, d, c : Mul(Pow(Coefficient(u, x, Integer(1)), Integer(-1)), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x, u)))
    rubi.add(rule121)

    pattern122 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(Or(PositiveIntegerQ(Wildcard.dot('m')), IntegersQ(Wildcard.dot('m'), Wildcard.dot('n'))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule122 = ReplacementRule(pattern122, lambda n, h, b, m, f, g, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Add(e, Mul(f, x)), Add(g, Mul(h, x))), x), x))
    rubi.add(rule122)

    pattern123 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2))), Not(And(SumSimplerQ(Wildcard.dot('n'), Integer(1)), Not(SumSimplerQ(Wildcard.dot('m'), Integer(1)))))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule123 = ReplacementRule(pattern123, lambda n, h, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-2)), Pow(d, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), Pow(a, Integer(2)), d, f, h, m), Mul(Integer(-1), a, b, Add(Mul(Integer(-1), c, f, h, Add(m, Integer(1))), Mul(d, Add(Mul(e, h), Mul(f, g))))), Mul(Pow(b, Integer(2)), d, e, g), Mul(b, f, h, x, Add(m, Integer(1)), Add(Mul(Integer(-1), a, d), Mul(b, c))))), Mul(Pow(b, Integer(-2)), Pow(d, Integer(-1)), Add(Mul(a, d, f, h, m), Mul(b, Add(Mul(Integer(-1), c, f, h, Add(m, Integer(2))), Mul(d, Add(Mul(e, h), Mul(f, g)))))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule123)

    pattern124 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(Less(Wildcard.dot('m'), Integer(-1)), Less(Wildcard.dot('n'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule124 = ReplacementRule(pattern124, lambda n, h, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(d, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-2)), Add(Mul(Pow(a, Integer(2)), c, d, f, h, Add(n, Integer(1))), Mul(a, b, Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1))), Mul(Integer(-1), c, d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(2))), Mul(Pow(d, Integer(2)), e, g, Add(m, Integer(1))))), Mul(Pow(b, Integer(2)), c, d, e, g, Add(n, Integer(1))), Mul(x, Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1))), Mul(Integer(-1), a, b, Pow(d, Integer(2)), Add(n, Integer(1)), Add(Mul(e, h), Mul(f, g))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1))), Mul(Integer(-1), c, d, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2))))))))), Mul(Integer(-1), Pow(b, Integer(-1)), Pow(d, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(n, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-2)), Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(Pow(n, Integer(2)), Mul(Integer(3), n), Integer(2))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(Pow(m, Integer(2)), Mul(Integer(3), m), Integer(2))), Mul(Integer(-1), c, d, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))), Mul(Pow(d, Integer(2)), e, g, Add(Pow(m, Integer(2)), Mul(m, Add(Mul(Integer(2), n), Integer(5))), Pow(n, Integer(2)), Mul(Integer(5), n), Integer(6)))))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1)))), x))))
    rubi.add(rule124)

    pattern125 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(Or(And(RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-2))), And(ZeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(3))), Not(And(RationalQ(Wildcard.dot('n')), Less(Wildcard.dot('n'), Integer(-2)))))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule125 = ReplacementRule(pattern125, lambda n, h, b, m, f, g, e, a, x, d, c : Add(Mul(Add(Mul(Integer(-1), Pow(b, Integer(-2)), d, Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(m, Integer(2)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-2)), Add(m, n, Integer(3)), Add(Mul(Pow(a, Integer(2)), d, f, h, Add(m, Mul(Integer(-1), n))), Mul(Integer(-1), a, b, Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(n, Integer(1)), Add(Mul(e, h), Mul(f, g))))), Mul(Pow(b, Integer(2)), Add(Mul(c, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g))), Mul(Integer(-1), d, e, g, Add(m, n, Integer(2))))))), Mul(Pow(b, Integer(-2)), f, h)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(2))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(Pow(b, Integer(-2)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(m, Integer(2)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-2)), Add(Mul(Integer(-1), Pow(a, Integer(3)), d, f, h, Add(n, Integer(2))), Mul(Integer(-1), Pow(a, Integer(2)), b, Add(Mul(c, f, h, m), Mul(Integer(-1), d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Integer(-1), a, Pow(b, Integer(2)), Add(Mul(c, Add(Mul(e, h), Mul(f, g))), Mul(d, e, g, Add(Mul(Integer(2), m), n, Integer(4))))), Mul(Pow(b, Integer(3)), c, e, g, Add(m, Integer(2))), Mul(b, x, Add(Mul(Pow(a, Integer(2)), d, f, h, Add(m, Mul(Integer(-1), n))), Mul(Integer(-1), a, b, Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(n, Integer(1)), Add(Mul(e, h), Mul(f, g))))), Mul(Pow(b, Integer(2)), Add(Mul(c, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g))), Mul(Integer(-1), d, e, g, Add(m, n, Integer(2)))))))))))
    rubi.add(rule125)

    pattern126 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(3))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(RationalQ(Wildcard.dot('m')), Inequality(Integer(-2), Wildcard.dot('L'), Wildcard.dot('m'), Wildcard.dot('L'), Integer(-1))))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule126 = ReplacementRule(pattern126, lambda n, h, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-2)), Pow(d, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(m, n, Integer(3)), Integer(-1)), Add(Mul(Pow(a, Integer(2)), d, f, h, Add(n, Integer(2))), Mul(a, b, Add(Mul(c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Pow(b, Integer(2)), d, e, g, Add(m, n, Integer(3))), Mul(b, f, h, x, Add(m, Integer(1)), Add(Mul(Integer(-1), a, d), Mul(b, c))))), Mul(Integer(-1), Pow(b, Integer(-2)), Pow(d, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(m, n, Integer(3)), Integer(-1)), Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1)), Add(n, Integer(2))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1)), Add(m, Integer(2))), Mul(Integer(-1), c, d, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2)), Add(m, n, Integer(3)))))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule126)

    pattern127 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(2))), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Integer(3)))), (n, h, b, m, f, g, e, a, x, d, c)))
    rule127 = ReplacementRule(pattern127, lambda n, h, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-2)), Pow(d, Integer(-2)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(m, n, Integer(2)), Integer(-1)), Pow(Add(m, n, Integer(3)), Integer(-1)), Add(Mul(Integer(-1), a, d, f, h, Add(n, Integer(2))), Mul(Integer(-1), b, c, f, h, Add(m, Integer(2))), Mul(b, d, f, h, x, Add(m, n, Integer(2))), Mul(b, d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Pow(b, Integer(-2)), Pow(d, Integer(-2)), Pow(Add(m, n, Integer(2)), Integer(-1)), Pow(Add(m, n, Integer(3)), Integer(-1)), Add(Mul(Pow(a, Integer(2)), Pow(d, Integer(2)), f, h, Add(n, Integer(1)), Add(n, Integer(2))), Mul(a, b, d, Add(n, Integer(1)), Add(Mul(Integer(2), c, f, h, Add(m, Integer(1))), Mul(Integer(-1), d, Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))))), Mul(Pow(b, Integer(2)), Add(Mul(Pow(c, Integer(2)), f, h, Add(m, Integer(1)), Add(m, Integer(2))), Mul(Integer(-1), c, d, Add(m, Integer(1)), Add(Mul(e, h), Mul(f, g)), Add(m, n, Integer(3))), Mul(Pow(d, Integer(2)), e, g, Add(m, n, Integer(2)), Add(m, n, Integer(3)))))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule127)

    pattern128 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(Or(PositiveIntegerQ(Wildcard.dot('n'), Wildcard.dot('p')), IntegersQ(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule128 = ReplacementRule(pattern128, lambda n, h, p, b, m, f, g, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Add(g, Mul(h, x))), x), x))
    rubi.add(rule128)

    pattern129 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), Greater(Wildcard.dot('n'), Integer(0)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n'))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule129 = ReplacementRule(pattern129, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g))), Mul(Integer(-1), Pow(b, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(m, Integer(1)), Add(Mul(Integer(-1), e, h), Mul(f, g))), Mul(d, x, Add(Mul(b, Add(m, Integer(1)), Add(Mul(Integer(-1), e, h), Mul(f, g))), Mul(f, Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(n, p, Integer(1))))), Mul(Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, n)))), x)), x))))
    rubi.add(rule129)

    pattern130 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(Greater(Wildcard.dot('n'), Integer(0)), Less(Wildcard.dot('m'), Integer(-1)), RationalQ(Wildcard.dot('m'), Wildcard.dot('n')), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p')))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule130 = ReplacementRule(pattern130, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g))), Mul(Integer(-1), Pow(b, Integer(-1)), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(m, Integer(1)), Add(Mul(Integer(-1), e, h), Mul(f, g))), Mul(d, x, Add(Mul(b, Add(m, Integer(1)), Add(Mul(Integer(-1), e, h), Mul(f, g))), Mul(f, Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(n, p, Integer(1))))), Mul(Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, n)))), x)), x))))
    rubi.add(rule130)

    pattern131 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule131 = ReplacementRule(pattern131, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Integer(-1), d, f, x, Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(m, n, p, Integer(3))), Mul(Add(m, Integer(1)), Add(Mul(a, d, f, g), Mul(b, c, e, h), Mul(Integer(-1), b, g, Add(Mul(c, f), Mul(d, e))))), Mul(Integer(-1), Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), x)), x))))
    rubi.add(rule131)

    pattern132 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(Wildcard.dot('m')), Less(Wildcard.dot('m'), Integer(-1)), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p')))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule132 = ReplacementRule(pattern132, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Integer(-1), d, f, x, Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(m, n, p, Integer(3))), Mul(Add(m, Integer(1)), Add(Mul(a, d, f, g), Mul(b, c, e, h), Mul(Integer(-1), b, g, Add(Mul(c, f), Mul(d, e))))), Mul(Integer(-1), Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), x)), x))))
    rubi.add(rule132)

    pattern133 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Wildcard.dot('m')), RationalQ(Wildcard.dot('m')), Greater(Wildcard.dot('m'), Integer(0)), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2)))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule133 = ReplacementRule(pattern133, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, n, p, Integer(2)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(m, n, p, Integer(2)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, Integer(2))), Mul(Integer(-1), h, Add(Mul(a, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(b, c, e, m))), Mul(x, Add(Mul(b, d, f, g, Add(m, n, p, Integer(2))), Mul(h, Add(Mul(a, d, f, m), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p, Integer(1))), Mul(d, e, Add(m, n, Integer(1)))))))))), x)), x))))
    rubi.add(rule133)

    pattern134 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(Wildcard.dot('m')), Greater(Wildcard.dot('m'), Integer(0)), NonzeroQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), IntegersQ(Mul(Integer(2), Wildcard.dot('m')), Mul(Integer(2), Wildcard.dot('n')), Mul(Integer(2), Wildcard.dot('p')))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule134 = ReplacementRule(pattern134, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, n, p, Integer(2)), Integer(-1))), Mul(Pow(d, Integer(-1)), Pow(f, Integer(-1)), Pow(Add(m, n, p, Integer(2)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, Integer(2))), Mul(Integer(-1), h, Add(Mul(a, Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1))))), Mul(b, c, e, m))), Mul(x, Add(Mul(b, d, f, g, Add(m, n, p, Integer(2))), Mul(h, Add(Mul(a, d, f, m), Mul(Integer(-1), b, Add(Mul(c, f, Add(m, p, Integer(1))), Mul(d, e, Add(m, n, Integer(1)))))))))), x)), x))))
    rubi.add(rule134)

    pattern135 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Wildcard.dot('m'), Integer(1))), NegativeIntegerQ(Add(Wildcard.dot('m'), Wildcard.dot('n'), Wildcard.dot('p'), Integer(2))), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(Not(And(SumSimplerQ(Wildcard.dot('n'), Integer(1)), NonzeroQ(Add(Wildcard.dot('n'), Integer(1))))), Not(And(SumSimplerQ(Wildcard.dot('p'), Integer(1)), NonzeroQ(Add(Wildcard.dot('p'), Integer(1)))))))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule135 = ReplacementRule(pattern135, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), Add(n, Integer(1))), Pow(Add(e, Mul(f, x)), Add(p, Integer(1))), Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g))), Mul(Pow(Add(m, Integer(1)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Pow(Add(Mul(Integer(-1), a, f), Mul(b, e)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Integer(-1), d, f, x, Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(m, n, p, Integer(3))), Mul(Add(m, Integer(1)), Add(Mul(a, d, f, g), Mul(b, c, e, h), Mul(Integer(-1), b, g, Add(Mul(c, f), Mul(d, e))))), Mul(Integer(-1), Add(Mul(Integer(-1), a, h), Mul(b, g)), Add(Mul(c, f, Add(p, Integer(1))), Mul(d, e, Add(n, Integer(1)))))), x)), x))))
    rubi.add(rule135)

    pattern136 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, p, b, f, g, e, a, x, d, c)))
    rule136 = ReplacementRule(pattern136, lambda h, p, b, f, g, e, a, x, d, c : Add(Mul(Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Integer(-1), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), c, h), Mul(d, g)), Int(Mul(Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule136)

    pattern137 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(True, (n, h, p, b, f, g, e, a, x, d, c)))
    rule137 = ReplacementRule(pattern137, lambda n, h, p, b, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), h, Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule137)

    pattern138 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('c'), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.dot('e'), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(SimplerQ(Add(Wildcard.dot('a'), Mul(Wildcard.dot('b'), Wildcard.dot('x'))), Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x')))), SimplerQ(Add(Wildcard.dot('c'), Mul(Wildcard.dot('d'), Wildcard.dot('x'))), Add(Wildcard.dot('e'), Mul(Wildcard.dot('f'), Wildcard.dot('x'))))), (h, b, f, g, e, a, x, d, c)))
    rule138 = ReplacementRule(pattern138, lambda h, b, f, g, e, a, x, d, c : Add(Mul(Pow(f, Integer(-1)), h, Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Sqrt(Add(e, Mul(f, x)))), x)), Mul(Pow(f, Integer(-1)), Add(Mul(Integer(-1), e, h), Mul(f, g)), Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1))), x))))
    rubi.add(rule138)

    pattern139 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x')))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(Not(SumSimplerQ(Wildcard.dot('n'), Integer(1))), Not(SumSimplerQ(Wildcard.dot('p'), Integer(1))))), (n, h, p, b, m, f, g, e, a, x, d, c)))
    rule139 = ReplacementRule(pattern139, lambda n, h, p, b, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), h, Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule139)

    pattern140 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('q'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(RationalQ(Wildcard.dot('p')), Less(Integer(0), Wildcard.dot('p'), Integer(1))), (h, p, b, q, f, g, e, a, x, d, c)))
    rule140 = ReplacementRule(pattern140, lambda h, p, b, q, f, g, e, a, x, d, c : Add(Mul(Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Add(g, Mul(h, x)), q)), x)), Mul(Integer(-1), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e)), Int(Mul(Pow(Add(c, Mul(d, x)), Integer(-1)), Pow(Add(e, Mul(f, x)), Add(p, Integer(-1))), Pow(Add(g, Mul(h, x)), q)), x))))
    rubi.add(rule140)

    pattern141 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule141 = ReplacementRule(pattern141, lambda h, b, f, g, e, a, x, d, c : Mul(Integer(-1), Integer(2), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), EllipticPi(Mul(Integer(-1), b, Pow(f, Integer(-1)), Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e))), ArcSin(Mul(Sqrt(Mul(Integer(-1), f, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)))), Sqrt(Add(c, Mul(d, x))))), Mul(Pow(f, Integer(-1)), h, Add(Mul(Integer(-1), c, f), Mul(d, e)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1)))), Pow(Sqrt(Mul(Integer(-1), f, Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)))), Integer(-1)), Sqrt(Mul(d, Add(e, Mul(f, x)), Pow(Add(Mul(Integer(-1), c, f), Mul(d, e)), Integer(-1)))), Sqrt(Mul(d, Add(g, Mul(h, x)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1)))), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))))
    rubi.add(rule141)

    pattern142 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(IntegerQ(Add(Wildcard.dot('n'), Integer(1/2))), (n, h, b, f, g, e, a, x, d, c)))
    rule142 = ReplacementRule(pattern142, lambda n, h, b, f, g, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Add(c, Mul(d, x)), Add(n, Integer(1/2)))), x), x))
    rubi.add(rule142)

    pattern143 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule143 = ReplacementRule(pattern143, lambda h, b, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-2)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x)), Mul(Pow(b, Integer(-2)), Int(Mul(Add(Mul(Integer(-1), a, f, h), Mul(b, e, h), Mul(b, f, g), Mul(b, f, h, x)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x))))
    rubi.add(rule143)

    pattern144 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule144 = ReplacementRule(pattern144, lambda h, b, f, g, e, a, x, d, c : Mul(Integer(-1), Integer(2), Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, h), Mul(b, g)), Integer(-1)), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(c, Mul(d, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1)))), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(e, Mul(f, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Subst(Int(Mul(Pow(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1))), Integer(1))), Integer(-1)), Pow(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1))), Integer(1))), Integer(-1))), x), x, Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Sqrt(Add(g, Mul(h, x)))))))
    rubi.add(rule144)

    pattern145 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-3/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule145 = ReplacementRule(pattern145, lambda h, b, f, g, e, a, x, d, c : Mul(Integer(-1), Integer(2), Add(a, Mul(b, x)), Pow(Add(Mul(Integer(-1), a, h), Mul(b, g)), Integer(-2)), Add(Mul(Integer(-1), c, h), Mul(d, g)), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(c, Mul(d, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1)))), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(e, Mul(f, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Subst(Int(Mul(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1))), Integer(1))), Pow(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1))), Integer(1))), Integer(-1))), x), x, Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Sqrt(Add(g, Mul(h, x)))))))
    rubi.add(rule145)

    pattern146 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule146 = ReplacementRule(pattern146, lambda h, b, f, g, e, a, x, d, c : Mul(Integer(2), Add(a, Mul(b, x)), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(c, Mul(d, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1)))), Sqrt(Mul(Pow(Add(a, Mul(b, x)), Integer(-1)), Add(e, Mul(f, x)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1)))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Subst(Int(Mul(Pow(Add(Mul(Integer(-1), b, Pow(x, Integer(2))), h), Integer(-1)), Pow(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Pow(Add(Mul(Integer(-1), c, h), Mul(d, g)), Integer(-1))), Integer(1))), Integer(-1)), Pow(Sqrt(Add(Mul(Pow(x, Integer(2)), Add(Mul(Integer(-1), a, f), Mul(b, e)), Pow(Add(Mul(Integer(-1), e, h), Mul(f, g)), Integer(-1))), Integer(1))), Integer(-1))), x), x, Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Sqrt(Add(g, Mul(h, x)))))))
    rubi.add(rule146)

    pattern147 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(-3/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule147 = ReplacementRule(pattern147, lambda h, b, f, g, e, a, x, d, c : Add(Mul(b, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Add(a, Mul(b, x)), Integer(-3/2)), Sqrt(Add(c, Mul(d, x))), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x)), Mul(Integer(-1), d, Pow(Add(Mul(Integer(-1), a, d), Mul(b, c)), Integer(-1)), Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x))))
    rubi.add(rule147)

    pattern148 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(1/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule148 = ReplacementRule(pattern148, lambda h, b, f, g, e, a, x, d, c : Add(Mul(Pow(h, Integer(-1)), Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Sqrt(Add(g, Mul(h, x)))), Mul(Integer(-1), Integer(1/2), Pow(f, Integer(-1)), Pow(h, Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e)), Add(Mul(Integer(-1), e, h), Mul(f, g)), Int(Mul(Pow(Add(e, Mul(f, x)), Integer(-3/2)), Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x)), Mul(Integer(1/2), Pow(f, Integer(-2)), Pow(h, Integer(-1)), Add(Mul(Integer(-1), c, f), Mul(d, e)), Add(Mul(Integer(-1), Integer(2), a, f, h), Mul(b, e, h), Mul(b, f, g)), Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x)), Mul(Integer(1/2), Pow(f, Integer(-2)), Pow(h, Integer(-1)), Add(Mul(a, d, f, h), Mul(Integer(-1), b, Add(Mul(Integer(-1), c, f, h), Mul(d, e, h), Mul(d, f, g)))), Int(Mul(Pow(Sqrt(Add(a, Mul(b, x))), Integer(-1)), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Sqrt(Add(e, Mul(f, x))), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x))))
    rubi.add(rule148)

    pattern149 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Integer(3/2)), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Integer(-1/2)), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Integer(-1/2))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (h, b, f, g, e, a, x, d, c)))
    rule149 = ReplacementRule(pattern149, lambda h, b, f, g, e, a, x, d, c : Add(Mul(b, Pow(d, Integer(-1)), Int(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x)), Mul(Integer(-1), Pow(d, Integer(-1)), Add(Mul(Integer(-1), a, d), Mul(b, c)), Int(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), Integer(-1)), Pow(Sqrt(Add(e, Mul(f, x))), Integer(-1)), Pow(Sqrt(Add(g, Mul(h, x))), Integer(-1))), x))))
    rubi.add(rule149)

    pattern150 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('q'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(IntegersQ(Wildcard.dot('p'), Wildcard.dot('q')), (n, h, p, b, q, m, f, g, e, a, x, d, c)))
    rule150 = ReplacementRule(pattern150, lambda n, h, p, b, q, m, f, g, e, a, x, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x))
    rubi.add(rule150)

    pattern151 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('q'))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveIntegerQ(Wildcard.dot('q')), Or(SumSimplerQ(Wildcard.dot('m'), Integer(1)), And(Not(SumSimplerQ(Wildcard.dot('n'), Integer(1))), Not(SumSimplerQ(Wildcard.dot('p'), Integer(1)))))), (n, h, p, b, q, m, f, g, e, a, x, d, c)))
    rule151 = ReplacementRule(pattern151, lambda n, h, p, b, q, m, f, g, e, a, x, d, c : Add(Mul(Pow(b, Integer(-1)), h, Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, Integer(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, Integer(-1)))), x)), Mul(Pow(b, Integer(-1)), Add(Mul(Integer(-1), a, h), Mul(b, g)), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, Integer(-1)))), x))))
    rubi.add(rule151)

    pattern152 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Wildcard.optional('q', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(True, (n, h, p, b, q, m, f, g, e, a, x, d, c)))
    rule152 = ReplacementRule(pattern152, lambda n, h, p, b, q, m, f, g, e, a, x, d, c : Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x))
    rubi.add(rule152)

    pattern153 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('m', Integer(1))), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('n', Integer(1))), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('p', Integer(1))), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('u'))), Wildcard.optional('q', Integer(1)))), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(Wildcard.dot('u'), Wildcard.dot('x')), NonzeroQ(Add(Wildcard.dot('u'), Mul(Integer(-1), Wildcard.dot('x'))))), (n, h, p, b, q, m, f, g, e, u, a, x, d, c)))
    rule153 = ReplacementRule(pattern153, lambda n, h, p, b, q, m, f, g, e, u, a, x, d, c : Mul(Pow(Coefficient(u, x, Integer(1)), Integer(-1)), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x, u)))
    rubi.add(rule153)

    pattern154 = Pattern(Int(Pow(Mul(Wildcard.optional('i', Integer(1)), Pow(Add(Wildcard.optional('a', Integer(0)), Mul(Wildcard.optional('b', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('m')), Pow(Add(Wildcard.optional('c', Integer(0)), Mul(Wildcard.optional('d', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('n')), Pow(Add(Wildcard.optional('e', Integer(0)), Mul(Wildcard.optional('f', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('p')), Pow(Add(Wildcard.optional('g', Integer(0)), Mul(Wildcard.optional('h', Integer(1)), Wildcard.dot('x'))), Wildcard.dot('q'))), Wildcard.dot('r')), Wildcard.dot('x')), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(True, (n, h, p, b, q, m, f, i, e, g, a, x, d, c, r)))
    rule154 = ReplacementRule(pattern154, lambda n, h, p, b, q, m, f, i, e, g, a, x, d, c, r : Mul(Pow(Mul(i, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), r), Pow(Add(a, Mul(b, x)), Mul(Integer(-1), m, r)), Pow(Add(c, Mul(d, x)), Mul(Integer(-1), n, r)), Pow(Add(e, Mul(f, x)), Mul(Integer(-1), p, r)), Pow(Add(g, Mul(h, x)), Mul(Integer(-1), q, r)), Int(Mul(Pow(Add(a, Mul(b, x)), Mul(m, r)), Pow(Add(c, Mul(d, x)), Mul(n, r)), Pow(Add(e, Mul(f, x)), Mul(p, r)), Pow(Add(g, Mul(h, x)), Mul(q, r))), x)))
    rubi.add(rule154)

    return rubi
