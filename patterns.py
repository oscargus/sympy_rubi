
from sympy.external import import_module
matchpy = import_module("matchpy")

if matchpy:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = matchpy.Wildcard, matchpy.Pattern, matchpy.ReplacementRule, matchpy.ManyToOneReplacer
else:
    Wildcard, Pattern, ReplacementRule, ManyToOneReplacer = object, object, object, object
    class Wildcard(object):
        def __init__(self):
            pass
        @staticmethod
        def dot(x):
            pass
        @staticmethod
        def symbol(x):
            pass
    class Pattern(object):
        def __init__(self, a, b):
            pass

from sympy.integrals.rubi.operation import (Int, Mul, Add, Pow, And, Or, ZeroQ, NonzeroQ, List, Log, RemoveContent, PositiveIntegerQ, NegativeIntegerQ, PositiveQ, IntegerQ, IntegersQ, PosQ, NegQ, FracPart, IntPart, RationalQ, Subst, LinearQ, Sqrt, NegativeQ, ArcCosh, Rational, Less, Not, Simplify, Denominator, Coefficient, SumSimplerQ, Equal, Unequal, SimplerQ, LessEqual, IntLinearcQ, Greater, GreaterEqual, FractionQ, ExpandIntegrand, With, Set, Hypergeometric2F1, TogetherSimplify, Inequality, PerfectSquareQ, EvenQ, OddQ, EqQ, NiceSqrtQ, IntQuadraticQ, If, LeafCount, QuadraticQ, LinearMatchQ, QuadraticMatchQ, AtomQ, SplitProduct, SumBaseQ, NegSumBaseQ, IntBinomialQ, LinearPairQ, SimplerSqrtQ, PseudoBinomialPairQ, Rt, PolynomialQ, BinomialQ, BinomialMatchQ, BinomialDegree, GeneralizedBinomialQ, GeneralizedBinomialMatchQ, TrinomialQ, TrinomialMatchQ, GeneralizedTrinomialQ, GeneralizedTrinomialMatchQ, GeneralizedTrinomialDegree, PolyQ, Coeff, SumQ, Expon)
from sympy.integrals.rubi.symbol import VariableSymbol, matchpyInteger
from sympy.integrals.rubi.constraint import cons, FreeQ
from sympy.utilities.decorator import doctest_depends_on

A, B, C, a, b, c, d, e, f, g, h, i, j, k, x, u, v, w, p, q, r, s, z = map(VariableSymbol, 'ABCabcdefghijkxuvwpqrsz')
n, m = map(VariableSymbol, 'nm')
zoo = VariableSymbol('zoo')
mn = VariableSymbol('mn')
non2 = VariableSymbol('non2')
a1 = VariableSymbol('a1')
a2 = VariableSymbol('a2')
b1 = VariableSymbol('b1')
b2 = VariableSymbol('b2')
c1 = VariableSymbol('c1')
c2 = VariableSymbol('c2')
d1 = VariableSymbol('d1')
d2 = VariableSymbol('d2')
e1 = VariableSymbol('e1')
e2 = VariableSymbol('e2')
f1 = VariableSymbol('f1')
f2 = VariableSymbol('f2')
n2 = VariableSymbol('n2')
n3 = VariableSymbol('n3')
Pq = VariableSymbol('Pq')
Px = VariableSymbol('Px')
jn = VariableSymbol('jn')

A_, B_, C_, a_, b_, c_, d_, e_, f_, g_, h_, i_, j_, k_, p_, q_, r_, s_, w_, z_ = map(Wildcard.dot, 'ABCabcdefghijkpqrswz')
n_, m_ = map(Wildcard.dot, 'nm')
mn_ = Wildcard.dot('mn')
non2_ = Wildcard.dot('non2')
a1_ = Wildcard.dot('a1')
a2_ = Wildcard.dot('a2')
b1_ = Wildcard.dot('b1')
b2_ = Wildcard.dot('b2')
c1_ = Wildcard.dot('c1')
c2_ = Wildcard.dot('c2')
d1_ = Wildcard.dot('d1')
d2_ = Wildcard.dot('d2')
n2_ = Wildcard.dot('n2')
e1_ = Wildcard.dot('e1')
e2_ = Wildcard.dot('e2')
f1_ = Wildcard.dot('f1')
f2_ = Wildcard.dot('f2')
n1_ = Wildcard.dot('n1')
n2_ = Wildcard.dot('n2')
n3_ = Wildcard.dot('n3')
Pq_ = Wildcard.dot('Pq')
Px_ = Wildcard.dot('Px')
jn_ = Wildcard.dot('jn')
x_, u_, v_ = map(Wildcard.symbol, 'xuv')

def rubi_object():
    rubi = ManyToOneReplacer()

    pattern1 = Pattern(Int(a, x_), FreeQ(a, x), cons(True, (x,)))
    rule1 = ReplacementRule(pattern1, lambda x : Mul(matchpyInteger(a), x))
    rubi.add(rule1)

    pattern2 = Pattern(Int(Pow(x_, matchpyInteger(-1)), x_), cons(True, (x,)))
    rule2 = ReplacementRule(pattern2, lambda x : Log(x))
    rubi.add(rule2)

    pattern3 = Pattern(Int(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), x_), FreeQ(m, x), cons(And(NonzeroQ(Add(m_, matchpyInteger(1)))), (m, x)))
    rule3 = ReplacementRule(pattern3, lambda m, x : Mul(Pow(x, Add(m, matchpyInteger(1))), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))
    rubi.add(rule3)

    pattern4 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule4 = ReplacementRule(pattern4, lambda b, x, a : Mul(Log(RemoveContent(Add(a, Mul(b, x)), x)), Pow(b, matchpyInteger(-1))))
    rubi.add(rule4)

    pattern5 = Pattern(Int(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(And(NonzeroQ(Add(m_, matchpyInteger(1)))), (b, m, x, a)))
    rule5 = ReplacementRule(pattern5, lambda b, m, x, a : Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1))))
    rubi.add(rule5)

    pattern6 = Pattern(Int(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), u_)), m_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, u, x, a, m)))
    rule6 = ReplacementRule(pattern6, lambda b, u, x, a, m : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Pow(Add(a, Mul(b, x)), m), x), x, u)))
    rubi.add(rule6)

    pattern7 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (b, x, a, d, c)))
    rule7 = ReplacementRule(pattern7, lambda b, x, a, d, c : Int(Mul(matchpyInteger(1), Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))
    rubi.add(rule7)

    pattern8 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule8 = ReplacementRule(pattern8, lambda b, x, a, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(c, Mul(d, x)), matchpyInteger(-1))), x)))))
    rubi.add(rule8)

    pattern9 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(m_, n_, matchpyInteger(2))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, x, n, a, d, m, c)))
    rule9 = ReplacementRule(pattern9, lambda b, x, n, a, d, m, c : Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))))
    rubi.add(rule9)

    pattern10 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveIntegerQ(Add(m_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1)))))), (b, x, a, d, m, c)))
    rule10 = ReplacementRule(pattern10, lambda b, x, a, d, m, c : Add(Mul(x, Pow(Add(a, Mul(b, x)), m), Mul(Pow(Add(c, Mul(d, x)), m), Pow(Add(Mul(matchpyInteger(2), m), matchpyInteger(1)), matchpyInteger(-1)))), Mul(matchpyInteger(2), a, c, Mul(m, Pow(Add(Mul(matchpyInteger(2), m), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), Add(m, matchpyInteger(-1)))), x))))
    rubi.add(rule10)

    pattern11 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (b, x, a, d, c)))
    rule11 = ReplacementRule(pattern11, lambda b, x, a, d, c : Mul(x, Pow(Mul(a, c, Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))), matchpyInteger(-1))))
    rubi.add(rule11)

    pattern12 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), NegativeIntegerQ(Add(m_, Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))))), (b, x, a, d, m, c)))
    rule12 = ReplacementRule(pattern12, lambda b, x, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), x), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(m, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(matchpyInteger(2), m), matchpyInteger(3)), Pow(Mul(matchpyInteger(2), a, c, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(m, matchpyInteger(1)))), x))))
    rubi.add(rule12)

    pattern13 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), Or(IntegerQ(m_), And(PositiveQ(a_), PositiveQ(c_)))), (b, x, a, d, m, c)))
    rule13 = ReplacementRule(pattern13, lambda b, x, a, d, m, c : Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), m), x))
    rubi.add(rule13)

    pattern14 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveQ(a_), ZeroQ(Add(a_, c_))), (b, x, a, d, c)))
    rule14 = ReplacementRule(pattern14, lambda b, x, a, d, c : Mul(ArcCosh(Mul(b, Mul(x, Pow(a, matchpyInteger(-1))))), Pow(b, matchpyInteger(-1))))
    rubi.add(rule14)

    pattern15 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_)))), (b, x, a, d, c)))
    rule15 = ReplacementRule(pattern15, lambda b, x, a, d, c : Mul(matchpyInteger(2), Subst(Int(Mul(matchpyInteger(1), Pow(Add(b, Mul(matchpyInteger(-1), Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), matchpyInteger(-1))))))
    rubi.add(rule15)

    pattern16 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), Not(IntegerQ(Mul(matchpyInteger(2), m_)))), (b, x, a, d, m, c)))
    rule16 = ReplacementRule(pattern16, lambda b, x, a, d, m, c : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Mul(Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), FracPart(m)), matchpyInteger(-1))), Int(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), m), x)))
    rubi.add(rule16)

    pattern17 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-5), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PosQ(Mul(b_, Mul(d_, Pow(Mul(a_, c_), matchpyInteger(-1)))))), (b, x, a, d, c)))
    rule17 = ReplacementRule(pattern17, lambda b, x, a, d, c : Add(Mul(matchpyInteger(-2), Pow(Mul(b, Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x))))
    rubi.add(rule17)

    pattern18 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-9), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PosQ(Mul(b_, Mul(d_, Pow(Mul(a_, c_), matchpyInteger(-1)))))), (b, x, a, d, c)))
    rule18 = ReplacementRule(pattern18, lambda b, x, a, d, c : Add(Mul(matchpyInteger(-4), Pow(Mul(matchpyInteger(5), b, Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Mul(matchpyInteger(5), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))))
    rubi.add(rule18)

    pattern19 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), IntegerQ(Add(m_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), IntegerQ(Add(n_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), Less(matchpyInteger(0), m_, n_)), (b, x, n, a, d, m, c)))
    rule19 = ReplacementRule(pattern19, lambda b, x, n, a, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, n, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(2), c, Mul(n, Pow(Add(m, n, matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1)))), x))))
    rubi.add(rule19)

    pattern20 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), IntegerQ(Add(m_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), IntegerQ(Add(n_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), Less(m_, n_, matchpyInteger(0))), (b, x, n, a, d, m, c)))
    rule20 = ReplacementRule(pattern20, lambda b, x, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1)))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a, d, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, n, matchpyInteger(2)), Pow(Mul(matchpyInteger(2), a, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule20)

    pattern21 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(m_), Or(Not(IntegerQ(n_)), And(ZeroQ(c_), LessEqual(Add(Mul(matchpyInteger(7), m_), Mul(matchpyInteger(4), n_)), matchpyInteger(0))), Less(Add(Mul(matchpyInteger(9), m_), Mul(matchpyInteger(5), Add(n_, matchpyInteger(1)))), matchpyInteger(0)), Greater(Add(m_, n_, matchpyInteger(2)), matchpyInteger(0)))), (b, x, n, a, d, m, c)))
    rule21 = ReplacementRule(pattern21, lambda b, x, n, a, d, m, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule21)

    pattern22 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(m_), IntegerQ(n_), Not(And(PositiveIntegerQ(n_), Less(Add(m_, n_, matchpyInteger(2)), matchpyInteger(0))))), (b, x, n, a, d, m, c)))
    rule22 = ReplacementRule(pattern22, lambda b, x, n, a, d, m, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x))
    rubi.add(rule22)

    pattern23 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(n_), Greater(n_, matchpyInteger(0))), (b, x, n, a, d, c)))
    rule23 = ReplacementRule(pattern23, lambda b, x, n, a, d, c : Add(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, n), matchpyInteger(-1))), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x))))
    rubi.add(rule23)

    pattern24 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(n_), Less(n_, matchpyInteger(-1))), (b, x, n, a, d, c)))
    rule24 = ReplacementRule(pattern24, lambda b, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Pow(Mul(Add(n, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Mul(b, Mul(Add(n, matchpyInteger(1)), Pow(Mul(Add(n, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x))))
    rubi.add(rule24)

    pattern25 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule25 = ReplacementRule(pattern25, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(q), Mul(matchpyInteger(-1), x)), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(q), matchpyInteger(2)), Mul(matchpyInteger(q), x), Pow(x, matchpyInteger(2))), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))))))
    rubi.add(rule25)

    pattern26 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule26 = ReplacementRule(pattern26, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Log(RemoveContent(Add(a, Mul(b, x)), x)), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(q), x), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(q), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(q), x)), Pow(x, matchpyInteger(2))), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))))))
    rubi.add(rule26)

    pattern27 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-2), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule27 = ReplacementRule(pattern27, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(matchpyInteger(2), b, Pow(matchpyInteger(q), matchpyInteger(2))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, Pow(matchpyInteger(q), matchpyInteger(2))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(q), Mul(matchpyInteger(-1), x)), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(q), matchpyInteger(2)), Mul(matchpyInteger(q), x), Pow(x, matchpyInteger(2))), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))))))
    rubi.add(rule27)

    pattern28 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-2), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule28 = ReplacementRule(pattern28, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Log(RemoveContent(Add(a, Mul(b, x)), x))), Pow(Mul(matchpyInteger(2), b, Pow(matchpyInteger(q), matchpyInteger(2))), matchpyInteger(-1))), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, Pow(matchpyInteger(q), matchpyInteger(2))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(q), x), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))), Mul(Mul(matchpyInteger(3), Pow(Mul(matchpyInteger(2), b, matchpyInteger(q)), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(q), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(q), x)), Pow(x, matchpyInteger(2))), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))))))
    rubi.add(rule28)

    pattern29 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(n_), Less(matchpyInteger(-1), n_, matchpyInteger(0))), (b, x, n, a, d, c)))
    rule29 = ReplacementRule(pattern29, lambda b, x, n, a, d, c : With(List(Set(matchpyInteger(p), Denominator(n))), Mul(matchpyInteger(p), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(p), Add(n, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(Mul(a, d), Mul(matchpyInteger(-1), Mul(b, c)), Mul(b, Pow(x, matchpyInteger(p)))), matchpyInteger(-1))), x), x, Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(p), matchpyInteger(-1))))))))
    rubi.add(rule29)

    pattern30 = Pattern(Int(Mul(Pow(x_, matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(Not(IntegerQ(n_))), (d, x, n, c)))
    rule30 = ReplacementRule(pattern30, lambda d, x, n, c : Mul(Mul(Mul(matchpyInteger(-1), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Pow(Mul(c, Add(n, matchpyInteger(1))), matchpyInteger(-1))), Hypergeometric2F1(matchpyInteger(1), Add(n, matchpyInteger(1)), Add(n, matchpyInteger(2)), Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))))))
    rubi.add(rule30)

    pattern31 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Not(IntegerQ(n_))), (b, x, n, a, d, c)))
    rule31 = ReplacementRule(pattern31, lambda b, x, n, a, d, c : Mul(Mul(Mul(matchpyInteger(-1), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Pow(Mul(Add(n, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Hypergeometric2F1(matchpyInteger(1), Add(n, matchpyInteger(1)), Add(n, matchpyInteger(2)), TogetherSimplify(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))))))
    rubi.add(rule31)

    pattern32 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0)), Not(And(IntegerQ(n_), Not(IntegerQ(m_)))), Not(And(IntegerQ(Add(m_, n_)), LessEqual(Add(m_, n_, matchpyInteger(2)), matchpyInteger(0)), Or(FractionQ(m_), GreaterEqual(Add(Mul(matchpyInteger(2), n_), m_, matchpyInteger(1)), matchpyInteger(0))))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (b, x, n, a, d, m, c)))
    rule32 = ReplacementRule(pattern32, lambda b, x, n, a, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, Mul(n, Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1)))), x)))))
    rubi.add(rule32)

    pattern33 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Not(And(Less(n_, matchpyInteger(-1)), Or(ZeroQ(a_), And(NonzeroQ(c_), Less(m_, n_), IntegerQ(n_))))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (b, x, n, a, d, m, c)))
    rule33 = ReplacementRule(pattern33, lambda b, x, n, a, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, Mul(Add(m, n, matchpyInteger(2)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule33)

    pattern34 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_, n_), Greater(n_, matchpyInteger(0)), Unequal(Add(m_, n_, matchpyInteger(1)), matchpyInteger(0)), Not(And(PositiveIntegerQ(m_), Or(Not(IntegerQ(n_)), Less(matchpyInteger(0), m_, n_)))), Not(And(IntegerQ(Add(m_, n_)), Less(Add(m_, n_, matchpyInteger(2)), matchpyInteger(0)))), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (b, x, n, a, d, m, c)))
    rule34 = ReplacementRule(pattern34, lambda b, x, n, a, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Mul(b, Add(m, n, matchpyInteger(1))), matchpyInteger(-1)))), Mul(n, Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(b, Add(m, n, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1)))), x))))
    rubi.add(rule34)

    pattern35 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(b_, d_)), PositiveQ(Add(a_, c_))), (b, x, a, d, c)))
    rule35 = ReplacementRule(pattern35, lambda b, x, a, d, c : Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(Mul(a, c), Mul(matchpyInteger(-1), Mul(b, Add(a, Mul(matchpyInteger(-1), c)), x)), Mul(matchpyInteger(-1), Mul(Pow(b, matchpyInteger(2)), Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))
    rubi.add(rule35)

    pattern36 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveQ(b_)), (b, x, a, d, c)))
    rule36 = ReplacementRule(pattern36, lambda b, x, a, d, c : Mul(Mul(matchpyInteger(2), Pow(Sqrt(b), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)), Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule36)

    pattern37 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(b_, Mul(matchpyInteger(-1), d_)))), (b, x, a, d, c)))
    rule37 = ReplacementRule(pattern37, lambda b, x, a, d, c : Mul(Mul(matchpyInteger(2), Pow(b, matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(c, Mul(matchpyInteger(-1), a), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), x, Sqrt(Add(a, Mul(b, x))))))
    rubi.add(rule37)

    pattern38 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule38 = ReplacementRule(pattern38, lambda b, x, a, d, c : Mul(matchpyInteger(2), Subst(Int(Mul(matchpyInteger(1), Pow(Add(b, Mul(matchpyInteger(-1), Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Pow(Sqrt(Add(c, Mul(d, x))), matchpyInteger(-1))))))
    rubi.add(rule38)

    pattern39 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), m_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_), Less(matchpyInteger(-1), m_, matchpyInteger(0)), LessEqual(matchpyInteger(3), Denominator(m_), matchpyInteger(4))), (b, x, a, d, m, c)))
    rule39 = ReplacementRule(pattern39, lambda b, x, a, d, m, c : Mul(Pow(Add(a, Mul(b, x)), m), Mul(Pow(Add(c, Mul(d, x)), m), Pow(Pow(Add(Mul(a, c), Mul(Add(Mul(b, c), Mul(a, d)), x), Mul(b, d, Pow(x, matchpyInteger(2)))), m), matchpyInteger(-1))), Int(Pow(Add(Mul(a, c), Mul(Add(Mul(b, c), Mul(a, d)), x), Mul(b, d, Pow(x, matchpyInteger(2)))), m), x)))
    rubi.add(rule39)

    pattern40 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-2), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PosQ(Mul(d_, Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule40 = ReplacementRule(pattern40, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(d, Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3))), Mul(matchpyInteger(q), Pow(d, matchpyInteger(-1))), ArcTan(Add(Mul(matchpyInteger(2), matchpyInteger(q), Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(3)), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1)))))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(q), Pow(Mul(matchpyInteger(2), d), matchpyInteger(-1))), Log(Add(c, Mul(d, x))))), Mul(matchpyInteger(-1), Mul(matchpyInteger(3), Mul(matchpyInteger(q), Pow(Mul(matchpyInteger(2), d), matchpyInteger(-1))), Log(Add(Mul(matchpyInteger(q), Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(-1)))), matchpyInteger(-1))))))))
    rubi.add(rule40)

    pattern41 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-2), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegQ(Mul(d_, Pow(b_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule41 = ReplacementRule(pattern41, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(b, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Sqrt(matchpyInteger(3)), Mul(matchpyInteger(q), Pow(d, matchpyInteger(-1))), ArcTan(Add(Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(q), Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(3)), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1)))))))), Mul(Mul(matchpyInteger(q), Pow(Mul(matchpyInteger(2), d), matchpyInteger(-1))), Log(Add(c, Mul(d, x)))), Mul(matchpyInteger(3), Mul(matchpyInteger(q), Pow(Mul(matchpyInteger(2), d), matchpyInteger(-1))), Log(Add(Mul(matchpyInteger(q), Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(-1)))), matchpyInteger(1)))))))
    rubi.add(rule41)

    pattern42 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(matchpyInteger(-1), m_, matchpyInteger(0)), Equal(Add(m_, n_, matchpyInteger(1)), matchpyInteger(0))), (b, x, n, a, d, m, c)))
    rule42 = ReplacementRule(pattern42, lambda b, x, n, a, d, m, c : With(List(Set(matchpyInteger(p), Denominator(m))), Mul(matchpyInteger(p), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(p), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(b, Mul(matchpyInteger(-1), Mul(d, Pow(x, matchpyInteger(p))))), matchpyInteger(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(p), matchpyInteger(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(p), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule42)

    pattern43 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(m_, n_), Less(matchpyInteger(-1), m_, matchpyInteger(0)), Less(matchpyInteger(-1), n_, matchpyInteger(0)), LessEqual(Denominator(n_), Denominator(m_)), IntLinearcQ(a_, b_, c_, d_, m_, n_, x_)), (b, x, n, a, d, m, c)))
    rule43 = ReplacementRule(pattern43, lambda b, x, n, a, d, m, c : With(List(Set(matchpyInteger(p), Denominator(m))), Mul(Mul(matchpyInteger(p), Pow(b, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(p), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(c, Mul(matchpyInteger(-1), Mul(a, Mul(d, Pow(b, matchpyInteger(-1))))), Mul(d, Mul(Pow(x, matchpyInteger(p)), Pow(b, matchpyInteger(-1))))), n)), x), x, Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(p), matchpyInteger(-1))))))))
    rubi.add(rule43)

    pattern44 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(Simplify(Add(m_, n_, matchpyInteger(2)))), NonzeroQ(Add(m_, matchpyInteger(1))), Or(SumSimplerQ(m_, matchpyInteger(1)), Not(SumSimplerQ(n_, matchpyInteger(1))))), (b, x, n, a, d, m, c)))
    rule44 = ReplacementRule(pattern44, lambda b, x, n, a, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, Mul(Simplify(Add(m, n, matchpyInteger(2))), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Simplify(Add(m, matchpyInteger(1)))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule44)

    pattern45 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Or(IntegerQ(n_), And(PositiveQ(c_), Not(And(ZeroQ(Add(n_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), ZeroQ(Add(Pow(c_, matchpyInteger(2)), Mul(matchpyInteger(-1), Pow(d_, matchpyInteger(2))))), PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Mul(b_, c_), matchpyInteger(-1))))))))), (b, x, n, d, m, c)))
    rule45 = ReplacementRule(pattern45, lambda b, x, n, d, m, c : Mul(Pow(c, n), Mul(Pow(Mul(b, x), Add(m, matchpyInteger(1))), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(-1), n), Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(x, Pow(c, matchpyInteger(-1)))))))
    rubi.add(rule45)

    pattern46 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(n_)), Or(IntegerQ(m_), PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Mul(b_, c_), matchpyInteger(-1)))))), (b, x, n, d, m, c)))
    rule46 = ReplacementRule(pattern46, lambda b, x, n, d, m, c : Mul(Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(d, Add(n, matchpyInteger(1)), Pow(Mul(Mul(matchpyInteger(-1), d), Pow(Mul(b, c), matchpyInteger(-1))), m)), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(-1), m), Add(n, matchpyInteger(1)), Add(n, matchpyInteger(2)), Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))))))
    rubi.add(rule46)

    pattern47 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_)), Not(PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Mul(b_, c_), matchpyInteger(-1))))), Or(And(RationalQ(m_), Not(And(ZeroQ(Add(n_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), ZeroQ(Add(Pow(c_, matchpyInteger(2)), Mul(matchpyInteger(-1), Pow(d_, matchpyInteger(2)))))))), Not(RationalQ(n_)))), (b, x, n, d, m, c)))
    rule47 = ReplacementRule(pattern47, lambda b, x, n, d, m, c : Mul(Pow(c, IntPart(n)), Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Pow(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))), FracPart(n)), matchpyInteger(-1))), Int(Mul(Pow(Mul(b, x), m), Pow(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))), n)), x)))
    rubi.add(rule47)

    pattern48 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_)), Not(PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Mul(b_, c_), matchpyInteger(-1)))))), (b, x, n, d, m, c)))
    rule48 = ReplacementRule(pattern48, lambda b, x, n, d, m, c : Mul(Pow(Mul(Mul(matchpyInteger(-1), b), Mul(c, Pow(d, matchpyInteger(-1)))), IntPart(m)), Mul(Pow(Mul(b, x), FracPart(m)), Pow(Pow(Mul(Mul(matchpyInteger(-1), d), Mul(x, Pow(c, matchpyInteger(-1)))), FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(Mul(Mul(matchpyInteger(-1), d), Mul(x, Pow(c, matchpyInteger(-1)))), m), Pow(Add(c, Mul(d, x)), n)), x)))
    rubi.add(rule48)

    pattern49 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), IntegerQ(n_)), (b, x, n, a, d, m, c)))
    rule49 = ReplacementRule(pattern49, lambda b, x, n, a, d, m, c : Mul(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), n), Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(Pow(b, Add(n, matchpyInteger(1))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(-1), n), Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))))))
    rubi.add(rule49)

    pattern50 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), Or(RationalQ(m_), Not(And(RationalQ(n_), PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))))))), (b, x, n, a, d, m, c)))
    rule50 = ReplacementRule(pattern50, lambda b, x, n, a, d, m, c : Mul(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(b, Add(m, matchpyInteger(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), n)), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(-1), n), Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))))))
    rubi.add(rule50)

    pattern51 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Not(IntegerQ(m_)), Not(IntegerQ(n_)), Or(RationalQ(m_), Not(SimplerQ(Add(n_, matchpyInteger(1)), Add(m_, matchpyInteger(1)))))), (b, x, n, a, d, m, c)))
    rule51 = ReplacementRule(pattern51, lambda b, x, n, a, d, m, c : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), FracPart(n))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))), n)), x)))
    rubi.add(rule51)

    pattern52 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), u_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), u_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(LinearQ(u_, x_), NonzeroQ(Coefficient(u_, x_, matchpyInteger(0)))), (b, u, x, n, a, d, m, c)))
    rule52 = ReplacementRule(pattern52, lambda b, u, x, n, a, d, m, c : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x), x, u)))
    rubi.add(rule52)

    pattern53 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_))), IntegerQ(m_)), (b, p, e, n, x, a, f, d, m, c)))
    rule53 = ReplacementRule(pattern53, lambda b, p, e, n, x, a, f, d, m, c : Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), m), Pow(Add(e, Mul(f, x)), p)), x))
    rubi.add(rule53)

    pattern54 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(2))), ZeroQ(Add(Mul(a_, d_, f_, Add(n_, p_, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, matchpyInteger(1))), Mul(c_, f_, Add(p_, matchpyInteger(1))))))))), (b, p, e, n, x, a, f, d, c)))
    rule54 = ReplacementRule(pattern54, lambda b, p, e, n, x, a, f, d, c : Mul(b, Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(n, p, matchpyInteger(2))), matchpyInteger(-1)))))
    rubi.add(rule54)

    pattern55 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', matchpyInteger(1)), x_), Wildcard.optional('n', matchpyInteger(1))), Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_), ZeroQ(Add(Mul(b_, e_), Mul(a_, f_))), Not(And(NegativeIntegerQ(Add(n_, p_, matchpyInteger(2))), Greater(Add(n_, Mul(matchpyInteger(2), p_)), matchpyInteger(0))))), (b, p, x, n, e, a, f, d)))
    rule55 = ReplacementRule(pattern55, lambda b, p, x, n, e, a, f, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Mul(d, x), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule55)

    pattern56 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('d', matchpyInteger(1)), x_), Wildcard.optional('n', matchpyInteger(1))), Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_), Or(NonzeroQ(Add(n_, matchpyInteger(1))), Equal(p_, matchpyInteger(1))), NonzeroQ(Add(Mul(b_, e_), Mul(a_, f_))), Or(Not(IntegerQ(n_)), Less(Add(Mul(matchpyInteger(9), p_), Mul(matchpyInteger(5), n_)), matchpyInteger(0)), GreaterEqual(Add(n_, p_, matchpyInteger(1)), matchpyInteger(0)), And(GreaterEqual(Add(n_, p_, matchpyInteger(2)), matchpyInteger(0)), RationalQ(a_, b_, d_, e_, f_)))), (b, p, x, n, e, a, f, d)))
    rule56 = ReplacementRule(pattern56, lambda b, p, x, n, e, a, f, d : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Mul(d, x), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule56)

    pattern57 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Or(NegativeIntegerQ(n_, p_), ZeroQ(Add(p_, matchpyInteger(-1))), And(PositiveIntegerQ(p_), Or(Not(IntegerQ(n_)), LessEqual(Add(Mul(matchpyInteger(9), p_), Mul(matchpyInteger(5), Add(n_, matchpyInteger(2)))), matchpyInteger(0)), GreaterEqual(Add(n_, p_, matchpyInteger(1)), matchpyInteger(0)), And(GreaterEqual(Add(n_, p_, matchpyInteger(2)), matchpyInteger(0)), RationalQ(a_, b_, c_, d_, e_, f_)))))), (b, p, e, n, x, a, f, d, c)))
    rule57 = ReplacementRule(pattern57, lambda b, p, e, n, x, a, f, d, c : Int(ExpandIntegrand(Mul(Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule57)

    pattern58 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(n_, p_, matchpyInteger(2))), NonzeroQ(Add(p_, matchpyInteger(1))), Not(And(SumSimplerQ(n_, matchpyInteger(1)), Not(SumSimplerQ(p_, matchpyInteger(1)))))), (b, p, e, n, x, a, f, d, c)))
    rule58 = ReplacementRule(pattern58, lambda b, p, e, n, x, a, f, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(f, Add(p, matchpyInteger(1)), Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e)))), matchpyInteger(-1)))), Mul(Mul(b, Pow(f, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule58)

    pattern59 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(2))), RationalQ(p_), Less(p_, matchpyInteger(-1)), Or(Not(And(RationalQ(n_), Less(n_, matchpyInteger(-1)))), IntegerQ(p_), Not(Or(IntegerQ(n_), Not(Or(ZeroQ(e_), Not(Or(ZeroQ(c_), Less(p_, n_))))))))), (b, p, e, n, x, a, f, d, c)))
    rule59 = ReplacementRule(pattern59, lambda b, p, e, n, x, a, f, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(f, Add(p, matchpyInteger(1)), Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d, f, Add(n, p, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1))))))), Pow(Mul(f, Add(p, matchpyInteger(1)), Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e)))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1)))), x)))))
    rubi.add(rule59)

    pattern60 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(2))), Not(RationalQ(p_)), SumSimplerQ(p_, matchpyInteger(1))), (b, p, e, n, x, a, f, d, c)))
    rule60 = ReplacementRule(pattern60, lambda b, p, e, n, x, a, f, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(f, Add(p, matchpyInteger(1)), Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d, f, Add(n, p, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1))))))), Pow(Mul(f, Add(p, matchpyInteger(1)), Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e)))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), Simplify(Add(p, matchpyInteger(1))))), x)))))
    rubi.add(rule60)

    pattern61 = Pattern(Int(Mul(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(2)))), (b, p, e, n, x, a, f, d, c)))
    rule61 = ReplacementRule(pattern61, lambda b, p, e, n, x, a, f, d, c : Add(Mul(b, Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(n, p, matchpyInteger(2))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(a, d, f, Add(n, p, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1))))))), Pow(Mul(d, f, Add(n, p, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule61)

    pattern62 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(2)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(2))), NonzeroQ(Add(n_, p_, matchpyInteger(3))), ZeroQ(Add(Mul(d_, f_, Add(n_, p_, matchpyInteger(2)), Add(Mul(Pow(a_, matchpyInteger(2)), d_, f_, Add(n_, p_, matchpyInteger(3))), Mul(matchpyInteger(-1), Mul(b_, Add(Mul(b_, c_, e_), Mul(a_, Add(Mul(d_, e_, Add(n_, matchpyInteger(1))), Mul(c_, f_, Add(p_, matchpyInteger(1)))))))))), Mul(matchpyInteger(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, matchpyInteger(1))), Mul(c_, f_, Add(p_, matchpyInteger(1)))), Add(Mul(a_, d_, f_, Add(n_, p_, matchpyInteger(4))), Mul(matchpyInteger(-1), Mul(b_, Add(Mul(d_, e_, Add(n_, matchpyInteger(2))), Mul(c_, f_, Add(p_, matchpyInteger(2)))))))))))), (b, p, e, n, x, a, f, d, c)))
    rule62 = ReplacementRule(pattern62, lambda b, p, e, n, x, a, f, d, c : Mul(b, Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Mul(Add(Mul(matchpyInteger(2), a, d, f, Add(n, p, matchpyInteger(3))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(n, matchpyInteger(2))), Mul(c, f, Add(p, matchpyInteger(2)))))), Mul(b, d, f, Add(n, p, matchpyInteger(2)), x)), Pow(Mul(Pow(d, matchpyInteger(2)), Pow(f, matchpyInteger(2)), Add(n, p, matchpyInteger(2)), Add(n, p, matchpyInteger(3))), matchpyInteger(-1)))))
    rubi.add(rule62)

    pattern63 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', matchpyInteger(1)), x_), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(-1))), Not(RationalQ(p_)), Not(PositiveIntegerQ(m_)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(2)))), (b, p, x, n, a, f, d, m, c)))
    rule63 = ReplacementRule(pattern63, lambda b, p, x, n, a, f, d, m, c : Add(Mul(a, Int(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), p)), x)), Mul(Mul(b, Pow(f, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule63)

    pattern64 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(IntegerQ(p_)), (b, p, e, x, a, f, d, c)))
    rule64 = ReplacementRule(pattern64, lambda b, p, e, x, a, f, d, c : Int(ExpandIntegrand(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), matchpyInteger(-1))), x), x))
    rubi.add(rule64)

    pattern65 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Less(matchpyInteger(0), p_, matchpyInteger(1))), (b, p, e, x, a, f, d, c)))
    rule65 = ReplacementRule(pattern65, lambda b, p, e, x, a, f, d, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), matchpyInteger(-1))), x)))))
    rubi.add(rule65)

    pattern66 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Greater(p_, matchpyInteger(1))), (b, p, e, x, a, f, d, c)))
    rule66 = ReplacementRule(pattern66, lambda b, p, e, x, a, f, d, c : Add(Mul(f, Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Pow(Mul(b, d, Add(p, matchpyInteger(-1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, d), matchpyInteger(-1))), Int(Mul(Add(Mul(b, d, Pow(e, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(a, c, Pow(f, matchpyInteger(2)))), Mul(f, Add(Mul(matchpyInteger(2), b, d, e), Mul(matchpyInteger(-1), Mul(b, c, f)), Mul(matchpyInteger(-1), Mul(a, d, f))), x)), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-2))), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), matchpyInteger(-1)))), x))))
    rubi.add(rule66)

    pattern67 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, p, e, x, a, f, d, c)))
    rule67 = ReplacementRule(pattern67, lambda b, p, e, x, a, f, d, c : Add(Mul(f, Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(p, matchpyInteger(1)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), matchpyInteger(-1))), Int(Mul(Add(Mul(b, d, e), Mul(matchpyInteger(-1), Mul(b, c, f)), Mul(matchpyInteger(-1), Mul(a, d, f)), Mul(matchpyInteger(-1), Mul(b, d, f, x))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(a, Mul(b, x)), Add(c, Mul(d, x))), matchpyInteger(-1)))), x))))
    rubi.add(rule67)

    pattern68 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(Not(IntegerQ(p_))), (b, p, e, x, a, f, d, c)))
    rule68 = ReplacementRule(pattern68, lambda b, p, e, x, a, f, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(c, Mul(d, x)), matchpyInteger(-1))), x)))))
    rubi.add(rule68)

    pattern69 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveIntegerQ(n_), FractionQ(p_), Less(p_, matchpyInteger(-1))), (b, p, e, n, x, a, f, d, c)))
    rule69 = ReplacementRule(pattern69, lambda b, p, e, n, x, a, f, d, c : Int(ExpandIntegrand(Pow(Add(e, Mul(f, x)), FractionalPart(p)), Mul(Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), IntegerPart(p)), Pow(Add(a, Mul(b, x)), matchpyInteger(-1)))), x), x))
    rubi.add(rule69)

    pattern70 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(IntegersQ(m_, n_), Or(IntegerQ(p_), And(Greater(m_, matchpyInteger(0)), GreaterEqual(n_, matchpyInteger(-1))))), (b, p, e, n, x, a, f, d, m, c)))
    rule70 = ReplacementRule(pattern70, lambda b, p, e, n, x, a, f, d, m, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule70)

    pattern71 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(2)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(And(RationalQ(n_), Less(n_, matchpyInteger(-1))), And(ZeroQ(Add(n_, p_, matchpyInteger(3))), NonzeroQ(Add(n_, matchpyInteger(1))), Or(SumSimplerQ(n_, matchpyInteger(1)), Not(SumSimplerQ(p_, matchpyInteger(1))))))), (b, p, e, n, x, a, f, d, c)))
    rule71 = ReplacementRule(pattern71, lambda b, p, e, n, x, a, f, d, c : Add(Mul(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Pow(d, matchpyInteger(2)), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Add(n, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(Pow(d, matchpyInteger(2)), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Add(n, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, matchpyInteger(2)), Pow(d, matchpyInteger(2)), f, Add(n, p, matchpyInteger(2))), Mul(Pow(b, matchpyInteger(2)), c, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1))))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), a, b, d, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))), Mul(matchpyInteger(-1), Mul(Pow(b, matchpyInteger(2)), d, Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Add(n, matchpyInteger(1)), x))), x)), x)))))
    rubi.add(rule71)

    pattern72 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(2)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(n_, p_, matchpyInteger(3)))), (b, p, e, n, x, a, f, d, c)))
    rule72 = ReplacementRule(pattern72, lambda b, p, e, n, x, a, f, d, c : Add(Mul(b, Add(a, Mul(b, x)), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(n, p, matchpyInteger(3))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(d, f, Add(n, p, matchpyInteger(3))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, matchpyInteger(2)), d, f, Add(n, p, matchpyInteger(3))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(b, c, e), Mul(a, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))))), Mul(b, Add(Mul(a, d, f, Add(n, p, matchpyInteger(4))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(n, matchpyInteger(2))), Mul(c, f, Add(p, matchpyInteger(2))))))), x)), x)), x))))
    rubi.add(rule72)

    pattern73 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-2), matchpyInteger(3))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, e, x, a, f, d, c)))
    rule73 = ReplacementRule(pattern73, lambda b, e, x, a, f, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3))), matchpyInteger(q), Mul(ArcTan(Add(Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1))), Mul(matchpyInteger(2), matchpyInteger(q), Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(3)), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1)))))), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))), Mul(matchpyInteger(q), Mul(Log(Add(e, Mul(f, x))), Pow(Mul(matchpyInteger(2), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(matchpyInteger(3), matchpyInteger(q), Mul(Log(Add(Mul(matchpyInteger(q), Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), Mul(matchpyInteger(-1), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))), Pow(Mul(matchpyInteger(2), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), matchpyInteger(-1))))))))
    rubi.add(rule73)

    pattern74 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(matchpyInteger(2), b_, d_, e_), Mul(matchpyInteger(-1), Mul(f_, Add(Mul(b_, c_), Mul(a_, d_))))))), (b, e, x, a, f, d, c)))
    rule74 = ReplacementRule(pattern74, lambda b, e, x, a, f, d, c : Mul(b, f, Subst(Int(Mul(matchpyInteger(1), Pow(Add(Mul(d, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(2))), Mul(b, Pow(f, matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))))))
    rubi.add(rule74)

    pattern75 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(m_, n_, matchpyInteger(1))), RationalQ(m_, n_), Less(matchpyInteger(-1), m_, matchpyInteger(0)), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_)))), (b, e, x, n, a, f, d, m, c)))
    rule75 = ReplacementRule(pattern75, lambda b, e, x, n, a, f, d, m, c : With(List(Set(matchpyInteger(q), Denominator(m))), Mul(matchpyInteger(q), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(q), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)), Mul(matchpyInteger(-1), Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(x, matchpyInteger(q))))), matchpyInteger(-1))), x), x, Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1)))), Pow(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule75)

    pattern76 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, matchpyInteger(2))), RationalQ(n_), Greater(n_, matchpyInteger(0)), Not(And(SumSimplerQ(p_, matchpyInteger(1)), Not(SumSimplerQ(m_, matchpyInteger(1)))))), (b, p, e, n, x, a, f, d, m, c)))
    rule76 = ReplacementRule(pattern76, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(n, Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), p)), x)))))
    rubi.add(rule76)

    pattern77 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Simplify(Add(m_, n_, p_, matchpyInteger(3)))), ZeroQ(Add(Mul(a_, d_, f_, Add(m_, matchpyInteger(1))), Mul(b_, c_, f_, Add(n_, matchpyInteger(1))), Mul(b_, d_, e_, Add(p_, matchpyInteger(1))))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, p, e, n, x, a, f, d, m, c)))
    rule77 = ReplacementRule(pattern77, lambda b, p, e, n, x, a, f, d, m, c : Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))))
    rubi.add(rule77)

    pattern78 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Simplify(Add(m_, n_, p_, matchpyInteger(3)))), Or(And(RationalQ(m_), Less(m_, matchpyInteger(-1))), SumSimplerQ(m_, matchpyInteger(1)))), (b, p, e, n, x, a, f, d, m, c)))
    rule78 = ReplacementRule(pattern78, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(a, d, f, Add(m, matchpyInteger(1))), Mul(b, c, f, Add(n, matchpyInteger(1))), Mul(b, d, e, Add(p, matchpyInteger(1)))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule78)

    pattern79 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(m_, n_, p_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0)), Greater(p_, matchpyInteger(0)), Or(IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (b, p, e, n, x, a, f, d, m, c)))
    rule79 = ReplacementRule(pattern79, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), p), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Simp(Add(Mul(d, e, n), Mul(c, f, p), Mul(d, f, Add(n, p), x)), x)), x)))))
    rubi.add(rule79)

    pattern80 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(RationalQ(m_, n_, p_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(1)), Or(IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (b, p, e, n, x, a, f, d, m, c)))
    rule80 = ReplacementRule(pattern80, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-2))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, Add(Mul(d, e, Add(n, matchpyInteger(-1))), Mul(c, f, Add(p, matchpyInteger(1))))), Mul(b, c, Add(Mul(d, e, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(c, f, Add(m, p, matchpyInteger(2)))))), Mul(d, Add(Mul(a, d, f, Add(n, p)), Mul(b, Add(Mul(d, e, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(c, f, Add(m, n, p, matchpyInteger(1))))))), x)), x)), x))))
    rubi.add(rule80)

    pattern81 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), cons(And(RationalQ(m_, n_, p_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0)), Or(IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_)), IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_)))), (b, p, e, n, x, a, f, d, m, c)))
    rule81 = ReplacementRule(pattern81, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(d, e, n), Mul(c, f, Add(m, p, matchpyInteger(2))), Mul(d, f, Add(m, n, p, matchpyInteger(2)), x)), x)), x)))))
    rubi.add(rule81)

    pattern82 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, matchpyInteger(1)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(1))), IntegerQ(m_)), (b, p, e, n, x, a, f, d, m, c)))
    rule82 = ReplacementRule(pattern82, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, matchpyInteger(2)), d, f, Add(m, n, p, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(b, c, e, Add(m, matchpyInteger(-1))), Mul(a, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))))), Mul(b, Add(Mul(a, d, f, Add(Mul(matchpyInteger(2), m), n, p)), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n)), Mul(c, f, Add(m, p)))))), x)), x)), x))))
    rubi.add(rule82)

    pattern83 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(m_, n_, p_), Greater(m_, matchpyInteger(0)), Greater(n_, matchpyInteger(0)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(1))), Or(IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_)), Or(IntegersQ(m_, Add(n_, p_)), IntegersQ(p_, Add(m_, n_))))), (b, p, e, n, x, a, f, d, m, c)))
    rule83 = ReplacementRule(pattern83, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(c, m, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Mul(a, n, Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), Mul(Add(Mul(d, m, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Mul(b, n, Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))))), x)), x)), x)))))
    rubi.add(rule83)

    pattern84 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, matchpyInteger(1)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(1))), IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_))), (b, p, e, n, x, a, f, d, m, c)))
    rule84 = ReplacementRule(pattern84, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-2))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Pow(a, matchpyInteger(2)), d, f, Add(m, n, p, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(b, c, e, Add(m, matchpyInteger(-1))), Mul(a, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))))), Mul(b, Add(Mul(a, d, f, Add(Mul(matchpyInteger(2), m), n, p)), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n)), Mul(c, f, Add(m, p)))))), x)), x)), x))))
    rubi.add(rule84)

    pattern85 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, matchpyInteger(-1)), IntegerQ(m_), Or(IntegerQ(n_), IntegersQ(Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_)))), (b, p, e, n, x, a, f, d, m, c)))
    rule85 = ReplacementRule(pattern85, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n, matchpyInteger(2))), Mul(c, f, Add(m, p, matchpyInteger(2)))))), Mul(matchpyInteger(-1), Mul(b, d, f, Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule85)

    pattern86 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, matchpyInteger(-1)), IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_))), (b, p, e, n, x, a, f, d, m, c)))
    rule86 = ReplacementRule(pattern86, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n, matchpyInteger(2))), Mul(c, f, Add(m, p, matchpyInteger(2)))))), Mul(matchpyInteger(-1), Mul(b, d, f, Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule86)

    pattern87 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Simplify(Add(m_, n_, matchpyInteger(1)))), Or(And(RationalQ(m_), Greater(m_, matchpyInteger(0))), And(Not(RationalQ(m_)), Or(SumSimplerQ(m_, matchpyInteger(-1)), Not(SumSimplerQ(n_, matchpyInteger(-1))))))), (b, e, x, n, a, f, d, m, c)))
    rule87 = ReplacementRule(pattern87, lambda b, e, x, n, a, f, d, m, c : Add(Mul(Mul(b, Pow(f, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), n)), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(f, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), matchpyInteger(-1)))), x)))))
    rubi.add(rule87)

    pattern88 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(Mul(matchpyInteger(-1), f_), Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1))))), (b, e, x, a, f, d, c)))
    rule88 = ReplacementRule(pattern88, lambda b, e, x, a, f, d, c : Mul(matchpyInteger(-4), Subst(Int(Mul(Pow(x, matchpyInteger(2)), Pow(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(4))))), Sqrt(Add(c, Mul(matchpyInteger(-1), Mul(d, Mul(e, Pow(f, matchpyInteger(-1))))), Mul(d, Mul(Pow(x, matchpyInteger(4)), Pow(f, matchpyInteger(-1))))))), matchpyInteger(-1))), x), x, Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))))))
    rubi.add(rule88)

    pattern89 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(PositiveQ(Mul(Mul(matchpyInteger(-1), f_), Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1)))))), (b, e, x, a, f, d, c)))
    rule89 = ReplacementRule(pattern89, lambda b, e, x, a, f, d, c : Mul(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))))), Pow(Sqrt(Add(c, Mul(d, x))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(Mul(Mul(matchpyInteger(-1), c), Mul(f, Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, f, Mul(x, Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))))))), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule89)

    pattern90 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(Mul(matchpyInteger(-1), f_), Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1))))), (b, e, x, a, f, d, c)))
    rule90 = ReplacementRule(pattern90, lambda b, e, x, a, f, d, c : Mul(matchpyInteger(-4), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(4))))), Sqrt(Add(c, Mul(matchpyInteger(-1), Mul(d, Mul(e, Pow(f, matchpyInteger(-1))))), Mul(d, Mul(Pow(x, matchpyInteger(4)), Pow(f, matchpyInteger(-1))))))), matchpyInteger(-1))), x), x, Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))))))
    rubi.add(rule90)

    pattern91 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(PositiveQ(Mul(Mul(matchpyInteger(-1), f_), Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1)))))), (b, e, x, a, f, d, c)))
    rule91 = ReplacementRule(pattern91, lambda b, e, x, a, f, d, c : Mul(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))))), Pow(Sqrt(Add(c, Mul(d, x))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(Mul(Mul(matchpyInteger(-1), c), Mul(f, Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, f, Mul(x, Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))))))), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule91)

    pattern92 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_)))), PositiveQ(c_), PositiveQ(e_), Not(NegativeQ(Mul(Mul(matchpyInteger(-1), b_), Pow(d_, matchpyInteger(-1)))))), (b, x, e, f, d, c)))
    rule92 = ReplacementRule(pattern92, lambda b, x, e, f, d, c : Mul(matchpyInteger(2), Mul(Sqrt(e), Pow(b, matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), EllipticE(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), matchpyInteger(-1)))))))
    rubi.add(rule92)

    pattern93 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_)))), PositiveQ(c_), PositiveQ(e_), NegativeQ(Mul(Mul(matchpyInteger(-1), b_), Pow(d_, matchpyInteger(-1))))), (b, x, e, f, d, c)))
    rule93 = ReplacementRule(pattern93, lambda b, x, e, f, d, c : Mul(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), x)), Pow(Sqrt(Mul(b, x)), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), x)), Sqrt(Add(c, Mul(d, x)))), matchpyInteger(-1))), x)))
    rubi.add(rule93)

    pattern94 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_)))), Not(And(PositiveQ(c_), PositiveQ(e_)))), (b, x, e, f, d, c)))
    rule94 = ReplacementRule(pattern94, lambda b, x, e, f, d, c : Mul(Sqrt(Add(e, Mul(f, x))), Mul(Sqrt(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1)))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(matchpyInteger(1), Mul(f, Mul(x, Pow(e, matchpyInteger(-1))))))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(matchpyInteger(1), Mul(f, Mul(x, Pow(e, matchpyInteger(-1)))))), Pow(Mul(Sqrt(Mul(b, x)), Sqrt(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))))), matchpyInteger(-1))), x)))
    rubi.add(rule94)

    pattern95 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))), Not(NegativeQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Pow(d_, matchpyInteger(-1))))), Not(And(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))), PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1)))), Not(NegativeQ(Mul(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Pow(b_, matchpyInteger(-1)))))))), (b, e, x, a, f, d, c)))
    rule95 = ReplacementRule(pattern95, lambda b, e, x, a, f, d, c : Mul(Mul(matchpyInteger(2), Pow(b, matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), EllipticE(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), matchpyInteger(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))))))
    rubi.add(rule95)

    pattern96 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))))), Not(NegativeQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Pow(d_, matchpyInteger(-1)))))), (b, e, x, a, f, d, c)))
    rule96 = ReplacementRule(pattern96, lambda b, e, x, a, f, d, c : Mul(Sqrt(Add(e, Mul(f, x))), Mul(Sqrt(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))))), matchpyInteger(-1))), x)))
    rubi.add(rule96)

    pattern97 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(c_), PositiveQ(e_), Or(PositiveQ(Mul(Mul(matchpyInteger(-1), b_), Pow(d_, matchpyInteger(-1)))), NegativeQ(Mul(Mul(matchpyInteger(-1), b_), Pow(f_, matchpyInteger(-1)))))), (b, x, e, f, d, c)))
    rule97 = ReplacementRule(pattern97, lambda b, x, e, f, d, c : Mul(Mul(matchpyInteger(2), Pow(Mul(b, Sqrt(e)), matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), EllipticF(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), matchpyInteger(-1)))))))
    rubi.add(rule97)

    pattern98 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(c_), PositiveQ(e_), Or(PosQ(Mul(Mul(matchpyInteger(-1), b_), Pow(d_, matchpyInteger(-1)))), NegQ(Mul(Mul(matchpyInteger(-1), b_), Pow(f_, matchpyInteger(-1)))))), (b, x, e, f, d, c)))
    rule98 = ReplacementRule(pattern98, lambda b, x, e, f, d, c : Mul(Mul(matchpyInteger(2), Pow(Mul(b, Sqrt(e)), matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), EllipticF(ArcSin(Mul(Sqrt(Mul(b, x)), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(d, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1)))), Mul(c, Mul(f, Pow(Mul(d, e), matchpyInteger(-1)))))))
    rubi.add(rule98)

    pattern99 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(c_), PositiveQ(e_)))), (b, x, e, f, d, c)))
    rule99 = ReplacementRule(pattern99, lambda b, x, e, f, d, c : Mul(Sqrt(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1)))))), Mul(Sqrt(Add(matchpyInteger(1), Mul(f, Mul(x, Pow(e, matchpyInteger(-1)))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Mul(b, x)), Sqrt(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1)))))), Sqrt(Add(matchpyInteger(1), Mul(f, Mul(x, Pow(e, matchpyInteger(-1))))))), matchpyInteger(-1))), x)))
    rubi.add(rule99)

    pattern100 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), Or(PositiveQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Pow(d_, matchpyInteger(-1)))), NegativeQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_)))), Pow(f_, matchpyInteger(-1)))))), (b, x, e, a, f, d, c)))
    rule100 = ReplacementRule(pattern100, lambda b, x, e, a, f, d, c : Mul(Mul(matchpyInteger(2), Pow(b, matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Mul(Pow(b, matchpyInteger(2)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), EllipticF(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), matchpyInteger(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))))))
    rubi.add(rule100)

    pattern101 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), Or(PosQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Pow(d_, matchpyInteger(-1)))), NegQ(Mul(Mul(matchpyInteger(-1), Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_)))), Pow(f_, matchpyInteger(-1)))))), (b, x, e, a, f, d, c)))
    rule101 = ReplacementRule(pattern101, lambda b, x, e, a, f, d, c : Mul(Mul(matchpyInteger(2), Pow(b, matchpyInteger(-1))), Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Mul(Pow(b, matchpyInteger(2)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), EllipticF(ArcSin(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Rt(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(d, matchpyInteger(-1))), matchpyInteger(2)), matchpyInteger(-1)))), Mul(f, Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))))))
    rubi.add(rule101)

    pattern102 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(And(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))))), SimplerQ(Add(a_, Mul(b_, x_)), Add(c_, Mul(d_, x_))), SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_)))), (b, x, e, a, f, d, c)))
    rule102 = ReplacementRule(pattern102, lambda b, x, e, a, f, d, c : Mul(Sqrt(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))), Mul(Sqrt(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))))), Sqrt(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))))))), matchpyInteger(-1))), x)))
    rubi.add(rule102)

    pattern103 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(matchpyInteger(2), b_, d_, e_), Mul(matchpyInteger(-1), Mul(b_, c_, f_)), Mul(matchpyInteger(-1), Mul(a_, d_, f_))))), (b, e, x, a, f, d, c)))
    rule103 = ReplacementRule(pattern103, lambda b, e, x, a, f, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(b, Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), matchpyInteger(-1)))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), Log(Add(a, Mul(b, x)))), Pow(Mul(matchpyInteger(2), matchpyInteger(q), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Sqrt(matchpyInteger(3)), Mul(ArcTan(Add(Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1))), Mul(matchpyInteger(2), matchpyInteger(q), Mul(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(3)), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1)))))), Pow(Mul(matchpyInteger(2), matchpyInteger(q), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))))), Mul(matchpyInteger(3), Mul(Log(Add(Mul(matchpyInteger(q), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1))))), Mul(matchpyInteger(-1), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))))), Pow(Mul(matchpyInteger(4), matchpyInteger(q), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1)))))))
    rubi.add(rule103)

    pattern104 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(3)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(ZeroQ(Add(Mul(matchpyInteger(2), b_, d_, e_), Mul(matchpyInteger(-1), Mul(b_, c_, f_)), Mul(matchpyInteger(-1), Mul(a_, d_, f_)))), IntegerQ(m_), Less(m_, matchpyInteger(-1))), (b, e, x, a, f, d, m, c)))
    rule104 = ReplacementRule(pattern104, lambda b, e, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Mul(Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(f, Pow(Mul(matchpyInteger(6), Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Add(Mul(a, d, Add(Mul(matchpyInteger(3), m), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(matchpyInteger(3), b, c, Add(Mul(matchpyInteger(3), m), matchpyInteger(5)))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), b, d, Add(Mul(matchpyInteger(3), m), matchpyInteger(7)), x))), Pow(Mul(Pow(Add(c, Mul(d, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1)))), x))))
    rubi.add(rule104)

    pattern105 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', matchpyInteger(1)), x_), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_))), PositiveQ(a_), PositiveQ(c_)), (b, p, x, n, a, f, d, m, c)))
    rule105 = ReplacementRule(pattern105, lambda b, p, x, n, a, f, d, m, c : Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), m), Pow(Mul(f, x), p)), x))
    rubi.add(rule105)

    pattern106 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', matchpyInteger(1)), x_), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_)))), (b, p, x, n, a, f, d, m, c)))
    rule106 = ReplacementRule(pattern106, lambda b, p, x, n, a, f, d, m, c : Mul(Pow(Add(a, Mul(b, x)), FracPart(m)), Mul(Pow(Add(c, Mul(d, x)), FracPart(m)), Pow(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(Add(Mul(a, c), Mul(b, d, Pow(x, matchpyInteger(2)))), m), Pow(Mul(f, x), p)), x)))
    rubi.add(rule106)

    pattern107 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('f', matchpyInteger(1)), x_), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PositiveIntegerQ(Add(m_, Mul(matchpyInteger(-1), n_))), NonzeroQ(Add(m_, n_, p_, matchpyInteger(2)))), (b, p, x, n, a, f, d, m, c)))
    rule107 = ReplacementRule(pattern107, lambda b, p, x, n, a, f, d, m, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), n), Pow(Add(c, Mul(d, x)), n), Pow(Mul(f, x), p)), Pow(Add(a, Mul(b, x)), Add(m, Mul(matchpyInteger(-1), n))), x), x))
    rubi.add(rule107)

    pattern108 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(PositiveIntegerQ(m_), NegativeIntegerQ(m_, n_))), (b, p, e, n, x, a, f, d, m, c)))
    rule108 = ReplacementRule(pattern108, lambda b, p, e, n, x, a, f, d, m, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x))
    rubi.add(rule108)

    pattern109 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Add(m_, n_, p_, matchpyInteger(2))), NonzeroQ(Add(m_, matchpyInteger(1))), Or(SumSimplerQ(m_, matchpyInteger(1)), And(Not(And(NonzeroQ(Add(n_, matchpyInteger(1))), SumSimplerQ(n_, matchpyInteger(1)))), Not(And(NonzeroQ(Add(p_, matchpyInteger(1))), SumSimplerQ(p_, matchpyInteger(1))))))), (b, p, e, n, x, a, f, d, m, c)))
    rule109 = ReplacementRule(pattern109, lambda b, p, e, n, x, a, f, d, m, c : Add(Mul(b, Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n, matchpyInteger(2))), Mul(c, f, Add(m, p, matchpyInteger(2)))))), Mul(matchpyInteger(-1), Mul(b, d, f, Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule109)

    pattern110 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, matchpyInteger(2))), NegativeIntegerQ(n_)), (b, p, e, n, x, a, f, d, m, c)))
    rule110 = ReplacementRule(pattern110, lambda b, p, e, n, x, a, f, d, m, c : Mul(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), n), Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(n, matchpyInteger(1))), Pow(Add(e, Mul(f, x)), Add(m, matchpyInteger(1)))), matchpyInteger(-1))), Hypergeometric2F1(Add(m, matchpyInteger(1)), Mul(matchpyInteger(-1), n), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), Mul(Add(a, Mul(b, x)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(e, Mul(f, x))), matchpyInteger(-1)))))))
    rubi.add(rule110)

    pattern111 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(m_, n_, p_, matchpyInteger(2))), Not(IntegerQ(n_))), (b, p, e, x, n, a, f, d, m, c)))
    rule111 = ReplacementRule(pattern111, lambda b, p, e, x, n, a, f, d, m, c : Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(e, Mul(f, x))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), n)), Hypergeometric2F1(Add(m, matchpyInteger(1)), Mul(matchpyInteger(-1), n), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f)))), Mul(Add(a, Mul(b, x)), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(e, Mul(f, x))), matchpyInteger(-1)))))))
    rubi.add(rule111)

    pattern112 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(c_), Or(IntegerQ(p_), PositiveQ(e_))), (b, p, x, n, e, f, d, m, c)))
    rule112 = ReplacementRule(pattern112, lambda b, p, x, n, e, f, d, m, c : Mul(Pow(c, n), Pow(e, p), Mul(Pow(Mul(b, x), Add(m, matchpyInteger(1))), Pow(Mul(b, Add(m, matchpyInteger(1))), matchpyInteger(-1))), AppellF1(Add(m, matchpyInteger(1)), Mul(matchpyInteger(-1), n), Mul(matchpyInteger(-1), p), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(x, Pow(c, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), f), Mul(x, Pow(e, matchpyInteger(-1)))))))
    rubi.add(rule112)

    pattern113 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), PositiveQ(Mul(Mul(matchpyInteger(-1), d_), Pow(Mul(b_, c_), matchpyInteger(-1)))), Or(IntegerQ(p_), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1)))))), (b, p, x, n, e, f, d, m, c)))
    rule113 = ReplacementRule(pattern113, lambda b, p, x, n, e, f, d, m, c : Mul(Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(d, Add(n, matchpyInteger(1)), Pow(Mul(Mul(matchpyInteger(-1), d), Pow(Mul(b, c), matchpyInteger(-1))), m), Pow(Mul(d, Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))), p)), matchpyInteger(-1))), AppellF1(Add(n, matchpyInteger(1)), Mul(matchpyInteger(-1), m), Mul(matchpyInteger(-1), p), Add(n, matchpyInteger(2)), Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))), Mul(Mul(matchpyInteger(-1), f), Mul(Add(c, Mul(d, x)), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))))))
    rubi.add(rule113)

    pattern114 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(PositiveQ(c_))), (b, p, x, n, e, f, d, m, c)))
    rule114 = ReplacementRule(pattern114, lambda b, p, x, n, e, f, d, m, c : Mul(Pow(c, IntPart(n)), Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Pow(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))), FracPart(n)), matchpyInteger(-1))), Int(Mul(Pow(Mul(b, x), m), Pow(Add(matchpyInteger(1), Mul(d, Mul(x, Pow(c, matchpyInteger(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule114)

    pattern115 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), IntegerQ(p_), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), Not(And(PositiveQ(Mul(d_, Pow(Add(Mul(d_, a_), Mul(matchpyInteger(-1), Mul(c_, b_))), matchpyInteger(-1)))), SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_)))))), (b, p, e, x, n, a, f, d, m, c)))
    rule115 = ReplacementRule(pattern115, lambda b, p, e, x, n, a, f, d, m, c : Mul(Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), p), Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(Pow(b, Add(p, matchpyInteger(1))), Add(m, matchpyInteger(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), n)), matchpyInteger(-1))), AppellF1(Add(m, matchpyInteger(1)), Mul(matchpyInteger(-1), n), Mul(matchpyInteger(-1), p), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), f), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))))))
    rubi.add(rule115)

    pattern116 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), IntegerQ(p_), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1))))), Not(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))))), (b, p, e, x, n, a, f, d, m, c)))
    rule116 = ReplacementRule(pattern116, lambda b, p, e, x, n, a, f, d, m, c : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), FracPart(n))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule116)

    pattern117 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))), Not(And(PositiveQ(Mul(d_, Pow(Add(Mul(d_, a_), Mul(matchpyInteger(-1), Mul(c_, b_))), matchpyInteger(-1)))), PositiveQ(Mul(d_, Pow(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), matchpyInteger(-1)))), SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_))))), Not(And(PositiveQ(Mul(f_, Pow(Add(Mul(f_, a_), Mul(matchpyInteger(-1), Mul(e_, b_))), matchpyInteger(-1)))), PositiveQ(Mul(f_, Pow(Add(Mul(f_, c_), Mul(matchpyInteger(-1), Mul(e_, d_))), matchpyInteger(-1)))), SimplerQ(Add(e_, Mul(f_, x_)), Add(a_, Mul(b_, x_)))))), (b, p, e, x, n, a, f, d, m, c)))
    rule117 = ReplacementRule(pattern117, lambda b, p, e, x, n, a, f, d, m, c : Mul(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Mul(b, Add(m, matchpyInteger(1)), Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), n), Pow(Mul(b, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))), p)), matchpyInteger(-1))), AppellF1(Add(m, matchpyInteger(1)), Mul(matchpyInteger(-1), n), Mul(matchpyInteger(-1), p), Add(m, matchpyInteger(2)), Mul(Mul(matchpyInteger(-1), d), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), f), Mul(Add(a, Mul(b, x)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))))))
    rubi.add(rule117)

    pattern118 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1)))), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))), matchpyInteger(-1)))))), (b, p, e, x, n, a, f, d, m, c)))
    rule118 = ReplacementRule(pattern118, lambda b, p, e, x, n, a, f, d, m, c : Mul(Mul(Pow(Add(e, Mul(f, x)), FracPart(p)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))), IntPart(p)), Pow(Mul(b, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))), FracPart(p))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(Mul(b, Mul(e, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1)))), Mul(b, f, Mul(x, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))))), p)), x)))
    rubi.add(rule118)

    pattern119 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_)), Not(IntegerQ(n_)), Not(IntegerQ(p_)), Not(PositiveQ(Mul(b_, Pow(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), matchpyInteger(-1))))), Not(SimplerQ(Add(c_, Mul(d_, x_)), Add(a_, Mul(b_, x_)))), Not(SimplerQ(Add(e_, Mul(f_, x_)), Add(a_, Mul(b_, x_))))), (b, p, e, x, n, a, f, d, m, c)))
    rule119 = ReplacementRule(pattern119, lambda b, p, e, x, n, a, f, d, m, c : Mul(Mul(Pow(Add(c, Mul(d, x)), FracPart(n)), Pow(Mul(Pow(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), IntPart(n)), Pow(Mul(b, Mul(Add(c, Mul(d, x)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), FracPart(n))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))), Mul(b, d, Mul(x, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))))), n), Pow(Add(e, Mul(f, x)), p)), x)))
    rubi.add(rule119)

    pattern120 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), u_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), u_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), u_)), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, p, u, e, n, x, a, f, d, m, c)))
    rule120 = ReplacementRule(pattern120, lambda b, p, u, e, n, x, a, f, d, m, c : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x), x, u)))
    rubi.add(rule120)

    pattern121 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(Or(PositiveIntegerQ(m_), IntegersQ(m_, n_))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule121 = ReplacementRule(pattern121, lambda b, g, x, n, e, a, f, d, m, h, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Add(e, Mul(f, x)), Add(g, Mul(h, x))), x), x))
    rubi.add(rule121)

    pattern122 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(m_, n_, matchpyInteger(2))), NonzeroQ(Add(m_, matchpyInteger(1))), Not(And(SumSimplerQ(n_, matchpyInteger(1)), Not(SumSimplerQ(m_, matchpyInteger(1)))))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule122 = ReplacementRule(pattern122, lambda b, g, x, n, e, a, f, d, m, h, c : Add(Mul(Add(Mul(Pow(b, matchpyInteger(2)), d, e, g), Mul(matchpyInteger(-1), Mul(Pow(a, matchpyInteger(2)), d, f, h, m)), Mul(matchpyInteger(-1), Mul(a, b, Add(Mul(d, Add(Mul(f, g), Mul(e, h))), Mul(matchpyInteger(-1), Mul(c, f, h, Add(m, matchpyInteger(1))))))), Mul(b, f, h, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1)), x)), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(Pow(b, matchpyInteger(2)), d, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(a, d, f, h, m), Mul(b, Add(Mul(d, Add(Mul(f, g), Mul(e, h))), Mul(matchpyInteger(-1), Mul(c, f, h, Add(m, matchpyInteger(2))))))), Pow(Mul(Pow(b, matchpyInteger(2)), d), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule122)

    pattern123 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Less(n_, matchpyInteger(-1))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule123 = ReplacementRule(pattern123, lambda b, g, x, n, e, a, f, d, m, h, c : Add(Mul(Mul(Add(Mul(Pow(b, matchpyInteger(2)), c, d, e, g, Add(n, matchpyInteger(1))), Mul(Pow(a, matchpyInteger(2)), c, d, f, h, Add(n, matchpyInteger(1))), Mul(a, b, Add(Mul(Pow(d, matchpyInteger(2)), e, g, Add(m, matchpyInteger(1))), Mul(Pow(c, matchpyInteger(2)), f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(2)))))), Mul(Add(Mul(Pow(a, matchpyInteger(2)), Pow(d, matchpyInteger(2)), f, h, Add(n, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(a, b, Pow(d, matchpyInteger(2)), Add(Mul(f, g), Mul(e, h)), Add(n, matchpyInteger(1)))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(Pow(c, matchpyInteger(2)), f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1)))), Mul(Pow(d, matchpyInteger(2)), e, g, Add(m, n, matchpyInteger(2)))))), x)), Pow(Mul(b, d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Add(m, matchpyInteger(1)), Add(n, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(Pow(a, matchpyInteger(2)), Pow(d, matchpyInteger(2)), f, h, Add(matchpyInteger(2), Mul(matchpyInteger(3), n), Pow(n, matchpyInteger(2)))), Mul(a, b, d, Add(n, matchpyInteger(1)), Add(Mul(matchpyInteger(2), c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3)))))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(Pow(c, matchpyInteger(2)), f, h, Add(matchpyInteger(2), Mul(matchpyInteger(3), m), Pow(m, matchpyInteger(2)))), Mul(matchpyInteger(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1)), Add(m, n, matchpyInteger(3)))), Mul(Pow(d, matchpyInteger(2)), e, g, Add(matchpyInteger(6), Pow(m, matchpyInteger(2)), Mul(matchpyInteger(5), n), Pow(n, matchpyInteger(2)), Mul(m, Add(Mul(matchpyInteger(2), n), matchpyInteger(5)))))))), Pow(Mul(b, d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Add(m, matchpyInteger(1)), Add(n, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), x)))))
    rubi.add(rule123)

    pattern124 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(Or(And(RationalQ(m_), Less(m_, matchpyInteger(-2))), And(ZeroQ(Add(m_, n_, matchpyInteger(3))), Not(And(RationalQ(n_), Less(n_, matchpyInteger(-2))))))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule124 = ReplacementRule(pattern124, lambda b, g, x, n, e, a, f, d, m, h, c : Add(Mul(Mul(Add(Mul(Pow(b, matchpyInteger(3)), c, e, g, Add(m, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(Pow(a, matchpyInteger(3)), d, f, h, Add(n, matchpyInteger(2)))), Mul(matchpyInteger(-1), Mul(Pow(a, matchpyInteger(2)), b, Add(Mul(c, f, h, m), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3))))))), Mul(matchpyInteger(-1), Mul(a, Pow(b, matchpyInteger(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h))), Mul(d, e, g, Add(Mul(matchpyInteger(2), m), n, matchpyInteger(4)))))), Mul(b, Add(Mul(Pow(a, matchpyInteger(2)), d, f, h, Add(m, Mul(matchpyInteger(-1), n))), Mul(matchpyInteger(-1), Mul(a, b, Add(Mul(matchpyInteger(2), c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(n, matchpyInteger(1))))))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, e, g, Add(m, n, matchpyInteger(2))))))), x)), Pow(Mul(Pow(b, matchpyInteger(2)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Mul(Add(Mul(f, Mul(h, Pow(Pow(b, matchpyInteger(2)), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(d, Add(m, n, matchpyInteger(3)), Add(Mul(Pow(a, matchpyInteger(2)), d, f, h, Add(m, Mul(matchpyInteger(-1), n))), Mul(matchpyInteger(-1), Mul(a, b, Add(Mul(matchpyInteger(2), c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(n, matchpyInteger(1))))))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(c, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, e, g, Add(m, n, matchpyInteger(2)))))))), Pow(Mul(Pow(b, matchpyInteger(2)), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2))), matchpyInteger(-1))))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(2))), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule124)

    pattern125 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(Or(And(RationalQ(m_), Inequality(matchpyInteger(-2), matchpyInteger(LessEqual), m_, matchpyInteger(Less), matchpyInteger(-1))), SumSimplerQ(m_, matchpyInteger(1))), NonzeroQ(Add(m_, matchpyInteger(1))), NonzeroQ(Add(m_, n_, matchpyInteger(3)))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule125 = ReplacementRule(pattern125, lambda b, g, x, n, e, a, f, d, m, h, c : Add(Mul(Mul(Add(Mul(Pow(a, matchpyInteger(2)), d, f, h, Add(n, matchpyInteger(2))), Mul(Pow(b, matchpyInteger(2)), d, e, g, Add(m, n, matchpyInteger(3))), Mul(a, b, Add(Mul(c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3)))))), Mul(b, f, h, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1)), x)), Pow(Mul(Pow(b, matchpyInteger(2)), d, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1)), Add(m, n, matchpyInteger(3))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(Pow(a, matchpyInteger(2)), Pow(d, matchpyInteger(2)), f, h, Add(n, matchpyInteger(1)), Add(n, matchpyInteger(2))), Mul(a, b, d, Add(n, matchpyInteger(1)), Add(Mul(matchpyInteger(2), c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3)))))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(Pow(c, matchpyInteger(2)), f, h, Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1)), Add(m, n, matchpyInteger(3)))), Mul(Pow(d, matchpyInteger(2)), e, g, Add(m, n, matchpyInteger(2)), Add(m, n, matchpyInteger(3)))))), Pow(Mul(Pow(b, matchpyInteger(2)), d, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1)), Add(m, n, matchpyInteger(3))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n)), x)))))
    rubi.add(rule125)

    pattern126 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(m_, n_, matchpyInteger(2))), NonzeroQ(Add(m_, n_, matchpyInteger(3)))), (b, g, x, n, e, a, f, d, m, h, c)))
    rule126 = ReplacementRule(pattern126, lambda b, g, x, n, e, a, f, d, m, h, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(a, d, f, h, Add(n, matchpyInteger(2))), Mul(b, c, f, h, Add(m, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(b, d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3)))), Mul(matchpyInteger(-1), Mul(b, d, f, h, Add(m, n, matchpyInteger(2)), x)))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Pow(Mul(Pow(b, matchpyInteger(2)), Pow(d, matchpyInteger(2)), Add(m, n, matchpyInteger(2)), Add(m, n, matchpyInteger(3))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(Pow(a, matchpyInteger(2)), Pow(d, matchpyInteger(2)), f, h, Add(n, matchpyInteger(1)), Add(n, matchpyInteger(2))), Mul(a, b, d, Add(n, matchpyInteger(1)), Add(Mul(matchpyInteger(2), c, f, h, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(d, Add(Mul(f, g), Mul(e, h)), Add(m, n, matchpyInteger(3)))))), Mul(Pow(b, matchpyInteger(2)), Add(Mul(Pow(c, matchpyInteger(2)), f, h, Add(m, matchpyInteger(1)), Add(m, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(c, d, Add(Mul(f, g), Mul(e, h)), Add(m, matchpyInteger(1)), Add(m, n, matchpyInteger(3)))), Mul(Pow(d, matchpyInteger(2)), e, g, Add(m, n, matchpyInteger(2)), Add(m, n, matchpyInteger(3)))))), Pow(Mul(Pow(b, matchpyInteger(2)), Pow(d, matchpyInteger(2)), Add(m, n, matchpyInteger(2)), Add(m, n, matchpyInteger(3))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n)), x))))
    rubi.add(rule126)

    pattern127 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), cons(And(Or(IntegersQ(m_, n_, p_), PositiveIntegerQ(n_, p_))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule127 = ReplacementRule(pattern127, lambda b, g, p, e, x, n, a, f, d, m, h, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Add(g, Mul(h, x))), x), x))
    rubi.add(rule127)

    pattern128 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0)), IntegerQ(m_)), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule128 = ReplacementRule(pattern128, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(m, matchpyInteger(1))), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(Mul(d, e, n), Mul(c, f, Add(p, matchpyInteger(1))))), Mul(d, Add(Mul(b, Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(m, matchpyInteger(1))), Mul(f, Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(n, p, matchpyInteger(1)))), x)), x)), x)))))
    rubi.add(rule128)

    pattern129 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(p, x), cons(And(RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0)), IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule129 = ReplacementRule(pattern129, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(-1))), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(b, c, Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(m, matchpyInteger(1))), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(Mul(d, e, n), Mul(c, f, Add(p, matchpyInteger(1))))), Mul(d, Add(Mul(b, Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(m, matchpyInteger(1))), Mul(f, Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(n, p, matchpyInteger(1)))), x)), x)), x)))))
    rubi.add(rule129)

    pattern130 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, matchpyInteger(-1)), IntegerQ(m_)), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule130 = ReplacementRule(pattern130, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))), Mul(matchpyInteger(-1), Mul(d, f, Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule130)

    pattern131 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Less(m_, matchpyInteger(-1)), IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule131 = ReplacementRule(pattern131, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))), Mul(matchpyInteger(-1), Mul(d, f, Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule131)

    pattern132 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, matchpyInteger(0)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(2))), IntegerQ(m_)), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule132 = ReplacementRule(pattern132, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(2))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(h, Add(Mul(b, c, e, m), Mul(a, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))))), Mul(Add(Mul(b, d, f, g, Add(m, n, p, matchpyInteger(2))), Mul(h, Add(Mul(a, d, f, m), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n, matchpyInteger(1))), Mul(c, f, Add(m, p, matchpyInteger(1))))))))), x)), x)), x))))
    rubi.add(rule132)

    pattern133 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(m_), Greater(m_, matchpyInteger(0)), NonzeroQ(Add(m_, n_, p_, matchpyInteger(2))), IntegersQ(Mul(matchpyInteger(2), m_), Mul(matchpyInteger(2), n_), Mul(matchpyInteger(2), p_))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule133 = ReplacementRule(pattern133, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(h, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(2))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(d, f, Add(m, n, p, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(a, d, f, g, Add(m, n, p, matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(h, Add(Mul(b, c, e, m), Mul(a, Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))))), Mul(Add(Mul(b, d, f, g, Add(m, n, p, matchpyInteger(2))), Mul(h, Add(Mul(a, d, f, m), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e, Add(m, n, matchpyInteger(1))), Mul(c, f, Add(m, p, matchpyInteger(1))))))))), x)), x)), x))))
    rubi.add(rule133)

    pattern134 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Add(m_, n_, p_, matchpyInteger(2))), NonzeroQ(Add(m_, matchpyInteger(1))), Or(SumSimplerQ(m_, matchpyInteger(1)), And(Not(And(NonzeroQ(Add(n_, matchpyInteger(1))), SumSimplerQ(n_, matchpyInteger(1)))), Not(And(NonzeroQ(Add(p_, matchpyInteger(1))), SumSimplerQ(p_, matchpyInteger(1))))))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule134 = ReplacementRule(pattern134, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), Add(n, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(1))), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(Add(m, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Simp(Add(Mul(Add(Mul(a, d, f, g), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, e), Mul(c, f)), g)), Mul(b, c, e, h)), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(Mul(d, e, Add(n, matchpyInteger(1))), Mul(c, f, Add(p, matchpyInteger(1)))))), Mul(matchpyInteger(-1), Mul(d, f, Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Add(m, n, p, matchpyInteger(3)), x))), x)), x))))
    rubi.add(rule134)

    pattern135 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, p, e, x, a, f, d, h, c)))
    rule135 = ReplacementRule(pattern135, lambda b, g, p, e, x, a, f, d, h, c : Add(Mul(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(c, Mul(d, x)), matchpyInteger(-1))), x)))))
    rubi.add(rule135)

    pattern136 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(n, x), FreeQ(p, x), cons(True, (b, g, p, e, x, n, a, f, d, h, c)))
    rule136 = ReplacementRule(pattern136, lambda b, g, p, e, x, n, a, f, d, h, c : Add(Mul(Mul(h, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, x)), n), Mul(Pow(Add(e, Mul(f, x)), p), Pow(Add(a, Mul(b, x)), matchpyInteger(-1)))), x))))
    rubi.add(rule136)

    pattern137 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(SimplerQ(Add(a_, Mul(b_, x_)), Add(e_, Mul(f_, x_))), SimplerQ(Add(c_, Mul(d_, x_)), Add(e_, Mul(f_, x_)))), (b, c, x, e, a, f, d, h, g)))
    rule137 = ReplacementRule(pattern137, lambda b, c, x, e, a, f, d, h, g : Add(Mul(Mul(h, Pow(f, matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x)))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Pow(f, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), x))))
    rubi.add(rule137)

    pattern138 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(SumSimplerQ(m_, matchpyInteger(1)), And(Not(SumSimplerQ(n_, matchpyInteger(1))), Not(SumSimplerQ(p_, matchpyInteger(1)))))), (b, g, p, e, x, n, a, f, d, m, h, c)))
    rule138 = ReplacementRule(pattern138, lambda b, g, p, e, x, n, a, f, d, m, h, c : Add(Mul(Mul(h, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x)), Mul(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p)), x))))
    rubi.add(rule138)

    pattern139 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(q, x), cons(And(RationalQ(p_), Less(matchpyInteger(0), p_, matchpyInteger(1))), (b, g, q, p, e, x, a, f, d, h, c)))
    rule139 = ReplacementRule(pattern139, lambda b, g, q, p, e, x, a, f, d, h, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Mul(Pow(Add(g, Mul(h, x)), q), Pow(Add(a, Mul(b, x)), matchpyInteger(-1)))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(e, Mul(f, x)), Add(p, matchpyInteger(-1))), Mul(Pow(Add(g, Mul(h, x)), q), Pow(Add(c, Mul(d, x)), matchpyInteger(-1)))), x)))))
    rubi.add(rule139)

    pattern140 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule140 = ReplacementRule(pattern140, lambda b, g, e, x, a, f, d, h, c : Mul(matchpyInteger(-2), Sqrt(Mul(d, Mul(Add(e, Mul(f, x)), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1))))), Mul(Sqrt(Mul(d, Mul(Add(g, Mul(h, x)), Pow(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), matchpyInteger(-1))))), Pow(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Sqrt(Mul(Mul(matchpyInteger(-1), f), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), EllipticPi(Mul(Mul(matchpyInteger(-1), b), Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Mul(f, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1)))), ArcSin(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), f), Pow(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), matchpyInteger(-1)))), Sqrt(Add(c, Mul(d, x))))), Mul(h, Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Mul(f, Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h)))), matchpyInteger(-1)))))))
    rubi.add(rule140)

    pattern141 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(And(IntegerQ(Add(n_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1)))))), (b, g, e, x, n, a, f, d, h, c)))
    rule141 = ReplacementRule(pattern141, lambda b, g, e, x, n, a, f, d, h, c : Int(ExpandIntegrand(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), Mul(Pow(Add(c, Mul(d, x)), Add(n, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), Pow(Add(a, Mul(b, x)), matchpyInteger(-1))), x), x))
    rubi.add(rule141)

    pattern142 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), matchpyInteger(-1)), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule142 = ReplacementRule(pattern142, lambda b, g, e, x, a, f, d, h, c : Add(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(Pow(b, matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, x)), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(Pow(b, matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Add(Mul(b, f, g), Mul(b, e, h), Mul(matchpyInteger(-1), Mul(a, f, h)), Mul(b, f, h, x)), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x))))
    rubi.add(rule142)

    pattern143 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule143 = ReplacementRule(pattern143, lambda b, g, e, x, a, f, d, h, c : Mul(matchpyInteger(-2), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Pow(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), matchpyInteger(-1)))))), Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), matchpyInteger(-1))))))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), matchpyInteger(-1))))))
    rubi.add(rule143)

    pattern144 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule144 = ReplacementRule(pattern144, lambda b, g, e, x, a, f, d, h, c : Mul(matchpyInteger(-2), Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Pow(Mul(Pow(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), matchpyInteger(2)), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), Subst(Int(Mul(Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), matchpyInteger(-1)))))), Pow(Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), matchpyInteger(-1)))))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), matchpyInteger(-1))))))
    rubi.add(rule144)

    pattern145 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule145 = ReplacementRule(pattern145, lambda b, g, e, x, a, f, d, h, c : Mul(matchpyInteger(2), Add(a, Mul(b, x)), Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(c, Mul(d, x)), Pow(Mul(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Mul(Sqrt(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Mul(Add(e, Mul(f, x)), Pow(Mul(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Add(a, Mul(b, x))), matchpyInteger(-1))))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Add(h, Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(d, g), Mul(matchpyInteger(-1), Mul(c, h))), matchpyInteger(-1)))))), Sqrt(Add(matchpyInteger(1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), matchpyInteger(-1))))))), matchpyInteger(-1))), x), x, Mul(Sqrt(Add(g, Mul(h, x))), Pow(Sqrt(Add(a, Mul(b, x))), matchpyInteger(-1))))))
    rubi.add(rule145)

    pattern146 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule146 = ReplacementRule(pattern146, lambda b, g, e, x, a, f, d, h, c : Add(Mul(Mul(Mul(matchpyInteger(-1), d), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)), Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, x))), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x))))
    rubi.add(rule146)

    pattern147 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule147 = ReplacementRule(pattern147, lambda b, g, e, x, a, f, d, h, c : Add(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Mul(Sqrt(Add(g, Mul(h, x))), Pow(Mul(h, Sqrt(Add(e, Mul(f, x)))), matchpyInteger(-1)))), Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Mul(Add(Mul(b, f, g), Mul(b, e, h), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), a, f, h))), Pow(Mul(matchpyInteger(2), Pow(f, matchpyInteger(2)), h), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(a, d, f, h), Mul(matchpyInteger(-1), Mul(b, Add(Mul(d, f, g), Mul(d, e, h), Mul(matchpyInteger(-1), Mul(c, f, h)))))), Pow(Mul(matchpyInteger(2), Pow(f, matchpyInteger(2)), h), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, x))), Pow(Mul(Sqrt(Add(a, Mul(b, x))), Sqrt(Add(c, Mul(d, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Mul(Add(Mul(f, g), Mul(matchpyInteger(-1), Mul(e, h))), Pow(Mul(matchpyInteger(2), f, h), matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Pow(Add(e, Mul(f, x)), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)))))
    rubi.add(rule147)

    pattern148 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Rational(matchpyInteger(3), matchpyInteger(2))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), cons(True, (b, g, e, x, a, f, d, h, c)))
    rule148 = ReplacementRule(pattern148, lambda b, g, e, x, a, f, d, h, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Mul(Sqrt(Add(c, Mul(d, x))), Pow(Mul(Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1)))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, x))), Pow(Mul(Sqrt(Add(c, Mul(d, x))), Sqrt(Add(e, Mul(f, x))), Sqrt(Add(g, Mul(h, x)))), matchpyInteger(-1))), x)))))
    rubi.add(rule148)

    pattern149 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegersQ(p_, q_)), (b, g, q, p, e, x, n, a, f, d, m, h, c)))
    rule149 = ReplacementRule(pattern149, lambda b, g, q, p, e, x, n, a, f, d, m, h, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x))
    rubi.add(rule149)

    pattern150 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(PositiveIntegerQ(q_), Or(SumSimplerQ(m_, matchpyInteger(1)), And(Not(SumSimplerQ(n_, matchpyInteger(1))), Not(SumSimplerQ(p_, matchpyInteger(1)))))), (b, g, q, p, e, x, n, a, f, d, m, h, c)))
    rule150 = ReplacementRule(pattern150, lambda b, g, q, p, e, x, n, a, f, d, m, h, c : Add(Mul(Mul(h, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Add(m, matchpyInteger(1))), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, matchpyInteger(-1)))), x)), Mul(Mul(Add(Mul(b, g), Mul(matchpyInteger(-1), Mul(a, h))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), Add(q, matchpyInteger(-1)))), x))))
    rubi.add(rule150)

    pattern151 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(True, (b, g, q, p, e, n, x, a, f, d, m, h, c)))
    rule151 = ReplacementRule(pattern151, lambda b, g, q, p, e, n, x, a, f, d, m, h, c : Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x))
    rubi.add(rule151)

    pattern152 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), u_)), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), u_)), Wildcard.optional('n', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), u_)), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), u_)), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, g, q, p, u, e, n, x, a, f, d, m, h, c)))
    rule152 = ReplacementRule(pattern152, lambda b, g, q, p, u, e, n, x, a, f, d, m, h, c : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), x), x, u)))
    rubi.add(rule152)

    pattern153 = Pattern(Int(Pow(Mul(Wildcard.optional('i', matchpyInteger(1)), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), x_)), m_), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), x_)), n_), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), x_)), p_), Pow(Add(Wildcard.optional('g', matchpyInteger(0)), Mul(Wildcard.optional('h', matchpyInteger(1)), x_)), q_)), r_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(h, x), FreeQ(i, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(True, (b, g, q, p, r, i, e, x, n, a, f, d, m, h, c)))
    rule153 = ReplacementRule(pattern153, lambda b, g, q, p, r, i, e, x, n, a, f, d, m, h, c : Mul(Mul(Pow(Mul(i, Pow(Add(a, Mul(b, x)), m), Pow(Add(c, Mul(d, x)), n), Pow(Add(e, Mul(f, x)), p), Pow(Add(g, Mul(h, x)), q)), r), Pow(Mul(Pow(Add(a, Mul(b, x)), Mul(m, r)), Pow(Add(c, Mul(d, x)), Mul(n, r)), Pow(Add(e, Mul(f, x)), Mul(p, r)), Pow(Add(g, Mul(h, x)), Mul(q, r))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, x)), Mul(m, r)), Pow(Add(c, Mul(d, x)), Mul(n, r)), Pow(Add(e, Mul(f, x)), Mul(p, r)), Pow(Add(g, Mul(h, x)), Mul(q, r))), x)))
    rubi.add(rule153)

    pattern154 = Pattern(Int(Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_)), p_), x_), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(True, (b, x, n, p)))
    rule154 = ReplacementRule(pattern154, lambda b, x, n, p : Mul(Pow(b, IntPart(p)), Mul(Pow(Mul(b, Pow(x, n)), FracPart(p)), Pow(Pow(x, Mul(n, FracPart(p))), matchpyInteger(-1))), Int(Pow(x, Mul(n, p)), x)))
    rubi.add(rule154)

    pattern155 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))), p_, matchpyInteger(1)))), (b, p, x, n, a)))
    rule155 = ReplacementRule(pattern155, lambda b, p, x, n, a : Mul(x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(a, matchpyInteger(-1)))))
    rubi.add(rule155)

    pattern156 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Add(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))), p_, matchpyInteger(1))), NonzeroQ(Add(p_, matchpyInteger(1)))), (b, p, x, n, a)))
    rule156 = ReplacementRule(pattern156, lambda b, p, x, n, a : Add(Mul(Mul(matchpyInteger(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), x))))
    rubi.add(rule156)

    pattern157 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(2)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(matchpyInteger(3), n_), matchpyInteger(1)))), (b, x, n, a)))
    rule157 = ReplacementRule(pattern157, lambda b, x, n, a : Int(Add(Pow(a, matchpyInteger(2)), Mul(matchpyInteger(2), a, b, Pow(x, n)), Mul(Pow(b, matchpyInteger(2)), Pow(x, Mul(matchpyInteger(2), n)))), x))
    rubi.add(rule157)

    pattern158 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(RationalQ(n_), Less(n_, matchpyInteger(0)), IntegerQ(p_)), (b, p, x, n, a)))
    rule158 = ReplacementRule(pattern158, lambda b, p, x, n, a : Int(Mul(Pow(x, Mul(n, p)), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p)), x))
    rubi.add(rule158)

    pattern159 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_, p_)), (b, p, x, n, a)))
    rule159 = ReplacementRule(pattern159, lambda b, p, x, n, a : Int(ExpandIntegrand(Pow(Add(a, Mul(b, Pow(x, n))), p), x), x))
    rubi.add(rule159)

    pattern160 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Greater(p_, matchpyInteger(0)), Or(IntegerQ(Mul(matchpyInteger(2), p_)), And(Equal(n_, matchpyInteger(2)), IntegerQ(Mul(matchpyInteger(4), p_))), And(Equal(n_, matchpyInteger(2)), IntegerQ(Mul(matchpyInteger(3), p_))), Less(Denominator(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Denominator(p_)))), (b, p, x, n, a)))
    rule160 = ReplacementRule(pattern160, lambda b, p, x, n, a : Add(Mul(x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(Mul(n, p), matchpyInteger(1)), matchpyInteger(-1)))), Mul(a, n, Mul(p, Pow(Add(Mul(n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1))), x))))
    rubi.add(rule160)

    pattern161 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-5), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PositiveQ(a_)), (b, x, a)))
    rule161 = ReplacementRule(pattern161, lambda b, x, a : Mul(Mul(matchpyInteger(2), Pow(Mul(Pow(a, Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticE(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), ArcTan(Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), matchpyInteger(2))))
    rubi.add(rule161)

    pattern162 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-5), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), Not(PositiveQ(a_))), (b, x, a)))
    rule162 = ReplacementRule(pattern162, lambda b, x, a : Mul(Mul(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(a, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))
    rubi.add(rule162)

    pattern163 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-7), matchpyInteger(6))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule163 = ReplacementRule(pattern163, lambda b, x, a : Mul(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Pow(Mul(a, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1))))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(2))))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))))
    rubi.add(rule163)

    pattern164 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(p_, matchpyInteger(-1)), Or(IntegerQ(Mul(matchpyInteger(2), p_)), And(Equal(n_, matchpyInteger(2)), IntegerQ(Mul(matchpyInteger(4), p_))), And(Equal(n_, matchpyInteger(2)), IntegerQ(Mul(matchpyInteger(3), p_))), Less(Denominator(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Denominator(p_)))), (b, p, x, n, a)))
    rule164 = ReplacementRule(pattern164, lambda b, p, x, n, a : Add(Mul(Mul(matchpyInteger(-1), x), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), x))))
    rubi.add(rule164)

    pattern165 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule165 = ReplacementRule(pattern165, lambda b, x, a : Add(Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(3), Pow(Rt(a, matchpyInteger(3)), matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Rt(a, matchpyInteger(3)), Mul(Rt(b, matchpyInteger(3)), x)), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(3), Pow(Rt(a, matchpyInteger(3)), matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Add(Mul(matchpyInteger(2), Rt(a, matchpyInteger(3))), Mul(matchpyInteger(-1), Mul(Rt(b, matchpyInteger(3)), x))), Pow(Add(Pow(Rt(a, matchpyInteger(3)), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Rt(a, matchpyInteger(3)), Rt(b, matchpyInteger(3)), x)), Mul(Pow(Rt(b, matchpyInteger(3)), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))))
    rubi.add(rule165)

    pattern166 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Mul(Add(n_, matchpyInteger(-3)), Pow(matchpyInteger(2), matchpyInteger(-1)))), PosQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a)))
    rule166 = ReplacementRule(pattern166, lambda b, x, n, a : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), x)), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1))))), x)))))
    rubi.add(rule166)

    pattern167 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Mul(Add(n_, matchpyInteger(-3)), Pow(matchpyInteger(2), matchpyInteger(-1)))), NegQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a)))
    rule167 = ReplacementRule(pattern167, lambda b, x, n, a : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), x))), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1))))), x)))))
    rubi.add(rule167)

    pattern168 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), Or(PositiveQ(a_), PositiveQ(b_))), (b, x, a)))
    rule168 = ReplacementRule(pattern168, lambda b, x, a : Mul(Mul(matchpyInteger(1), Pow(Mul(Rt(a, matchpyInteger(2)), Rt(b, matchpyInteger(2))), matchpyInteger(-1))), ArcTan(Mul(Rt(b, matchpyInteger(2)), Mul(x, Pow(Rt(a, matchpyInteger(2)), matchpyInteger(-1)))))))
    rubi.add(rule168)

    pattern169 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), Or(NegativeQ(a_), NegativeQ(b_))), (b, x, a)))
    rule169 = ReplacementRule(pattern169, lambda b, x, a : Mul(Mul(matchpyInteger(-1), Pow(Mul(Rt(Mul(matchpyInteger(-1), a), matchpyInteger(2)), Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2))), matchpyInteger(-1))), ArcTan(Mul(Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2)), Mul(x, Pow(Rt(Mul(matchpyInteger(-1), a), matchpyInteger(2)), matchpyInteger(-1)))))))
    rubi.add(rule169)

    pattern170 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, a)))
    rule170 = ReplacementRule(pattern170, lambda b, x, a : Mul(Mul(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2)), Pow(a, matchpyInteger(-1))), ArcTan(Mul(x, Pow(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2)), matchpyInteger(-1))))))
    rubi.add(rule170)

    pattern171 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), Or(PositiveQ(a_), NegativeQ(b_))), (b, x, a)))
    rule171 = ReplacementRule(pattern171, lambda b, x, a : Mul(Mul(matchpyInteger(1), Pow(Mul(Rt(a, matchpyInteger(2)), Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2))), matchpyInteger(-1))), ArcTanh(Mul(Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2)), Mul(x, Pow(Rt(a, matchpyInteger(2)), matchpyInteger(-1)))))))
    rubi.add(rule171)

    pattern172 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), Or(NegativeQ(a_), PositiveQ(b_))), (b, x, a)))
    rule172 = ReplacementRule(pattern172, lambda b, x, a : Mul(Mul(matchpyInteger(-1), Pow(Mul(Rt(Mul(matchpyInteger(-1), a), matchpyInteger(2)), Rt(b, matchpyInteger(2))), matchpyInteger(-1))), ArcTanh(Mul(Rt(b, matchpyInteger(2)), Mul(x, Pow(Rt(Mul(matchpyInteger(-1), a), matchpyInteger(2)), matchpyInteger(-1)))))))
    rubi.add(rule172)

    pattern173 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, a)))
    rule173 = ReplacementRule(pattern173, lambda b, x, a : Mul(Mul(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)), Pow(a, matchpyInteger(-1))), ArcTanh(Mul(x, Pow(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)), matchpyInteger(-1))))))
    rubi.add(rule173)

    pattern174 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Mul(Add(n_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1)))), PosQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a)))
    rule174 = ReplacementRule(pattern174, lambda b, x, n, a : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u), matchpyInteger(v)), CompoundExpression(Set(matchpyInteger(u), Add(Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))), Add(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), matchpyInteger(2)), Pow(Mul(a, n), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), x)))))
    rubi.add(rule174)

    pattern175 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Mul(Add(n_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1)))), NegQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a)))
    rule175 = ReplacementRule(pattern175, lambda b, x, n, a : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Add(Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(Mul(matchpyInteger(2), matchpyInteger(k), matchpyInteger(Pi)), Pow(n, matchpyInteger(-1)))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Mul(matchpyInteger(2), matchpyInteger(k), matchpyInteger(Pi)), Pow(n, matchpyInteger(-1)))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Cos(Mul(Mul(matchpyInteger(2), matchpyInteger(k), matchpyInteger(Pi)), Pow(n, matchpyInteger(-1)))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Mul(matchpyInteger(2), matchpyInteger(k), matchpyInteger(Pi)), Pow(n, matchpyInteger(-1)))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))), Add(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), matchpyInteger(2)), Pow(Mul(a, n), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(matchpyInteger(r), Pow(Mul(a, n), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), x)))))
    rubi.add(rule175)

    pattern176 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Or(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), And(PosQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), AtomQ(SplitProduct(matchpyInteger(SumBaseQ), a_)), AtomQ(SplitProduct(matchpyInteger(SumBaseQ), b_))))), (b, x, a)))
    rule176 = ReplacementRule(pattern176, lambda b, x, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2))))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2)))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)))))
    rubi.add(rule176)

    pattern177 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))))), (b, x, a)))
    rule177 = ReplacementRule(pattern177, lambda b, x, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)))))
    rubi.add(rule177)

    pattern178 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Add(Mul(n_, Pow(matchpyInteger(4), matchpyInteger(-1))), matchpyInteger(-1))), PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a)))
    rule178 = ReplacementRule(pattern178, lambda b, x, n, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(4)))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(4))))), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), Sqrt(matchpyInteger(2)), a), matchpyInteger(-1))), Int(Mul(Add(Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r)), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1))))))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r), matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1)))))), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), Sqrt(matchpyInteger(2)), a), matchpyInteger(-1))), Int(Mul(Add(Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r)), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1)))))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r), matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1))))), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule178)

    pattern179 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Add(Mul(n_, Pow(matchpyInteger(4), matchpyInteger(-1))), matchpyInteger(-1))), Not(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))))), (b, x, n, a)))
    rule179 = ReplacementRule(pattern179, lambda b, x, n, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1))))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule179)

    pattern180 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveQ(a_), PosQ(b_)), (b, x, a)))
    rule180 = ReplacementRule(pattern180, lambda b, x, a : Mul(ArcSinh(Mul(Rt(b, matchpyInteger(2)), Mul(x, Pow(Sqrt(a), matchpyInteger(-1))))), Pow(Rt(b, matchpyInteger(2)), matchpyInteger(-1))))
    rubi.add(rule180)

    pattern181 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveQ(a_), NegQ(b_)), (b, x, a)))
    rule181 = ReplacementRule(pattern181, lambda b, x, a : Mul(ArcSin(Mul(Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2)), Mul(x, Pow(Sqrt(a), matchpyInteger(-1))))), Pow(Rt(Mul(matchpyInteger(-1), b), matchpyInteger(2)), matchpyInteger(-1))))
    rubi.add(rule181)

    pattern182 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(PositiveQ(a_))), (b, x, a)))
    rule182 = ReplacementRule(pattern182, lambda b, x, a : Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))
    rubi.add(rule182)

    pattern183 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(a_)), (b, x, a)))
    rule183 = ReplacementRule(pattern183, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Mul(matchpyInteger(2), Sqrt(Add(matchpyInteger(2), Sqrt(matchpyInteger(3)))), Add(matchpyInteger(s), Mul(matchpyInteger(r), x)), Mul(Sqrt(Mul(Add(Pow(matchpyInteger(s), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(r), matchpyInteger(s), x)), Mul(Pow(matchpyInteger(r), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), Pow(Pow(Add(Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(2)), matchpyInteger(-1)))), Pow(Mul(Pow(matchpyInteger(3), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(r), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), Sqrt(Mul(matchpyInteger(s), Mul(Add(matchpyInteger(s), Mul(matchpyInteger(r), x)), Pow(Pow(Add(Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(2)), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticF(ArcSin(Mul(Add(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), Pow(Add(Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(-1)))), Add(matchpyInteger(-7), Mul(matchpyInteger(-1), Mul(matchpyInteger(4), Sqrt(matchpyInteger(3)))))))))
    rubi.add(rule183)

    pattern184 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(a_)), (b, x, a)))
    rule184 = ReplacementRule(pattern184, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Mul(matchpyInteger(2), Sqrt(Add(matchpyInteger(2), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3))))), Add(matchpyInteger(s), Mul(matchpyInteger(r), x)), Mul(Sqrt(Mul(Add(Pow(matchpyInteger(s), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(r), matchpyInteger(s), x)), Mul(Pow(matchpyInteger(r), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), Pow(Pow(Add(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(2)), matchpyInteger(-1)))), Pow(Mul(Pow(matchpyInteger(3), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(r), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), Sqrt(Mul(Mul(matchpyInteger(-1), matchpyInteger(s)), Mul(Add(matchpyInteger(s), Mul(matchpyInteger(r), x)), Pow(Pow(Add(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(2)), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticF(ArcSin(Mul(Add(Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), Pow(Add(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), matchpyInteger(-1)))), Add(matchpyInteger(-7), Mul(matchpyInteger(4), Sqrt(matchpyInteger(3))))))))
    rubi.add(rule184)

    pattern185 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule185 = ReplacementRule(pattern185, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4)))), Mul(Add(matchpyInteger(1), Mul(Pow(matchpyInteger(q), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), Mul(Sqrt(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Pow(Mul(a, Pow(Add(matchpyInteger(1), Mul(Pow(matchpyInteger(q), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(2))), matchpyInteger(-1)))), Pow(Mul(matchpyInteger(2), matchpyInteger(q), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), EllipticF(Mul(matchpyInteger(2), ArcTan(Mul(matchpyInteger(q), x))), Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1)))))))
    rubi.add(rule185)

    pattern186 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PositiveQ(a_)), (b, x, a)))
    rule186 = ReplacementRule(pattern186, lambda b, x, a : Mul(EllipticF(ArcSin(Mul(Rt(Mul(matchpyInteger(-1), b), matchpyInteger(4)), Mul(x, Pow(Rt(a, matchpyInteger(4)), matchpyInteger(-1))))), matchpyInteger(-1)), Pow(Mul(Rt(a, matchpyInteger(4)), Rt(Mul(matchpyInteger(-1), b), matchpyInteger(4))), matchpyInteger(-1))))
    rubi.add(rule186)

    pattern187 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegativeQ(a_), PositiveQ(b_)), (b, x, a)))
    rule187 = ReplacementRule(pattern187, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), a), b), matchpyInteger(2)))), Condition(Mul(Sqrt(Add(Mul(matchpyInteger(-1), a), Mul(matchpyInteger(q), Pow(x, matchpyInteger(2))))), Mul(Sqrt(Mul(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), Pow(matchpyInteger(q), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(2)), Sqrt(Mul(matchpyInteger(-1), a)), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), EllipticF(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), Pow(Mul(matchpyInteger(2), matchpyInteger(q)), matchpyInteger(-1)))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), IntegerQ(matchpyInteger(q)))))
    rubi.add(rule187)

    pattern188 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegativeQ(a_), PositiveQ(b_)), (b, x, a)))
    rule188 = ReplacementRule(pattern188, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), a), b), matchpyInteger(2)))), Mul(Sqrt(Mul(Add(a, Mul(matchpyInteger(-1), Mul(matchpyInteger(q), Pow(x, matchpyInteger(2))))), Pow(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), Mul(Sqrt(Mul(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), Pow(matchpyInteger(q), matchpyInteger(-1)))), Pow(Mul(Sqrt(matchpyInteger(2)), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), Sqrt(Mul(a, Pow(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))))), matchpyInteger(-1))), EllipticF(ArcSin(Mul(x, Pow(Sqrt(Mul(Add(a, Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), Pow(Mul(matchpyInteger(2), matchpyInteger(q)), matchpyInteger(-1)))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1)))))))
    rubi.add(rule188)

    pattern189 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), Not(PositiveQ(a_))), (b, x, a)))
    rule189 = ReplacementRule(pattern189, lambda b, x, a : Mul(Mul(Sqrt(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(4)), Pow(a, matchpyInteger(-1)))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(4)), Pow(a, matchpyInteger(-1)))))), matchpyInteger(-1))), x)))
    rubi.add(rule189)

    pattern190 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(6)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule190 = ReplacementRule(pattern190, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Mul(x, Add(matchpyInteger(s), Mul(matchpyInteger(r), Pow(x, matchpyInteger(2)))), Mul(Sqrt(Mul(Add(Pow(matchpyInteger(s), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(r), matchpyInteger(s), Pow(x, matchpyInteger(2)))), Mul(Pow(matchpyInteger(r), matchpyInteger(2)), Pow(x, matchpyInteger(4)))), Pow(Pow(Add(matchpyInteger(s), Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(r), Pow(x, matchpyInteger(2)))), matchpyInteger(2)), matchpyInteger(-1)))), Pow(Mul(matchpyInteger(2), Pow(matchpyInteger(3), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(s), Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(6))))), Sqrt(Mul(matchpyInteger(r), Pow(x, matchpyInteger(2)), Mul(Add(matchpyInteger(s), Mul(matchpyInteger(r), Pow(x, matchpyInteger(2)))), Pow(Pow(Add(matchpyInteger(s), Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(r), Pow(x, matchpyInteger(2)))), matchpyInteger(2)), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticF(ArcCos(Mul(Add(matchpyInteger(s), Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(r), Pow(x, matchpyInteger(2)))), Pow(Add(matchpyInteger(s), Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(r), Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), Mul(Add(matchpyInteger(2), Sqrt(matchpyInteger(3))), Pow(matchpyInteger(4), matchpyInteger(-1)))))))
    rubi.add(rule190)

    pattern191 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(8)))), Rational(matchpyInteger(-1), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule191 = ReplacementRule(pattern191, lambda b, x, a : Add(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4)), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(8))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4)), Pow(x, matchpyInteger(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(8))))), matchpyInteger(-1))), x))))
    rubi.add(rule191)

    pattern192 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule192 = ReplacementRule(pattern192, lambda b, x, a : Add(Mul(matchpyInteger(2), Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(a, Int(Mul(matchpyInteger(1), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule192)

    pattern193 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PositiveQ(a_)), (b, x, a)))
    rule193 = ReplacementRule(pattern193, lambda b, x, a : Mul(Mul(matchpyInteger(2), Pow(Mul(Pow(a, Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticE(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), ArcSin(Mul(Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), matchpyInteger(2))))
    rubi.add(rule193)

    pattern194 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), Not(PositiveQ(a_))), (b, x, a)))
    rule194 = ReplacementRule(pattern194, lambda b, x, a : Mul(Mul(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))
    rubi.add(rule194)

    pattern195 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveQ(a_), PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule195 = ReplacementRule(pattern195, lambda b, x, a : Mul(Mul(matchpyInteger(2), Pow(Mul(Pow(a, Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticF(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), ArcTan(Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), matchpyInteger(2))))
    rubi.add(rule195)

    pattern196 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveQ(a_), NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule196 = ReplacementRule(pattern196, lambda b, x, a : Mul(Mul(matchpyInteger(2), Pow(Mul(Pow(a, Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticF(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))), ArcSin(Mul(Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), matchpyInteger(2))))
    rubi.add(rule196)

    pattern197 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(PositiveQ(a_))), (b, x, a)))
    rule197 = ReplacementRule(pattern197, lambda b, x, a : Mul(Mul(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))
    rubi.add(rule197)

    pattern198 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(3))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule198 = ReplacementRule(pattern198, lambda b, x, a : Mul(matchpyInteger(3), Mul(Sqrt(Mul(b, Pow(x, matchpyInteger(2)))), Pow(Mul(matchpyInteger(2), b, x), matchpyInteger(-1))), Subst(Int(Mul(x, Pow(Sqrt(Add(Mul(matchpyInteger(-1), a), Pow(x, matchpyInteger(3)))), matchpyInteger(-1))), x), x, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))))
    rubi.add(rule198)

    pattern199 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-2), matchpyInteger(3))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule199 = ReplacementRule(pattern199, lambda b, x, a : Mul(matchpyInteger(3), Mul(Sqrt(Mul(b, Pow(x, matchpyInteger(2)))), Pow(Mul(matchpyInteger(2), b, x), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(Mul(matchpyInteger(-1), a), Pow(x, matchpyInteger(3)))), matchpyInteger(-1))), x), x, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))))))
    rubi.add(rule199)

    pattern200 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-3), matchpyInteger(4))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule200 = ReplacementRule(pattern200, lambda b, x, a : Mul(Pow(x, matchpyInteger(3)), Mul(Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(3)), Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule200)

    pattern201 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(6))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule201 = ReplacementRule(pattern201, lambda b, x, a : Add(Mul(matchpyInteger(3), Mul(x, Pow(Mul(matchpyInteger(2), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(6), matchpyInteger(-1))))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(matchpyInteger(2), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(7), Pow(matchpyInteger(6), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule201)

    pattern202 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), IntegerQ(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1)))))), (b, p, x, n, a)))
    rule202 = ReplacementRule(pattern202, lambda b, p, x, n, a : Mul(Pow(a, Add(p, Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))))), Subst(Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, n)))), Add(p, Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))))))
    rubi.add(rule202)

    pattern203 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), Less(Denominator(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Denominator(p_))), (b, p, x, n, a)))
    rule203 = ReplacementRule(pattern203, lambda b, p, x, n, a : Mul(Pow(Mul(a, Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), Add(p, Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))))), Subst(Int(Mul(matchpyInteger(1), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, n)))), Add(p, Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))))))
    rubi.add(rule203)

    pattern204 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(NegativeIntegerQ(n_)), (b, p, x, n, a)))
    rule204 = ReplacementRule(pattern204, lambda b, p, x, n, a : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, matchpyInteger(2)), matchpyInteger(-1))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule204)

    pattern205 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(FractionQ(n_)), (b, p, x, n, a)))
    rule205 = ReplacementRule(pattern205, lambda b, p, x, n, a : With(List(Set(matchpyInteger(k), Denominator(n))), Mul(matchpyInteger(k), Subst(Int(Mul(Pow(x, Add(matchpyInteger(k), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(k), n)))), p)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule205)

    pattern206 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_)), (b, p, x, n, a)))
    rule206 = ReplacementRule(pattern206, lambda b, p, x, n, a : Int(ExpandIntegrand(Pow(Add(a, Mul(b, Pow(x, n))), p), x), x))
    rubi.add(rule206)

    pattern207 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(p_)), Not(IntegerQ(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Not(NegativeIntegerQ(Simplify(Add(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))), p_)))), Or(IntegerQ(p_), PositiveQ(a_))), (b, p, x, n, a)))
    rule207 = ReplacementRule(pattern207, lambda b, p, x, n, a : Mul(Pow(a, p), x, Hypergeometric2F1(Mul(matchpyInteger(-1), p), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Add(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), matchpyInteger(1)), Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, n), Pow(a, matchpyInteger(-1)))))))
    rubi.add(rule207)

    pattern208 = Pattern(Int(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(p_)), Not(IntegerQ(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Not(NegativeIntegerQ(Simplify(Add(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))), p_)))), Not(Or(IntegerQ(p_), PositiveQ(a_)))), (b, p, x, n, a)))
    rule208 = ReplacementRule(pattern208, lambda b, p, x, n, a : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n))), FracPart(p)), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), FracPart(p)), matchpyInteger(-1))), Int(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), p), x)))
    rubi.add(rule208)

    pattern209 = Pattern(Int(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(u_, n_))), p_), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, p, u, x, n, a)))
    rule209 = ReplacementRule(pattern209, lambda b, p, u, x, n, a : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Pow(Add(a, Mul(b, Pow(x, n))), p), x), x, u)))
    rubi.add(rule209)

    pattern210 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a1', matchpyInteger(0)), Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('a2', matchpyInteger(0)), Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (b1, p, x, n, b2, a2, a1)))
    rule210 = ReplacementRule(pattern210, lambda b1, p, x, n, b2, a2, a1 : Int(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), p), x))
    rubi.add(rule210)

    pattern211 = Pattern(Int(Mul(Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(p_), Greater(p_, matchpyInteger(0)), Or(IntegerQ(Mul(matchpyInteger(2), p_)), Less(Denominator(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Denominator(p_)))), (b1, p, x, n, b2, a2, a1)))
    rule211 = ReplacementRule(pattern211, lambda b1, p, x, n, b2, a2, a1 : Add(Mul(x, Pow(Add(a1, Mul(b1, Pow(x, n))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), p), Pow(Add(Mul(matchpyInteger(2), n, p), matchpyInteger(1)), matchpyInteger(-1)))), Mul(matchpyInteger(2), a1, a2, n, Mul(p, Pow(Add(Mul(matchpyInteger(2), n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(-1)))), x))))
    rubi.add(rule211)

    pattern212 = Pattern(Int(Mul(Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(p_), Less(p_, matchpyInteger(-1)), Or(IntegerQ(Mul(matchpyInteger(2), p_)), Less(Denominator(Add(p_, Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))))), Denominator(p_)))), (b1, p, x, n, b2, a2, a1)))
    rule212 = ReplacementRule(pattern212, lambda b1, p, x, n, b2, a2, a1 : Add(Mul(Mul(matchpyInteger(-1), x), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a1, a2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), a1, a2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule212)

    pattern213 = Pattern(Int(Mul(Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Mul(matchpyInteger(2), n_))), (b1, p, x, n, b2, a2, a1)))
    rule213 = ReplacementRule(pattern213, lambda b1, p, x, n, b2, a2, a1 : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, matchpyInteger(2)), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule213)

    pattern214 = Pattern(Int(Mul(Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), FractionQ(Mul(matchpyInteger(2), n_))), (b1, p, x, n, b2, a2, a1)))
    rule214 = ReplacementRule(pattern214, lambda b1, p, x, n, b2, a2, a1 : With(List(Set(matchpyInteger(k), Denominator(Mul(matchpyInteger(2), n)))), Mul(matchpyInteger(k), Subst(Int(Mul(Pow(x, Add(matchpyInteger(k), matchpyInteger(-1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(matchpyInteger(k), n)))), p), Pow(Add(a2, Mul(b2, Pow(x, Mul(matchpyInteger(k), n)))), p)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule214)

    pattern215 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a1', matchpyInteger(0)), Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(Wildcard.optional('a2', matchpyInteger(0)), Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Not(IntegerQ(p_))), (b1, p, x, n, b2, a2, a1)))
    rule215 = ReplacementRule(pattern215, lambda b1, p, x, n, b2, a2, a1 : Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), FracPart(p)), matchpyInteger(-1))), Int(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), p), x)))
    rubi.add(rule215)

    pattern216 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule216 = ReplacementRule(pattern216, lambda b1, p, x, n, b2, a2, a1, m, c : Int(Mul(Pow(Mul(c, x), m), Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), p)), x))
    rubi.add(rule216)

    pattern217 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_)), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(IntegerQ(m_), PositiveQ(c_)), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, p, x, n, m, c)))
    rule217 = ReplacementRule(pattern217, lambda b, p, x, n, m, c : Mul(Mul(Pow(c, m), Pow(Mul(n, Pow(b, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1)))), matchpyInteger(-1))), Subst(Int(Pow(Mul(b, x), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), x), x, Pow(x, n))))
    rubi.add(rule217)

    pattern218 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Or(IntegerQ(m_), PositiveQ(c_)), Not(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))))), (b, p, x, n, m, c)))
    rule218 = ReplacementRule(pattern218, lambda b, p, x, n, m, c : Mul(Pow(c, m), Pow(b, IntPart(p)), Mul(Pow(Mul(b, Pow(x, n)), FracPart(p)), Pow(Pow(x, Mul(n, FracPart(p))), matchpyInteger(-1))), Int(Pow(x, Add(m, Mul(n, p))), x)))
    rubi.add(rule218)

    pattern219 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_)), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(IntegerQ(m_))), (b, p, x, n, m, c)))
    rule219 = ReplacementRule(pattern219, lambda b, p, x, n, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Mul(b, Pow(x, n)), p)), x)))
    rubi.add(rule219)

    pattern220 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(p_), NegQ(n_)), (b, p, x, n, a, m)))
    rule220 = ReplacementRule(pattern220, lambda b, p, x, n, a, m : Int(Mul(Pow(x, Add(m, Mul(n, p))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p)), x))
    rubi.add(rule220)

    pattern221 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_, matchpyInteger(1))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, p, x, n, a, m, c)))
    rule221 = ReplacementRule(pattern221, lambda b, p, x, n, a, m, c : Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))))
    rubi.add(rule221)

    pattern222 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_, matchpyInteger(1))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule222 = ReplacementRule(pattern222, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))))
    rubi.add(rule222)

    pattern223 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, p, x, n, a, m)))
    rule223 = ReplacementRule(pattern223, lambda b, p, x, n, a, m : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), p)), x), x, Pow(x, n))))
    rubi.add(rule223)

    pattern224 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), (b1, p, x, n, b2, a2, a1, m)))
    rule224 = ReplacementRule(pattern224, lambda b1, p, x, n, b2, a2, a1, m : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(a1, Mul(b1, x)), p), Pow(Add(a2, Mul(b2, x)), p)), x), x, Pow(x, n))))
    rubi.add(rule224)

    pattern225 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, p, x, n, a, m, c)))
    rule225 = ReplacementRule(pattern225, lambda b, p, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule225)

    pattern226 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule226 = ReplacementRule(pattern226, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))
    rubi.add(rule226)

    pattern227 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_)), (b, p, x, n, a, m, c)))
    rule227 = ReplacementRule(pattern227, lambda b, p, x, n, a, m, c : Int(ExpandIntegrand(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x))
    rubi.add(rule227)

    pattern228 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_, matchpyInteger(1)))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, p, x, n, a, m)))
    rule228 = ReplacementRule(pattern228, lambda b, p, x, n, a, m : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b, Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule228)

    pattern229 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_, matchpyInteger(1)))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b1, p, x, n, b2, a2, a1, m)))
    rule229 = ReplacementRule(pattern229, lambda b1, p, x, n, b2, a2, a1, m : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b1, b2, Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a1, a2, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(2), n))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))))
    rubi.add(rule229)

    pattern230 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_, matchpyInteger(1)))), NonzeroQ(Add(p_, matchpyInteger(1)))), (b, p, x, n, a, m, c)))
    rule230 = ReplacementRule(pattern230, lambda b, p, x, n, a, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule230)

    pattern231 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_, matchpyInteger(1)))), NonzeroQ(Add(p_, matchpyInteger(1)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule231 = ReplacementRule(pattern231, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a1, a2, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), a1, a2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule231)

    pattern232 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), IntegerQ(m_)), (b, p, x, n, a, m)))
    rule232 = ReplacementRule(pattern232, lambda b, p, x, n, a, m : With(List(Set(matchpyInteger(k), GCD(Add(m, matchpyInteger(1)), n))), Condition(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, matchpyInteger(1)), Pow(matchpyInteger(k), matchpyInteger(-1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), p)), x), x, Pow(x, matchpyInteger(k)))), Unequal(matchpyInteger(k), matchpyInteger(1)))))
    rubi.add(rule232)

    pattern233 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), IntegerQ(m_)), (b1, p, x, n, b2, a2, a1, m)))
    rule233 = ReplacementRule(pattern233, lambda b1, p, x, n, b2, a2, a1, m : With(List(Set(matchpyInteger(k), GCD(Add(m, matchpyInteger(1)), Mul(matchpyInteger(2), n)))), Condition(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, matchpyInteger(1)), Pow(matchpyInteger(k), matchpyInteger(-1))), matchpyInteger(-1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), p), Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), p)), x), x, Pow(x, matchpyInteger(k)))), Unequal(matchpyInteger(k), matchpyInteger(1)))))
    rubi.add(rule233)

    pattern234 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, matchpyInteger(0)), Less(m_, matchpyInteger(-1)), Not(NegativeIntegerQ(Mul(Add(m_, Mul(n_, p_), n_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule234 = ReplacementRule(pattern234, lambda b, p, x, n, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Mul(c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b, n, Mul(p, Pow(Mul(Pow(c, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1)))), x)))))
    rubi.add(rule234)

    pattern235 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(m_, p_), Greater(p_, matchpyInteger(0)), NonzeroQ(Add(m_, Mul(matchpyInteger(2), n_, p_), matchpyInteger(1))), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule235 = ReplacementRule(pattern235, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(2), a1, a2, n, Mul(p, Pow(Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(-1)))), x))))
    rubi.add(rule235)

    pattern236 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), Greater(p_, matchpyInteger(0)), NonzeroQ(Add(m_, Mul(n_, p_), matchpyInteger(1))), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule236 = ReplacementRule(pattern236, lambda b, p, x, n, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(a, n, Mul(p, Pow(Add(m, Mul(n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1)))), x))))
    rubi.add(rule236)

    pattern237 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule237 = ReplacementRule(pattern237, lambda b, x, a : Mul(x, Mul(Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(b, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(3)), Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule237)

    pattern238 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PositiveIntegerQ(Mul(Add(m_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), (b, m, x, a)))
    rule238 = ReplacementRule(pattern238, lambda b, m, x, a : Add(Mul(Pow(x, Add(m, matchpyInteger(-3))), Pow(Mul(b, Add(m, matchpyInteger(-4)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(a, Mul(Add(m, matchpyInteger(-3)), Pow(Mul(b, Add(m, matchpyInteger(-4))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, matchpyInteger(-4))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule238)

    pattern239 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), NegativeIntegerQ(Mul(Add(m_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), (b, m, x, a)))
    rule239 = ReplacementRule(pattern239, lambda b, m, x, a : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Pow(Mul(a, Add(m, matchpyInteger(1)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(b, Mul(m, Pow(Mul(a, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, matchpyInteger(4))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule239)

    pattern240 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, c)))
    rule240 = ReplacementRule(pattern240, lambda b, x, a, c : Mul(Sqrt(Mul(c, x)), Mul(Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(2))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(b, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(2)), Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(2))), matchpyInteger(-1)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule240)

    pattern241 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), IntegerQ(Mul(matchpyInteger(2), m_)), Greater(m_, Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1))))), (b, x, a, m, c)))
    rule241 = ReplacementRule(pattern241, lambda b, x, a, m, c : Add(Mul(matchpyInteger(2), c, Mul(Pow(Mul(c, x), Add(m, matchpyInteger(-1))), Pow(Mul(b, Add(Mul(matchpyInteger(2), m), matchpyInteger(-3)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), a, Pow(c, matchpyInteger(2)), Mul(Add(m, matchpyInteger(-1)), Pow(Mul(b, Add(Mul(matchpyInteger(2), m), matchpyInteger(-3))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(-2))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule241)

    pattern242 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), IntegerQ(Mul(matchpyInteger(2), m_)), Less(m_, matchpyInteger(-1))), (b, x, a, m, c)))
    rule242 = ReplacementRule(pattern242, lambda b, x, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Mul(a, c, Add(m, matchpyInteger(1)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(b, Mul(Add(Mul(matchpyInteger(2), m), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), a, Pow(c, matchpyInteger(2)), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(2))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule242)

    pattern243 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-5), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule243 = ReplacementRule(pattern243, lambda b, x, a : Add(Mul(matchpyInteger(-1), Pow(Mul(b, x, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(2)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))))
    rubi.add(rule243)

    pattern244 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), Greater(Add(m_, matchpyInteger(1)), n_), Not(NegativeIntegerQ(Mul(Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule244 = ReplacementRule(pattern244, lambda b, p, x, n, a, m, c : Add(Mul(Pow(c, Add(n, matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Pow(c, n), Mul(Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1)), Pow(Mul(b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x)))))
    rubi.add(rule244)

    pattern245 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), Greater(Add(m_, matchpyInteger(1)), Mul(matchpyInteger(2), n_)), Not(NegativeIntegerQ(Mul(Add(m_, Mul(matchpyInteger(2), n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))))), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule245 = ReplacementRule(pattern245, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(c, Add(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), b1, b2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Pow(c, Mul(matchpyInteger(2), n)), Mul(Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), b1, b2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1)))), x)))))
    rubi.add(rule245)

    pattern246 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule246 = ReplacementRule(pattern246, lambda b, p, x, n, a, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule246)

    pattern247 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule247 = ReplacementRule(pattern247, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a1, a2, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), a1, a2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule247)

    pattern248 = Pattern(Int(Mul(x_, Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule248 = ReplacementRule(pattern248, lambda b, x, a : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(matchpyInteger(3), Rt(a, matchpyInteger(3)), Rt(b, matchpyInteger(3))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Rt(a, matchpyInteger(3)), Mul(Rt(b, matchpyInteger(3)), x)), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(3), Rt(a, matchpyInteger(3)), Rt(b, matchpyInteger(3))), matchpyInteger(-1))), Int(Mul(Add(Rt(a, matchpyInteger(3)), Mul(Rt(b, matchpyInteger(3)), x)), Pow(Add(Pow(Rt(a, matchpyInteger(3)), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Rt(a, matchpyInteger(3)), Rt(b, matchpyInteger(3)), x)), Mul(Pow(Rt(b, matchpyInteger(3)), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))))
    rubi.add(rule248)

    pattern249 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(Mul(Add(n_, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Add(n_, matchpyInteger(-1))), PosQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a, m)))
    rule249 = ReplacementRule(pattern249, lambda b, x, n, a, m : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Add(Mul(Mul(Mul(matchpyInteger(-1), Pow(Mul(matchpyInteger(-1), matchpyInteger(r)), Add(m, matchpyInteger(1)))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), x)), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(1))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1))))), x)))))
    rubi.add(rule249)

    pattern250 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(Add(n_, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Add(n_, matchpyInteger(-1))), NegQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a, m)))
    rule250 = ReplacementRule(pattern250, lambda b, x, n, a, m : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Add(Mul(Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(1))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), x))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Dist(Mul(matchpyInteger(2), Mul(Pow(Mul(matchpyInteger(-1), matchpyInteger(r)), Add(m, matchpyInteger(1))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1))))), x))))))
    rubi.add(rule250)

    pattern251 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(Add(n_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Add(n_, matchpyInteger(-1))), PosQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a, m)))
    rule251 = ReplacementRule(pattern251, lambda b, x, n, a, m : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Add(Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(Add(Mul(matchpyInteger(2), matchpyInteger(k)), matchpyInteger(-1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))), Add(Mul(matchpyInteger(2), Pow(matchpyInteger(-1), Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1)))), Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(2))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(1))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), x)))))
    rubi.add(rule251)

    pattern252 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(Add(n_, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Add(n_, matchpyInteger(-1))), NegQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a, m)))
    rule252 = ReplacementRule(pattern252, lambda b, x, n, a, m : Module(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), n))), matchpyInteger(k), matchpyInteger(u)), CompoundExpression(Set(matchpyInteger(u), Add(Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(matchpyInteger(2), matchpyInteger(k), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Cos(Mul(matchpyInteger(2), matchpyInteger(k), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(matchpyInteger(2), matchpyInteger(k), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x), Int(Mul(Add(Mul(matchpyInteger(r), Cos(Mul(matchpyInteger(2), matchpyInteger(k), m, Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1)))))), Mul(matchpyInteger(s), Cos(Mul(matchpyInteger(2), matchpyInteger(k), Add(m, matchpyInteger(1)), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x)), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(2), matchpyInteger(r), matchpyInteger(s), Cos(Mul(matchpyInteger(2), matchpyInteger(k), Mul(matchpyInteger(Pi), Pow(n, matchpyInteger(-1))))), x), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x))), Add(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(2))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Dist(Mul(matchpyInteger(2), Mul(Pow(matchpyInteger(r), Add(m, matchpyInteger(1))), Pow(Mul(a, n, Pow(matchpyInteger(s), m)), matchpyInteger(-1)))), Sum(matchpyInteger(u), List(matchpyInteger(k), matchpyInteger(1), Mul(Add(n, matchpyInteger(-2)), Pow(matchpyInteger(4), matchpyInteger(-1))))), x)))))
    rubi.add(rule252)

    pattern253 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Or(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), And(PosQ(Mul(a_, Pow(b_, matchpyInteger(-1)))), AtomQ(SplitProduct(matchpyInteger(SumBaseQ), a_)), AtomQ(SplitProduct(matchpyInteger(SumBaseQ), b_))))), (b, x, a)))
    rule253 = ReplacementRule(pattern253, lambda b, x, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), matchpyInteger(s)), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2)))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), matchpyInteger(s)), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2))))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x))))))
    rubi.add(rule253)

    pattern254 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(Not(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))))), (b, x, a)))
    rule254 = ReplacementRule(pattern254, lambda b, x, a : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x))))))
    rubi.add(rule254)

    pattern255 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(n_, Pow(matchpyInteger(4), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Add(n_, matchpyInteger(-1))), PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1))))), (b, x, n, a, m)))
    rule255 = ReplacementRule(pattern255, lambda b, x, n, a, m : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(4)))), Set(matchpyInteger(s), Denominator(Rt(Mul(a, Pow(b, matchpyInteger(-1))), matchpyInteger(4))))), Add(Mul(Mul(Pow(matchpyInteger(s), matchpyInteger(3)), Pow(Mul(matchpyInteger(2), Sqrt(matchpyInteger(2)), b, matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1)))))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(matchpyInteger(-1), Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r), matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1)))))), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Pow(matchpyInteger(s), matchpyInteger(3)), Pow(Mul(matchpyInteger(2), Sqrt(matchpyInteger(2)), b, matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1)))))), Pow(Add(Pow(matchpyInteger(r), matchpyInteger(2)), Mul(Sqrt(matchpyInteger(2)), matchpyInteger(r), matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(4), matchpyInteger(-1))))), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x))))))
    rubi.add(rule255)

    pattern256 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(n_, Pow(matchpyInteger(4), matchpyInteger(-1)))), PositiveIntegerQ(m_), Less(m_, Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))), Not(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))))), (b, x, n, a, m)))
    rule256 = ReplacementRule(pattern256, lambda b, x, n, a, m : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(r), Pow(Mul(matchpyInteger(2), a), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1))))))), matchpyInteger(-1))), x)))))
    rubi.add(rule256)

    pattern257 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, Mul(n_, Pow(matchpyInteger(4), matchpyInteger(-1)))), PositiveIntegerQ(m_), Inequality(Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(LessEqual), m_, matchpyInteger(Less), n_), Not(PositiveQ(Mul(a_, Pow(b_, matchpyInteger(-1)))))), (b, x, n, a, m)))
    rule257 = ReplacementRule(pattern257, lambda b, x, n, a, m : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Pow(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1))))))), matchpyInteger(-1))), x))))))
    rubi.add(rule257)

    pattern258 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(m_, n_), Greater(m_, Add(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))), (b, x, n, a, m)))
    rule258 = ReplacementRule(pattern258, lambda b, x, n, a, m : Int(PolynomialDivide(Pow(x, m), Add(a, Mul(b, Pow(x, n))), x), x))
    rubi.add(rule258)

    pattern259 = Pattern(Int(Mul(x_, Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(a_)), (b, x, a)))
    rule259 = ReplacementRule(pattern259, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Add(Mul(Sqrt(matchpyInteger(2)), Mul(matchpyInteger(s), Pow(Mul(Sqrt(Add(matchpyInteger(2), Sqrt(matchpyInteger(3)))), matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(r), matchpyInteger(-1))), Int(Mul(Add(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3)))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)))))
    rubi.add(rule259)

    pattern260 = Pattern(Int(Mul(x_, Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(a_)), (b, x, a)))
    rule260 = ReplacementRule(pattern260, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Add(Mul(Mul(matchpyInteger(-1), Sqrt(matchpyInteger(2))), Mul(matchpyInteger(s), Pow(Mul(Sqrt(Add(matchpyInteger(2), Mul(matchpyInteger(-1), Sqrt(matchpyInteger(3))))), matchpyInteger(r)), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(r), matchpyInteger(-1))), Int(Mul(Add(Mul(Add(matchpyInteger(1), Sqrt(matchpyInteger(3))), matchpyInteger(s)), Mul(matchpyInteger(r), x)), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)))))
    rubi.add(rule260)

    pattern261 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule261 = ReplacementRule(pattern261, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2)))), Add(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(matchpyInteger(q), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x))))))
    rubi.add(rule261)

    pattern262 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegativeQ(a_), PositiveQ(b_)), (b, x, a)))
    rule262 = ReplacementRule(pattern262, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)))), Add(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(matchpyInteger(q), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x))))))
    rubi.add(rule262)

    pattern263 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule263 = ReplacementRule(pattern263, lambda b, x, a : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)))), Add(Mul(Mul(matchpyInteger(-1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(q), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(q), Pow(x, matchpyInteger(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)))))
    rubi.add(rule263)

    pattern264 = Pattern(Int(Mul(Pow(x_, matchpyInteger(4)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(6)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule264 = ReplacementRule(pattern264, lambda b, x, a : With(List(Set(matchpyInteger(r), Numer(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3)))), Set(matchpyInteger(s), Denom(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(3))))), Add(Mul(Add(Sqrt(matchpyInteger(3)), matchpyInteger(-1)), Mul(Pow(matchpyInteger(s), matchpyInteger(2)), Pow(Mul(matchpyInteger(2), Pow(matchpyInteger(r), matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(6))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), Pow(matchpyInteger(r), matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Add(Mul(Add(Sqrt(matchpyInteger(3)), matchpyInteger(-1)), Pow(matchpyInteger(s), matchpyInteger(2))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), Pow(matchpyInteger(r), matchpyInteger(2)), Pow(x, matchpyInteger(4))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(6))))), matchpyInteger(-1))), x))))))
    rubi.add(rule264)

    pattern265 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(8)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), cons(True, (b, x, a)))
    rule265 = ReplacementRule(pattern265, lambda b, x, a : Add(Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4))), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4)), Pow(x, matchpyInteger(2)))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(8))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4))), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(4)), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(8))))), matchpyInteger(-1))), x)))))
    rubi.add(rule265)

    pattern266 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule266 = ReplacementRule(pattern266, lambda b, x, a : Add(Mul(Pow(x, matchpyInteger(3)), Pow(Mul(matchpyInteger(2), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(matchpyInteger(2), matchpyInteger(-1))), Int(Mul(Pow(x, matchpyInteger(2)), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule266)

    pattern267 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule267 = ReplacementRule(pattern267, lambda b, x, a : Add(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(matchpyInteger(2), b, x), matchpyInteger(-1))), Mul(Mul(a, Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(2)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x))))
    rubi.add(rule267)

    pattern268 = Pattern(Int(Mul(Pow(x_, matchpyInteger(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule268 = ReplacementRule(pattern268, lambda b, x, a : Add(Mul(matchpyInteger(-1), Pow(Mul(x, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(b, Int(Mul(Pow(x, matchpyInteger(2)), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule268)

    pattern269 = Pattern(Int(Mul(Pow(x_, matchpyInteger(-2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a)))
    rule269 = ReplacementRule(pattern269, lambda b, x, a : Mul(x, Mul(Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(3)), Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(4))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule269)

    pattern270 = Pattern(Int(Mul(Pow(Mul(c_, x_), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, c)))
    rule270 = ReplacementRule(pattern270, lambda b, x, a, c : Add(Mul(x, Mul(Sqrt(Mul(c, x)), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(matchpyInteger(2), matchpyInteger(-1))), Int(Mul(Sqrt(Mul(c, x)), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule270)

    pattern271 = Pattern(Int(Mul(Pow(Mul(c_, x_), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, c)))
    rule271 = ReplacementRule(pattern271, lambda b, x, a, c : Add(Mul(c, Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(b, Sqrt(Mul(c, x))), matchpyInteger(-1)))), Mul(a, Mul(Pow(c, matchpyInteger(2)), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Mul(c, x), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x))))
    rubi.add(rule271)

    pattern272 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, c)))
    rule272 = ReplacementRule(pattern272, lambda b, x, a, c : Add(Mul(matchpyInteger(-2), Pow(Mul(c, Sqrt(Mul(c, x)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(b, Pow(Pow(c, matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Sqrt(Mul(c, x)), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule272)

    pattern273 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), cons(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, c)))
    rule273 = ReplacementRule(pattern273, lambda b, x, a, c : Mul(Sqrt(Mul(c, x)), Mul(Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(2))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Mul(Pow(c, matchpyInteger(2)), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(2)), Pow(Add(matchpyInteger(1), Mul(a, Pow(Mul(b, Pow(x, matchpyInteger(2))), matchpyInteger(-1)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1))))), matchpyInteger(-1))), x)))
    rubi.add(rule273)

    pattern274 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(n_, matchpyInteger(-1))), NonzeroQ(Add(m_, Mul(n_, p_), matchpyInteger(1))), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule274 = ReplacementRule(pattern274, lambda b, p, x, n, a, m, c : Add(Mul(Pow(c, Add(n, matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(a, Pow(c, n), Mul(Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1)), Pow(Mul(b, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule274)

    pattern275 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), SumSimplerQ(m_, Mul(matchpyInteger(-1), n_)), NonzeroQ(Add(m_, Mul(n_, p_), matchpyInteger(1))), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_)))), (b, p, x, n, a, m, c)))
    rule275 = ReplacementRule(pattern275, lambda b, p, x, n, a, m, c : Add(Mul(Pow(c, Add(n, matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(a, Pow(c, n), Mul(Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1)), Pow(Mul(b, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule275)

    pattern276 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(m_), Greater(m_, Add(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), NonzeroQ(Add(m_, Mul(matchpyInteger(2), n_, p_), matchpyInteger(1))), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule276 = ReplacementRule(pattern276, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(c, Add(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b1, b2, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(a1, a2, Pow(c, Mul(matchpyInteger(2), n)), Mul(Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1)), Pow(Mul(b1, b2, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))))
    rubi.add(rule276)

    pattern277 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), SumSimplerQ(m_, Mul(matchpyInteger(-2), n_)), NonzeroQ(Add(m_, Mul(matchpyInteger(2), n_, p_), matchpyInteger(1))), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule277 = ReplacementRule(pattern277, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(c, Add(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b1, b2, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(a1, a2, Pow(c, Mul(matchpyInteger(2), n)), Mul(Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1)), Pow(Mul(b1, b2, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))))
    rubi.add(rule277)

    pattern278 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_), Less(m_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule278 = ReplacementRule(pattern278, lambda b, p, x, n, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b, Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, Pow(c, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule278)

    pattern279 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), SumSimplerQ(m_, n_), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_)))), (b, p, x, n, a, m, c)))
    rule279 = ReplacementRule(pattern279, lambda b, p, x, n, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b, Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, Pow(c, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule279)

    pattern280 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(m_), Less(m_, matchpyInteger(-1)), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule280 = ReplacementRule(pattern280, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b1, b2, Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a1, a2, Pow(c, Mul(matchpyInteger(2), n)), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(2), n))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))))
    rubi.add(rule280)

    pattern281 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), SumSimplerQ(m_, Mul(matchpyInteger(2), n_)), NegativeIntegerQ(Simplify(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule281 = ReplacementRule(pattern281, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, c, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b1, b2, Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a1, a2, Pow(c, Mul(matchpyInteger(2), n)), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), Add(m, Mul(matchpyInteger(2), n))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))))
    rubi.add(rule281)

    pattern282 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), FractionQ(m_), IntBinomialQ(a_, b_, c_, n_, m_, p_, x_)), (b, p, x, n, a, m, c)))
    rule282 = ReplacementRule(pattern282, lambda b, p, x, n, a, m, c : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(matchpyInteger(k), Pow(c, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(c, n), matchpyInteger(-1))))), p)), x), x, Pow(Mul(c, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule282)

    pattern283 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), FractionQ(m_), IntBinomialQ(Mul(a1_, a2_), Mul(b1_, b2_), c_, n_, m_, p_, x_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule283 = ReplacementRule(pattern283, lambda b1, p, x, n, b2, a2, a1, m, c : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(matchpyInteger(k), Pow(c, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a1, Mul(b1, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(c, n), matchpyInteger(-1))))), p), Pow(Add(a2, Mul(b2, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(c, n), matchpyInteger(-1))))), p)), x), x, Pow(Mul(c, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule283)

    pattern284 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), IntegersQ(m_, Add(p_, Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, p, x, n, a, m)))
    rule284 = ReplacementRule(pattern284, lambda b, p, x, n, a, m : Mul(Pow(a, Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))))), Subst(Int(Mul(Pow(x, m), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))))))
    rubi.add(rule284)

    pattern285 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), IntegersQ(m_, Add(p_, Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), (b1, p, x, n, b2, a2, a1, m)))
    rule285 = ReplacementRule(pattern285, lambda b1, p, x, n, b2, a2, a1, m : Mul(Pow(Mul(a1, a2), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), Subst(Int(Mul(Pow(x, m), Pow(Mul(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b1, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))), matchpyInteger(1))), Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b2, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))), matchpyInteger(1)))), matchpyInteger(-1))), x), x, Mul(x, Pow(Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1)))), Pow(Add(a2, Mul(b2, Pow(x, n))), Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), matchpyInteger(-1))))))
    rubi.add(rule285)

    pattern286 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), IntegerQ(m_), Less(Denominator(Add(p_, Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), Denominator(p_))), (b, p, x, n, a, m)))
    rule286 = ReplacementRule(pattern286, lambda b, p, x, n, a, m : Mul(Pow(Mul(a, Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))))), Subst(Int(Mul(Pow(x, m), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))))))
    rubi.add(rule286)

    pattern287 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), PositiveIntegerQ(Mul(matchpyInteger(2), n_)), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0)), Unequal(p_, Mul(matchpyInteger(-1), Pow(matchpyInteger(2), matchpyInteger(-1)))), IntegerQ(m_), Less(Denominator(Add(p_, Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))))), Denominator(p_))), (b1, p, x, n, b2, a2, a1, m)))
    rule287 = ReplacementRule(pattern287, lambda b1, p, x, n, b2, a2, a1, m : Mul(Pow(Mul(a1, Pow(Add(a1, Mul(b1, Pow(x, n))), matchpyInteger(-1))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), Pow(Mul(a2, Pow(Add(a2, Mul(b2, Pow(x, n))), matchpyInteger(-1))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), Subst(Int(Mul(Pow(x, m), Pow(Mul(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b1, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))), matchpyInteger(1))), Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b2, Pow(x, n)))), Add(p, Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))), matchpyInteger(1)))), matchpyInteger(-1))), x), x, Mul(x, Pow(Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1)))), Pow(Add(a2, Mul(b2, Pow(x, n))), Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), matchpyInteger(-1))))))
    rubi.add(rule287)

    pattern288 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(p, x), cons(And(NegativeIntegerQ(n_), IntegerQ(m_)), (b, p, x, n, a, m)))
    rule288 = ReplacementRule(pattern288, lambda b, p, x, n, a, m : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule288)

    pattern289 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Mul(matchpyInteger(2), n_)), IntegerQ(m_)), (b1, p, x, n, b2, a2, a1, m)))
    rule289 = ReplacementRule(pattern289, lambda b1, p, x, n, b2, a2, a1, m : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule289)

    pattern290 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(p, x), cons(And(NegativeIntegerQ(n_), FractionQ(m_)), (b, p, x, n, a, m, c)))
    rule290 = ReplacementRule(pattern290, lambda b, p, x, n, a, m, c : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), Pow(c, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(c, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), p), Pow(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(matchpyInteger(1), Pow(Pow(Mul(c, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule290)

    pattern291 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Mul(matchpyInteger(2), n_)), FractionQ(m_)), (b1, p, x, n, b2, a2, a1, m, c)))
    rule291 = ReplacementRule(pattern291, lambda b1, p, x, n, b2, a2, a1, m, c : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), Pow(c, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a1, Mul(b1, Pow(c, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), p), Mul(Pow(Add(a2, Mul(b2, Pow(c, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), p), Pow(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(Pow(Mul(c, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule291)

    pattern292 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(NegativeIntegerQ(n_), Not(RationalQ(m_))), (b, p, x, n, a, m, c)))
    rule292 = ReplacementRule(pattern292, lambda b, p, x, n, a, m, c : Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), m)), Pow(Pow(x, matchpyInteger(-1)), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule292)

    pattern293 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NegativeIntegerQ(Mul(matchpyInteger(2), n_)), Not(RationalQ(m_))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule293 = ReplacementRule(pattern293, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), m)), Pow(Pow(x, matchpyInteger(-1)), m), Subst(Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule293)

    pattern294 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(p, x), cons(And(FractionQ(n_)), (b, p, x, n, a, m)))
    rule294 = ReplacementRule(pattern294, lambda b, p, x, n, a, m : With(List(Set(matchpyInteger(k), Denominator(n))), Mul(matchpyInteger(k), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(k), n)))), p)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule294)

    pattern295 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), FractionQ(Mul(matchpyInteger(2), n_))), (b1, p, x, n, b2, a2, a1, m)))
    rule295 = ReplacementRule(pattern295, lambda b1, p, x, n, b2, a2, a1, m : With(List(Set(matchpyInteger(k), Denominator(Mul(matchpyInteger(2), n)))), Mul(matchpyInteger(k), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(matchpyInteger(k), n)))), p), Pow(Add(a2, Mul(b2, Pow(x, Mul(matchpyInteger(k), n)))), p)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule295)

    pattern296 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(FractionQ(n_)), (b, p, x, n, a, m, c)))
    rule296 = ReplacementRule(pattern296, lambda b, p, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule296)

    pattern297 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), FractionQ(Mul(matchpyInteger(2), n_))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule297 = ReplacementRule(pattern297, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))
    rubi.add(rule297)

    pattern298 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1))))), Not(IntegerQ(n_))), (b, p, x, n, a, m)))
    rule298 = ReplacementRule(pattern298, lambda b, p, x, n, a, m : Mul(Mul(matchpyInteger(1), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), p), x), x, Pow(x, Add(m, matchpyInteger(1))))))
    rubi.add(rule298)

    pattern299 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Simplify(Mul(matchpyInteger(2), Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1)))))), Not(IntegerQ(Mul(matchpyInteger(2), n_)))), (b1, p, x, n, b2, a2, a1, m)))
    rule299 = ReplacementRule(pattern299, lambda b1, p, x, n, b2, a2, a1, m : Mul(Mul(matchpyInteger(1), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a1, Mul(b1, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), p), Pow(Add(a2, Mul(b2, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), p)), x), x, Pow(x, Add(m, matchpyInteger(1))))))
    rubi.add(rule299)

    pattern300 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1))))), Not(IntegerQ(n_))), (b, p, x, n, a, m, c)))
    rule300 = ReplacementRule(pattern300, lambda b, p, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule300)

    pattern301 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Simplify(Mul(matchpyInteger(2), Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1)))))), Not(IntegerQ(Mul(matchpyInteger(2), n_)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule301 = ReplacementRule(pattern301, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))
    rubi.add(rule301)

    pattern302 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_)), RationalQ(p_), Greater(p_, matchpyInteger(0))), (b, p, x, n, a, m)))
    rule302 = ReplacementRule(pattern302, lambda b, p, x, n, a, m : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(b, n, Mul(p, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1)))), x)))))
    rubi.add(rule302)

    pattern303 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_)), RationalQ(p_), Greater(p_, matchpyInteger(0))), (b1, p, x, n, b2, a2, a1, m)))
    rule303 = ReplacementRule(pattern303, lambda b1, p, x, n, b2, a2, a1, m : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), p), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), b1, b2, n, Mul(p, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, n)), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(-1)))), x)))))
    rubi.add(rule303)

    pattern304 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))), p_)), RationalQ(p_), Greater(p_, matchpyInteger(0))), (b, p, x, n, a, m, c)))
    rule304 = ReplacementRule(pattern304, lambda b, p, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule304)

    pattern305 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), ZeroQ(Add(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1))), p_)), RationalQ(p_), Greater(p_, matchpyInteger(0))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule305 = ReplacementRule(pattern305, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))
    rubi.add(rule305)

    pattern306 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), RationalQ(p_), Greater(p_, matchpyInteger(0)), NonzeroQ(Add(m_, Mul(n_, p_), matchpyInteger(1)))), (b, p, x, n, a, m, c)))
    rule306 = ReplacementRule(pattern306, lambda b, p, x, n, a, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(a, n, Mul(p, Pow(Add(m, Mul(n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1)))), x))))
    rubi.add(rule306)

    pattern307 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), RationalQ(p_), Greater(p_, matchpyInteger(0)), NonzeroQ(Add(m_, Mul(matchpyInteger(2), n_, p_), matchpyInteger(1)))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule307 = ReplacementRule(pattern307, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), p), Pow(Mul(c, Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(2), a1, a2, n, Mul(p, Pow(Add(m, Mul(matchpyInteger(2), n, p), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(-1)))), x))))
    rubi.add(rule307)

    pattern308 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0))), (b, p, x, n, a, m)))
    rule308 = ReplacementRule(pattern308, lambda b, p, x, n, a, m : With(List(Set(matchpyInteger(k), Denominator(p))), Mul(matchpyInteger(k), Mul(Pow(a, Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))))), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))))), matchpyInteger(-1))), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(k))))), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(1))), matchpyInteger(-1))), x), x, Mul(Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule308)

    pattern309 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0))), (b1, p, x, n, b2, a2, a1, m)))
    rule309 = ReplacementRule(pattern309, lambda b1, p, x, n, b2, a2, a1, m : With(List(Set(matchpyInteger(k), Denominator(p))), Mul(matchpyInteger(k), Mul(Pow(Mul(a1, a2), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1)))))), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Simplify(Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1))))), matchpyInteger(-1))), Pow(Mul(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b1, Pow(x, matchpyInteger(k))))), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1)))), matchpyInteger(1))), Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b2, Pow(x, matchpyInteger(k))))), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n), matchpyInteger(-1)))), matchpyInteger(1)))), matchpyInteger(-1))), x), x, Mul(Pow(x, Mul(matchpyInteger(2), Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1))))), Pow(Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), Pow(Add(a2, Mul(b2, Pow(x, n))), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))), matchpyInteger(-1)))))))
    rubi.add(rule309)

    pattern310 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0))), (b, p, x, n, a, m, c)))
    rule310 = ReplacementRule(pattern310, lambda b, p, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))
    rubi.add(rule310)

    pattern311 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))))), RationalQ(p_), Less(matchpyInteger(-1), p_, matchpyInteger(0))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule311 = ReplacementRule(pattern311, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a1, Mul(b1, Pow(x, n))), p), Pow(Add(a2, Mul(b2, Pow(x, n))), p)), x)))
    rubi.add(rule311)

    pattern312 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, p, x, n, a, m, c)))
    rule312 = ReplacementRule(pattern312, lambda b, p, x, n, a, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule312)

    pattern313 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), IntegerQ(Add(p_, Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), RationalQ(p_), Less(p_, matchpyInteger(-1))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule313 = ReplacementRule(pattern313, lambda b1, p, x, n, b2, a2, a1, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(c, x), Add(m, matchpyInteger(1)))), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), a1, a2, c, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(m, Mul(matchpyInteger(2), n, Add(p, matchpyInteger(1))), matchpyInteger(1)), Pow(Mul(matchpyInteger(2), a1, a2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(a1, Mul(b1, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule313)

    pattern314 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(FractionQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), SumSimplerQ(m_, Mul(matchpyInteger(-1), n_))), (b, x, n, a, m)))
    rule314 = ReplacementRule(pattern314, lambda b, x, n, a, m : With(List(Set(matchpyInteger(mn), Simplify(Add(m, Mul(matchpyInteger(-1), n))))), Add(Mul(Pow(x, Add(matchpyInteger(mn), matchpyInteger(1))), Pow(Mul(b, Add(matchpyInteger(mn), matchpyInteger(1))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, matchpyInteger(mn)), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x))))))
    rubi.add(rule314)

    pattern315 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), cons(And(FractionQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), SumSimplerQ(m_, n_)), (b, x, n, a, m)))
    rule315 = ReplacementRule(pattern315, lambda b, x, n, a, m : Add(Mul(Pow(x, Add(m, matchpyInteger(1))), Pow(Mul(a, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Mul(matchpyInteger(-1), Mul(Mul(b, Pow(a, matchpyInteger(-1))), Int(Mul(Pow(x, Simplify(Add(m, n))), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)))))
    rubi.add(rule315)

    pattern316 = Pattern(Int(Mul(Pow(Mul(c_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), cons(And(FractionQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))), Or(SumSimplerQ(m_, n_), SumSimplerQ(m_, Mul(matchpyInteger(-1), n_)))), (b, x, n, a, m, c)))
    rule316 = ReplacementRule(pattern316, lambda b, x, n, a, m, c : Mul(Pow(c, IntPart(m)), Mul(Pow(Mul(c, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)))
    rubi.add(rule316)

    pattern317 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(p_)), Or(NegativeIntegerQ(p_), PositiveQ(a_))), (b, p, x, n, a, m, c)))
    rule317 = ReplacementRule(pattern317, lambda b, p, x, n, a, m, c : Mul(Pow(a, p), Mul(Pow(Mul(c, x), Add(m, matchpyInteger(1))), Pow(Mul(c, Add(m, matchpyInteger(1))), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(-1), p), Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), Add(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), matchpyInteger(1)), Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, n), Pow(a, matchpyInteger(-1)))))))
    rubi.add(rule317)

    pattern318 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(Not(PositiveIntegerQ(p_)), Not(Or(NegativeIntegerQ(p_), PositiveQ(a_)))), (b, p, x, n, a, m, c)))
    rule318 = ReplacementRule(pattern318, lambda b, p, x, n, a, m, c : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n))), FracPart(p)), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), FracPart(p)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), p)), x)))
    rubi.add(rule318)

    pattern319 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(x_, Wildcard.optional('m', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearQ(v_, x_), IntegerQ(m_), NonzeroQ(Add(v_, Mul(matchpyInteger(-1), x_)))), (b, v, p, x, n, a, m)))
    rule319 = ReplacementRule(pattern319, lambda b, v, p, x, n, a, m : Mul(Mul(matchpyInteger(1), Pow(Pow(Coefficient(v, x, matchpyInteger(1)), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(Add(x, Mul(matchpyInteger(-1), Coefficient(v, x, matchpyInteger(0)))), m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x), x, v)))
    rubi.add(rule319)

    pattern320 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(LinearPairQ(u_, v_, x_)), (b, v, p, u, x, n, a, m)))
    rule320 = ReplacementRule(pattern320, lambda b, v, p, u, x, n, a, m : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, matchpyInteger(1)), Pow(v, m)), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x), x, v)))
    rubi.add(rule320)

    pattern321 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('c', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, n_))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Not(IntegerQ(p_))), (b1, p, x, n, b2, a2, a1, m, c)))
    rule321 = ReplacementRule(pattern321, lambda b1, p, x, n, b2, a2, a1, m, c : Mul(Pow(Add(a1, Mul(b1, Pow(x, n))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, n))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), FracPart(p)), matchpyInteger(-1))), Int(Mul(Pow(Mul(c, x), m), Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, Mul(matchpyInteger(2), n)))), p)), x)))
    rubi.add(rule321)

    pattern322 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(p_, q_)), (b, q, p, x, n, a, d, c)))
    rule322 = ReplacementRule(pattern322, lambda b, q, p, x, n, a, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x))
    rubi.add(rule322)

    pattern323 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegersQ(p_, q_), NegQ(n_)), (b, q, p, x, n, a, d, c)))
    rule323 = ReplacementRule(pattern323, lambda b, q, p, x, n, a, d, c : Int(Mul(Pow(x, Mul(n, Add(p, q))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(d, Mul(c, Pow(x, Mul(matchpyInteger(-1), n)))), q)), x))
    rubi.add(rule323)

    pattern324 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(n_)), (b, q, p, x, n, a, d, c)))
    rule324 = ReplacementRule(pattern324, lambda b, q, p, x, n, a, d, c : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Pow(x, matchpyInteger(2)), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule324)

    pattern325 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), FractionQ(n_)), (b, q, p, x, n, a, d, c)))
    rule325 = ReplacementRule(pattern325, lambda b, q, p, x, n, a, d, c : With(List(Set(matchpyInteger(g), Denominator(n))), Mul(matchpyInteger(g), Subst(Int(Mul(Pow(x, Add(matchpyInteger(g), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(g), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(g), n)))), q)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(g), matchpyInteger(-1))))))))
    rubi.add(rule325)

    pattern326 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, p_), matchpyInteger(1))), IntegerQ(n_)), (b, p, x, n, a, d, c)))
    rule326 = ReplacementRule(pattern326, lambda b, p, x, n, a, d, c : Subst(Int(Mul(matchpyInteger(1), Pow(Add(c, Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(x, n)))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1)))))
    rubi.add(rule326)

    pattern327 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(1))), matchpyInteger(1))), RationalQ(q_), Greater(q_, matchpyInteger(0)), NonzeroQ(Add(p_, matchpyInteger(1)))), (b, q, p, x, n, a, d, c)))
    rule327 = ReplacementRule(pattern327, lambda b, q, p, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), x), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(c, Mul(q, Pow(Mul(a, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1)))), x)))))
    rubi.add(rule327)

    pattern328 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(1))), matchpyInteger(1))), NegativeIntegerQ(p_)), (b, q, p, x, n, a, d, c)))
    rule328 = ReplacementRule(pattern328, lambda b, q, p, x, n, a, d, c : Mul(Pow(a, p), Mul(x, Pow(Mul(Pow(c, Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))))), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Mul(matchpyInteger(-1), p), Add(matchpyInteger(1), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(Pow(x, n), Pow(Mul(a, Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1)))))))
    rubi.add(rule328)

    pattern329 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(1))), matchpyInteger(1)))), (b, q, p, x, n, a, d, c)))
    rule329 = ReplacementRule(pattern329, lambda b, q, p, x, n, a, d, c : Mul(x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Mul(c, Pow(Mul(c, Mul(Add(a, Mul(b, Pow(x, n))), Pow(Mul(a, Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1)))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), p))), matchpyInteger(-1))), Hypergeometric2F1(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Mul(matchpyInteger(-1), p), Add(matchpyInteger(1), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(Pow(x, n), Pow(Mul(a, Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1)))))))
    rubi.add(rule329)

    pattern330 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(2))), matchpyInteger(1))), ZeroQ(Add(Mul(a_, d_, Add(p_, matchpyInteger(1))), Mul(b_, c_, Add(q_, matchpyInteger(1)))))), (b, q, p, x, n, a, d, c)))
    rule330 = ReplacementRule(pattern330, lambda b, q, p, x, n, a, d, c : Mul(x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, c), matchpyInteger(-1)))))
    rubi.add(rule330)

    pattern331 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(2))), matchpyInteger(1))), Or(And(RationalQ(p_), Less(p_, matchpyInteger(-1))), Not(And(RationalQ(q_), Less(q_, matchpyInteger(-1))))), NonzeroQ(Add(p_, matchpyInteger(1)))), (b, q, p, x, n, a, d, c)))
    rule331 = ReplacementRule(pattern331, lambda b, q, p, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), b), x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(b, c), Mul(n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))))), Pow(Mul(a, n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))))
    rubi.add(rule331)

    pattern332 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(a_, d_), Mul(matchpyInteger(-1), Mul(b_, c_, Add(Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1))))))), (b, p, x, n, a, d, c)))
    rule332 = ReplacementRule(pattern332, lambda b, p, x, n, a, d, c : Mul(c, x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(a, matchpyInteger(-1)))))
    rubi.add(rule332)

    pattern333 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Or(And(RationalQ(p_), Less(p_, matchpyInteger(-1))), NegativeIntegerQ(Add(Mul(matchpyInteger(1), Pow(n_, matchpyInteger(-1))), p_)))), (b, p, x, n, a, d, c)))
    rule333 = ReplacementRule(pattern333, lambda b, p, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d), Mul(matchpyInteger(-1), Mul(b, c, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), x)))))
    rubi.add(rule333)

    pattern334 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(n_), Less(n_, matchpyInteger(0))), (b, x, n, a, d, c)))
    rule334 = ReplacementRule(pattern334, lambda b, x, n, a, d, c : Add(Mul(c, Mul(x, Pow(a, matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(a, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), matchpyInteger(-1))), x)))))
    rubi.add(rule334)

    pattern335 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)))), (b, p, x, n, a, d, c)))
    rule335 = ReplacementRule(pattern335, lambda b, p, x, n, a, d, c : Add(Mul(d, x, Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d), Mul(matchpyInteger(-1), Mul(b, c, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(b, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), p), x)))))
    rubi.add(rule335)

    pattern336 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_, p_), NegativeIntegerQ(q_), GreaterEqual(p_, Mul(matchpyInteger(-1), q_))), (b, q, p, x, n, a, d, c)))
    rule336 = ReplacementRule(pattern336, lambda b, q, p, x, n, a, d, c : Int(PolynomialDivide(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Mul(matchpyInteger(-1), q)), x), x))
    rubi.add(rule336)

    pattern337 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, n, a, d, c)))
    rule337 = ReplacementRule(pattern337, lambda b, x, n, a, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x)))))
    rubi.add(rule337)

    pattern338 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(3), a_, d_))), PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule338 = ReplacementRule(pattern338, lambda b, x, a, d, c : Add(Mul(Mul(Sqrt(matchpyInteger(3)), Pow(Mul(matchpyInteger(2), c), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Add(Sqrt(matchpyInteger(3)), Mul(matchpyInteger(-1), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x)))), matchpyInteger(-1))), x)), Mul(Mul(Sqrt(matchpyInteger(3)), Pow(Mul(matchpyInteger(2), c), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Add(Sqrt(matchpyInteger(3)), Mul(Rt(Mul(b, Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), matchpyInteger(-1))), x))))
    rubi.add(rule338)

    pattern339 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(3))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(3), a_, d_))), NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule339 = ReplacementRule(pattern339, lambda b, x, a, d, c : Add(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(6), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(3), Mul(Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x)), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(6), matchpyInteger(-1))), Int(Mul(Add(matchpyInteger(3), Mul(matchpyInteger(-1), Mul(Rt(Mul(Mul(matchpyInteger(-1), b), Pow(a, matchpyInteger(-1))), matchpyInteger(2)), x))), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x))))
    rubi.add(rule339)

    pattern340 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(2), matchpyInteger(3))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(3), a_, d_)))), (b, x, a, d, c)))
    rule340 = ReplacementRule(pattern340, lambda b, x, a, d, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)))))
    rubi.add(rule340)

    pattern341 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule341 = ReplacementRule(pattern341, lambda b, x, a, d, c : Mul(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Pow(Mul(matchpyInteger(2), x), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), Mul(x, Pow(a, matchpyInteger(-1))))), Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Add(c, Mul(d, x))), matchpyInteger(-1))), x), x, Pow(x, matchpyInteger(2)))))
    rubi.add(rule341)

    pattern342 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule342 = ReplacementRule(pattern342, lambda b, x, a, d, c : Mul(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, matchpyInteger(2)), Pow(a, matchpyInteger(-1))))), Pow(Mul(matchpyInteger(2), x), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Mul(Mul(matchpyInteger(-1), b), Mul(x, Pow(a, matchpyInteger(-1))))), Pow(Add(a, Mul(b, x)), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Add(c, Mul(d, x))), matchpyInteger(-1))), x), x, Pow(x, matchpyInteger(2)))))
    rubi.add(rule342)

    pattern343 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Greater(p_, matchpyInteger(0)), Or(Equal(p_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1)))), Equal(Denominator(p_), matchpyInteger(4)))), (b, p, x, a, d, c)))
    rule343 = ReplacementRule(pattern343, lambda b, p, x, a, d, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)))))
    rubi.add(rule343)

    pattern344 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), Equal(Denominator(p_), matchpyInteger(4)), Or(Equal(p_, Mul(matchpyInteger(-5), Pow(matchpyInteger(4), matchpyInteger(-1)))), Equal(p_, Mul(matchpyInteger(-7), Pow(matchpyInteger(4), matchpyInteger(-1)))))), (b, p, x, a, d, c)))
    rule344 = ReplacementRule(pattern344, lambda b, p, x, a, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), p), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))), x)))))
    rubi.add(rule344)

    pattern345 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), PosQ(Mul(a_, b_))), (b, x, a, d, c)))
    rule345 = ReplacementRule(pattern345, lambda b, x, a, d, c : Mul(Mul(a, Pow(c, matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(matchpyInteger(4), a, b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))))))
    rubi.add(rule345)

    pattern346 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(ZeroQ(Add(Mul(b_, c_), Mul(a_, d_))), NegQ(Mul(a_, b_))), (b, x, a, d, c)))
    rule346 = ReplacementRule(pattern346, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(Mul(matchpyInteger(-1), a), b), matchpyInteger(4)))), Add(Mul(Mul(a, Pow(Mul(matchpyInteger(2), c, matchpyInteger(q)), matchpyInteger(-1))), ArcTan(Mul(matchpyInteger(q), x, Mul(Add(a, Mul(Pow(matchpyInteger(q), matchpyInteger(2)), Pow(x, matchpyInteger(2)))), Pow(Mul(a, Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1)))))), Mul(Mul(a, Pow(Mul(matchpyInteger(2), c, matchpyInteger(q)), matchpyInteger(-1))), ArcTanh(Mul(matchpyInteger(q), x, Mul(Add(a, Mul(matchpyInteger(-1), Mul(Pow(matchpyInteger(q), matchpyInteger(2)), Pow(x, matchpyInteger(2))))), Pow(Mul(a, Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1)))))))))
    rubi.add(rule346)

    pattern347 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule347 = ReplacementRule(pattern347, lambda b, x, a, d, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), Add(c, Mul(d, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)))))
    rubi.add(rule347)

    pattern348 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(1), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule348 = ReplacementRule(pattern348, lambda b, x, a, d, c : Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), Sqrt(Mul(a, Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), matchpyInteger(-1)))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(4)))))), Add(c, Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))))))
    rubi.add(rule348)

    pattern349 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Or(Equal(p_, Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), Equal(p_, Mul(matchpyInteger(5), Pow(matchpyInteger(4), matchpyInteger(-1)))))), (b, p, x, a, d, c)))
    rule349 = ReplacementRule(pattern349, lambda b, p, x, a, d, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Add(p, matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)))))
    rubi.add(rule349)

    pattern350 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule350 = ReplacementRule(pattern350, lambda b, x, a, d, c : Add(Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), c), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), c), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(4))))), Add(matchpyInteger(1), Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x))))
    rubi.add(rule350)

    pattern351 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-3), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule351 = ReplacementRule(pattern351, lambda b, x, a, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)))))
    rubi.add(rule351)

    pattern352 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PosQ(Mul(d_, Pow(c_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule352 = ReplacementRule(pattern352, lambda b, x, a, d, c : Mul(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Mul(c, Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Mul(c, Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Pow(Mul(a, Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticE(ArcTan(Mul(Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))))))))
    rubi.add(rule352)

    pattern353 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Less(matchpyInteger(0), q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, n_, p_, q_, x_)), (b, q, p, x, n, a, d, c)))
    rule353 = ReplacementRule(pattern353, lambda b, q, p, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), x), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), Mul(d, Add(Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule353)

    pattern354 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, n_, p_, q_, x_)), (b, q, p, x, n, a, d, c)))
    rule354 = ReplacementRule(pattern354, lambda b, q, p, x, n, a, d, c : Add(Mul(Add(Mul(a, d), Mul(matchpyInteger(-1), Mul(c, b))), x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(a, d), Mul(matchpyInteger(-1), Mul(c, b, Add(Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1)))))), Mul(d, Add(Mul(a, d, Add(Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, c, Add(Mul(n, Add(p, q)), matchpyInteger(1))))), Pow(x, n))), x)), x)))))
    rubi.add(rule354)

    pattern355 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), Not(And(Not(IntegerQ(p_)), IntegerQ(q_), Less(q_, matchpyInteger(-1)))), IntBinomialQ(a_, b_, c_, d_, n_, p_, q_, x_)), (b, q, p, x, n, a, d, c)))
    rule355 = ReplacementRule(pattern355, lambda b, q, p, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(-1), b), x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(b, c), Mul(n, Add(p, matchpyInteger(1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(d, b, Add(Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule355)

    pattern356 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), IntegersQ(p_, q_), Greater(Add(p_, q_), matchpyInteger(0))), (b, q, p, x, n, a, d, c)))
    rule356 = ReplacementRule(pattern356, lambda b, q, p, x, n, a, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x))
    rubi.add(rule356)

    pattern357 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(q_), Greater(q_, matchpyInteger(1)), NonzeroQ(Add(Mul(n_, Add(p_, q_)), matchpyInteger(1))), Not(And(IntegerQ(p_), Greater(p_, matchpyInteger(1)))), IntBinomialQ(a_, b_, c_, d_, n_, p_, q_, x_)), (b, q, p, x, n, a, d, c)))
    rule357 = ReplacementRule(pattern357, lambda b, q, p, x, n, a, d, c : Add(Mul(d, x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(b, Add(Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(b, c, Add(Mul(n, Add(p, q)), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(d, Add(Mul(b, c, Add(Mul(n, Add(p, Mul(matchpyInteger(2), q), matchpyInteger(-1))), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(a, d, Add(Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1))))), Pow(x, n))), x)), x))))
    rubi.add(rule357)

    pattern358 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Greater(q_, matchpyInteger(0)), Greater(p_, matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, n_, p_, q_, x_)), (b, q, p, x, n, a, d, c)))
    rule358 = ReplacementRule(pattern358, lambda b, q, p, x, n, a, d, c : Add(Mul(x, Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(Mul(n, Add(p, q)), matchpyInteger(1)), matchpyInteger(-1)))), Mul(Mul(n, Pow(Add(Mul(n, Add(p, q)), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(a, c, Add(p, q)), Mul(Add(Mul(q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(a, d, Add(p, q))), Pow(x, n))), x)), x))))
    rubi.add(rule358)

    pattern359 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), Not(SimplerSqrtQ(Mul(b_, Pow(a_, matchpyInteger(-1))), Mul(d_, Pow(c_, matchpyInteger(-1)))))), (b, x, a, d, c)))
    rule359 = ReplacementRule(pattern359, lambda b, x, a, d, c : Mul(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Mul(a, Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Mul(c, Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Pow(Mul(a, Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticF(ArcTan(Mul(Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))))))))
    rubi.add(rule359)

    pattern360 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), PositiveQ(a_), Not(And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), SimplerSqrtQ(Mul(Mul(matchpyInteger(-1), b_), Pow(a_, matchpyInteger(-1))), Mul(Mul(matchpyInteger(-1), d_), Pow(c_, matchpyInteger(-1))))))), (b, x, a, d, c)))
    rule360 = ReplacementRule(pattern360, lambda b, x, a, d, c : Mul(Mul(matchpyInteger(1), Pow(Mul(Sqrt(a), Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticF(ArcSin(Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))))))
    rubi.add(rule360)

    pattern361 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), PositiveQ(Add(a_, Mul(matchpyInteger(-1), Mul(b_, Mul(c_, Pow(d_, matchpyInteger(-1)))))))), (b, x, a, d, c)))
    rule361 = ReplacementRule(pattern361, lambda b, x, a, d, c : Mul(Mul(matchpyInteger(-1), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Add(a, Mul(matchpyInteger(-1), Mul(b, Mul(c, Pow(d, matchpyInteger(-1)))))))), matchpyInteger(-1))), EllipticF(ArcCos(Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))))))
    rubi.add(rule361)

    pattern362 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(Not(PositiveQ(c_))), (b, x, a, d, c)))
    rule362 = ReplacementRule(pattern362, lambda b, x, a, d, c : Mul(Mul(Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))
    rubi.add(rule362)

    pattern363 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule363 = ReplacementRule(pattern363, lambda b, x, a, d, c : Add(Mul(a, Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(b, Int(Mul(Pow(x, matchpyInteger(2)), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule363)

    pattern364 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), NegQ(Mul(b_, Pow(a_, matchpyInteger(-1))))), (b, x, a, d, c)))
    rule364 = ReplacementRule(pattern364, lambda b, x, a, d, c : Add(Mul(Mul(b, Pow(d, matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(d, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule364)

    pattern365 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), PositiveQ(a_)), (b, x, a, d, c)))
    rule365 = ReplacementRule(pattern365, lambda b, x, a, d, c : Mul(Mul(Sqrt(a), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticE(ArcSin(Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))))))
    rubi.add(rule365)

    pattern366 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), PositiveQ(Add(a_, Mul(matchpyInteger(-1), Mul(b_, Mul(c_, Pow(d_, matchpyInteger(-1)))))))), (b, x, a, d, c)))
    rule366 = ReplacementRule(pattern366, lambda b, x, a, d, c : Mul(Mul(Mul(matchpyInteger(-1), Sqrt(Add(a, Mul(matchpyInteger(-1), Mul(b, Mul(c, Pow(d, matchpyInteger(-1)))))))), Pow(Mul(Sqrt(c), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticE(ArcCos(Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Mul(b, Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1)))))))
    rubi.add(rule366)

    pattern367 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), Not(PositiveQ(a_))), (b, x, a, d, c)))
    rule367 = ReplacementRule(pattern367, lambda b, x, a, d, c : Mul(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(matchpyInteger(1), Mul(Mul(b, Pow(a, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(matchpyInteger(1), Mul(Mul(b, Pow(a, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)))
    rubi.add(rule367)

    pattern368 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), Not(PositiveQ(c_))), (b, x, a, d, c)))
    rule368 = ReplacementRule(pattern368, lambda b, x, a, d, c : Mul(Mul(Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)))
    rubi.add(rule368)

    pattern369 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(p_)), (b, q, p, x, n, a, d, c)))
    rule369 = ReplacementRule(pattern369, lambda b, q, p, x, n, a, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x))
    rubi.add(rule369)

    pattern370 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(n_, matchpyInteger(1))), PositiveQ(a_), PositiveQ(c_)), (b, q, p, x, n, a, d, c)))
    rule370 = ReplacementRule(pattern370, lambda b, q, p, x, n, a, d, c : Mul(Pow(a, p), Pow(c, q), x, AppellF1(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Mul(matchpyInteger(-1), p), Mul(matchpyInteger(-1), q), Add(matchpyInteger(1), Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, n), Pow(a, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), d), Mul(Pow(x, n), Pow(c, matchpyInteger(-1)))))))
    rubi.add(rule370)

    pattern371 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(n_, matchpyInteger(1))), Not(PositiveQ(a_))), (b, q, p, x, n, a, d, c)))
    rule371 = ReplacementRule(pattern371, lambda b, q, p, x, n, a, d, c : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n))), FracPart(p)), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), FracPart(p)), matchpyInteger(-1))), Int(Mul(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule371)

    pattern372 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(q_), Or(PosQ(n_), Not(IntegerQ(p_)))), (q, b, p, x, n, a, d, mn, c)))
    rule372 = ReplacementRule(pattern372, lambda q, b, p, x, n, a, d, mn, c : Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(d, Mul(c, Pow(x, n))), q), Pow(Pow(x, Mul(n, q)), matchpyInteger(-1)))), x))
    rubi.add(rule372)

    pattern373 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), p_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), Not(IntegerQ(q_)), Not(IntegerQ(p_))), (b, q, p, x, n, a, d, mn, c)))
    rule373 = ReplacementRule(pattern373, lambda b, q, p, x, n, a, d, mn, c : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), FracPart(q)), Pow(Pow(Add(d, Mul(c, Pow(x, n))), FracPart(q)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(d, Mul(c, Pow(x, n))), q), Pow(Pow(x, Mul(n, q)), matchpyInteger(-1)))), x)))
    rubi.add(rule373)

    pattern374 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(u_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(u_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, q, p, u, x, n, a, d, c)))
    rule374 = ReplacementRule(pattern374, lambda b, q, p, u, x, n, a, d, c : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x, u)))
    rubi.add(rule374)

    pattern375 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', matchpyInteger(1))), Pow(v_, Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(PseudoBinomialPairQ(u_, v_, x_)), (q, v, p, u, x)))
    rule375 = ReplacementRule(pattern375, lambda q, v, p, u, x : Int(Mul(Pow(NormalizePseudoBinomial(u, x), p), Pow(NormalizePseudoBinomial(v, x), q)), x))
    rubi.add(rule375)

    pattern376 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('p', matchpyInteger(1))), Pow(v_, Wildcard.optional('q', matchpyInteger(1))), Pow(x_, Wildcard.optional('m', matchpyInteger(1)))), x_), FreeQ(p, x), FreeQ(q, x), cons(And(IntegersQ(p_, Mul(m_, Pow(p_, matchpyInteger(-1)))), PseudoBinomialPairQ(Mul(Pow(x_, Mul(m_, Pow(p_, matchpyInteger(-1)))), u_), v_, x_)), (q, v, p, u, x, m)))
    rule376 = ReplacementRule(pattern376, lambda q, v, p, u, x, m : Int(Mul(Pow(NormalizePseudoBinomial(Mul(Pow(x, Mul(m, Pow(p, matchpyInteger(-1)))), u), x), p), Pow(NormalizePseudoBinomial(v, x), q)), x))
    rubi.add(rule376)

    pattern377 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_)), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Or(IntegerQ(m_), PositiveQ(e_)), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, p, e, x, n, d, m, c)))
    rule377 = ReplacementRule(pattern377, lambda b, q, p, e, x, n, d, m, c : Mul(Mul(Pow(e, m), Pow(Mul(n, Pow(b, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1)))), matchpyInteger(-1))), Subst(Int(Mul(Pow(Mul(b, x), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), q)), x), x, Pow(x, n))))
    rubi.add(rule377)

    pattern378 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Or(IntegerQ(m_), PositiveQ(e_)), Not(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))))), (b, q, p, e, n, x, d, m, c)))
    rule378 = ReplacementRule(pattern378, lambda b, q, p, e, n, x, d, m, c : Mul(Pow(e, m), Pow(b, IntPart(p)), Mul(Pow(Mul(b, Pow(x, n)), FracPart(p)), Pow(Pow(x, Mul(n, FracPart(p))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(n, p))), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule378)

    pattern379 = Pattern(Int(Mul(Pow(Mul(e_, x_), m_), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(Not(IntegerQ(m_))), (b, q, p, e, n, x, d, m, c)))
    rule379 = ReplacementRule(pattern379, lambda b, q, p, e, n, x, d, m, c : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Mul(b, Pow(x, n)), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule379)

    pattern380 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)))), (b, q, p, x, n, a, d, m, c)))
    rule380 = ReplacementRule(pattern380, lambda b, q, p, x, n, a, d, m, c : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), p), Pow(Add(c, Mul(d, x)), q)), x), x, Pow(x, n))))
    rubi.add(rule380)

    pattern381 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegersQ(p_, q_), NegQ(n_)), (b, q, p, x, n, a, d, m, c)))
    rule381 = ReplacementRule(pattern381, lambda b, q, p, x, n, a, d, m, c : Int(Mul(Pow(x, Add(m, Mul(n, Add(p, q)))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(d, Mul(c, Pow(x, Mul(matchpyInteger(-1), n)))), q)), x))
    rubi.add(rule381)

    pattern382 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, p, x, n, a, d, m, c)))
    rule382 = ReplacementRule(pattern382, lambda b, q, p, x, n, a, d, m, c : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), p), Pow(Add(c, Mul(d, x)), q)), x), x, Pow(x, n))))
    rubi.add(rule382)

    pattern383 = Pattern(Int(Mul(Pow(Mul(e_, x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, p, e, x, n, a, d, m, c)))
    rule383 = ReplacementRule(pattern383, lambda b, q, p, e, x, n, a, d, m, c : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule383)

    pattern384 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(p_, q_)), (b, q, p, e, x, n, a, d, m, c)))
    rule384 = ReplacementRule(pattern384, lambda b, q, p, e, x, n, a, d, m, c : Int(ExpandIntegrand(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x))
    rubi.add(rule384)

    pattern385 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(a_, d_, Add(m_, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b_, c_, Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)))))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, p, e, x, n, a, d, m, c)))
    rule385 = ReplacementRule(pattern385, lambda b, p, e, x, n, a, d, m, c : Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))))
    rubi.add(rule385)

    pattern386 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), ZeroQ(Add(Mul(a1_, a2_, d_, Add(m_, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b1_, b2_, c_, Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)))))), NonzeroQ(Add(m_, matchpyInteger(1)))), (non2, b1, p, e, x, b2, n, a2, a1, d, m, c)))
    rule386 = ReplacementRule(pattern386, lambda non2, b1, p, e, x, b2, n, a2, a1, d, m, c : Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))))
    rubi.add(rule386)

    pattern387 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1))), Or(IntegerQ(n_), PositiveQ(e_)), RationalQ(m_, n_), Or(And(Greater(n_, matchpyInteger(0)), Less(m_, matchpyInteger(-1))), And(Less(n_, matchpyInteger(0)), Greater(Add(m_, n_), matchpyInteger(-1))))), (b, p, e, x, n, a, d, m, c)))
    rule387 = ReplacementRule(pattern387, lambda b, p, e, x, n, a, d, m, c : Add(Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(d, Pow(Pow(e, n), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p)), x))))
    rubi.add(rule387)

    pattern388 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1))), NonzeroQ(Add(m_, matchpyInteger(1)))), (b, p, e, x, n, a, d, m, c)))
    rule388 = ReplacementRule(pattern388, lambda b, p, e, x, n, a, d, m, c : Add(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, b, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x))))
    rubi.add(rule388)

    pattern389 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Or(IntegerQ(n_), PositiveQ(e_)), RationalQ(m_, n_), Or(And(Greater(n_, matchpyInteger(0)), Less(m_, matchpyInteger(-1))), And(Less(n_, matchpyInteger(0)), Greater(Add(m_, n_), matchpyInteger(-1)))), Not(And(IntegerQ(p_), Less(p_, matchpyInteger(-1))))), (b, p, e, x, n, a, d, m, c)))
    rule389 = ReplacementRule(pattern389, lambda b, p, e, x, n, a, d, m, c : Add(Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(a, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(a, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p)), x))))
    rubi.add(rule389)

    pattern390 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(n_), PositiveQ(e_)), RationalQ(m_, n_), Or(And(Greater(n_, matchpyInteger(0)), Less(m_, matchpyInteger(-1))), And(Less(n_, matchpyInteger(0)), Greater(Add(m_, n_), matchpyInteger(-1)))), Not(And(IntegerQ(p_), Less(p_, matchpyInteger(-1))))), (non2, b1, p, e, x, b2, n, a2, a1, d, m, c)))
    rule390 = ReplacementRule(pattern390, lambda non2, b1, p, e, x, b2, n, a2, a1, d, m, c : Add(Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Add(Mul(a1, a2, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b1, b2, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(a1, a2, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), p), Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), p)), x))))
    rubi.add(rule390)

    pattern391 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), p_), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), PositiveIntegerQ(Mul(m_, Pow(matchpyInteger(2), matchpyInteger(-1)))), Or(IntegerQ(p_), Equal(Add(m_, Mul(matchpyInteger(2), p_), matchpyInteger(1)), matchpyInteger(0)))), (b, p, x, a, d, m, c)))
    rule391 = ReplacementRule(pattern391, lambda b, p, x, a, d, m, c : Add(Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), x, Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), Pow(b, Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(1))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), Pow(b, Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(1))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(1))), ExpandToSum(Add(Mul(matchpyInteger(2), b, Add(p, matchpyInteger(1)), Pow(x, matchpyInteger(2)), Together(Mul(Add(Mul(Pow(b, Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1)))), Pow(x, Add(m, matchpyInteger(-2))), Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(matchpyInteger(-1), Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))))), Mul(matchpyInteger(-1), Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))))), x)), x))))
    rubi.add(rule391)

    pattern392 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), p_), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), NegativeIntegerQ(Mul(m_, Pow(matchpyInteger(2), matchpyInteger(-1)))), Or(IntegerQ(p_), Equal(Add(m_, Mul(matchpyInteger(2), p_), matchpyInteger(1)), matchpyInteger(0)))), (b, p, x, a, d, m, c)))
    rule392 = ReplacementRule(pattern392, lambda b, p, x, a, d, m, c : Add(Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), x, Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(1))), Pow(Mul(matchpyInteger(2), Pow(b, Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(1))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(matchpyInteger(2), Pow(b, Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(1))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Add(p, matchpyInteger(1))), ExpandToSum(Add(Mul(matchpyInteger(2), b, Add(p, matchpyInteger(1)), Together(Mul(Add(Mul(Pow(b, Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1)))), Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(matchpyInteger(-1), Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(x, Add(Mul(matchpyInteger(-1), m), matchpyInteger(2)))))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1))))), Mul(matchpyInteger(-1), Mul(Pow(Mul(matchpyInteger(-1), a), Add(Mul(m, Pow(matchpyInteger(2), matchpyInteger(-1))), matchpyInteger(-1))), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(x, Mul(matchpyInteger(-1), m))))), x)), x))))
    rubi.add(rule392)

    pattern393 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), Or(IntegerQ(p_), Not(RationalQ(m_)), And(PositiveIntegerQ(n_), NegativeIntegerQ(Add(p_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), LessEqual(matchpyInteger(-1), m_, Mul(Mul(matchpyInteger(-1), n_), Add(p_, matchpyInteger(1))))))), (b, p, e, x, n, a, d, m, c)))
    rule393 = ReplacementRule(pattern393, lambda b, p, e, x, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, b, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1)))), x)))))
    rubi.add(rule393)

    pattern394 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), RationalQ(p_), Less(p_, matchpyInteger(-1)), Or(IntegerQ(p_), Not(RationalQ(m_)), And(PositiveIntegerQ(n_), NegativeIntegerQ(Add(p_, Mul(matchpyInteger(1), Pow(matchpyInteger(2), matchpyInteger(-1))))), LessEqual(matchpyInteger(-1), m_, Mul(Mul(matchpyInteger(-1), n_), Add(p_, matchpyInteger(1))))))), (non2, b1, p, e, x, b2, n, a2, a1, d, m, c)))
    rule394 = ReplacementRule(pattern394, lambda non2, b1, p, e, x, b2, n, a2, a1, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b1, b2, c), Mul(matchpyInteger(-1), Mul(a1, a2, d)))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Pow(Mul(a1, a2, b1, b2, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a1, a2, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b1, b2, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(a1, a2, b1, b2, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1)))), x)))))
    rubi.add(rule394)

    pattern395 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)))), (b, p, e, x, n, a, d, m, c)))
    rule395 = ReplacementRule(pattern395, lambda b, p, e, x, n, a, d, m, c : Add(Mul(d, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, e, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(b, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p)), x)))))
    rubi.add(rule395)

    pattern396 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), NonzeroQ(Add(m_, Mul(n_, Add(p_, matchpyInteger(1))), matchpyInteger(1)))), (non2, b1, p, e, x, b2, n, a2, a1, d, m, c)))
    rule396 = ReplacementRule(pattern396, lambda non2, b1, p, e, x, b2, n, a2, a1, d, m, c : Add(Mul(d, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), Add(p, matchpyInteger(1))), Pow(Mul(b1, b2, e, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(a1, a2, d, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b1, b2, c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))))), Pow(Mul(b1, b2, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), p), Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), p)), x)))))
    rubi.add(rule396)

    pattern397 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), PositiveIntegerQ(p_), Or(IntegerQ(m_), PositiveIntegerQ(Mul(matchpyInteger(2), Add(m_, matchpyInteger(1)))), Not(RationalQ(m_)))), (b, p, x, e, n, a, d, m, c)))
    rule397 = ReplacementRule(pattern397, lambda b, p, x, e, n, a, d, m, c : Int(ExpandIntegrand(Mul(Pow(Mul(e, x), m), Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1)))), x), x))
    rubi.add(rule397)

    pattern398 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, n_), Less(m_, matchpyInteger(-1)), Greater(n_, matchpyInteger(0))), (b, p, e, x, n, a, d, m, c)))
    rule398 = ReplacementRule(pattern398, lambda b, p, e, x, n, a, d, m, c : Add(Mul(Pow(c, matchpyInteger(2)), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Simp(Add(Mul(b, Pow(c, matchpyInteger(2)), n, Add(p, matchpyInteger(1))), Mul(c, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), a, d))), Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(a, Add(m, matchpyInteger(1)), Pow(d, matchpyInteger(2)), Pow(x, n)))), x)), x)))))
    rubi.add(rule398)

    pattern399 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, p, x, e, n, a, d, m, c)))
    rule399 = ReplacementRule(pattern399, lambda b, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(a, Pow(b, matchpyInteger(2)), e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, Pow(b, matchpyInteger(2)), n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Simp(Add(Mul(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Add(m, matchpyInteger(1))), Mul(Pow(b, matchpyInteger(2)), Pow(c, matchpyInteger(2)), n, Add(p, matchpyInteger(1))), Mul(a, b, Pow(d, matchpyInteger(2)), n, Add(p, matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule399)

    pattern400 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(2))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), NonzeroQ(Add(m_, Mul(n_, Add(p_, matchpyInteger(2))), matchpyInteger(1)))), (b, p, x, e, n, a, d, m, c)))
    rule400 = ReplacementRule(pattern400, lambda b, p, x, e, n, a, d, m, c : Add(Mul(Pow(d, matchpyInteger(2)), Pow(Mul(e, x), Add(m, n, matchpyInteger(1))), Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Mul(b, Pow(e, Add(n, matchpyInteger(1))), Add(m, Mul(n, Add(p, matchpyInteger(2))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, Mul(n, Add(p, matchpyInteger(2))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Simp(Add(Mul(b, Pow(c, matchpyInteger(2)), Add(m, Mul(n, Add(p, matchpyInteger(2))), matchpyInteger(1))), Mul(d, Add(Mul(Add(Mul(matchpyInteger(2), b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, n, matchpyInteger(1))), Mul(matchpyInteger(2), b, c, n, Add(p, matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule400)

    pattern401 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), IntegerQ(m_)), (b, q, p, x, n, a, d, m, c)))
    rule401 = ReplacementRule(pattern401, lambda b, q, p, x, n, a, d, m, c : With(List(Set(matchpyInteger(k), GCD(Add(m, matchpyInteger(1)), n))), Condition(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, matchpyInteger(1)), Pow(matchpyInteger(k), matchpyInteger(-1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), p), Pow(Add(c, Mul(d, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), q)), x), x, Pow(x, matchpyInteger(k)))), Unequal(matchpyInteger(k), matchpyInteger(1)))))
    rubi.add(rule401)

    pattern402 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), FractionQ(m_), IntegerQ(p_)), (b, q, p, e, x, n, a, d, m, c)))
    rule402 = ReplacementRule(pattern402, lambda b, q, p, e, x, n, a, d, m, c : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(matchpyInteger(k), Pow(e, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(e, n), matchpyInteger(-1))))), p), Pow(Add(c, Mul(d, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(e, n), matchpyInteger(-1))))), q)), x), x, Pow(Mul(e, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule402)

    pattern403 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(0)), Greater(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule403 = ReplacementRule(pattern403, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(e, Add(n, matchpyInteger(-1))), Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(e, n), Pow(Mul(b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(d, Add(m, Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1)), Pow(x, n))), x)), x)))))
    rubi.add(rule403)

    pattern404 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule404 = ReplacementRule(pattern404, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(a, b, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(c, b, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))))), Mul(d, Add(Mul(c, b, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule404)

    pattern405 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Less(matchpyInteger(0), q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule405 = ReplacementRule(pattern405, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(e, x), Add(m, matchpyInteger(1)))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), Mul(d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule405)

    pattern406 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), Greater(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), n_), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule406 = ReplacementRule(pattern406, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), a), Pow(e, Add(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(b, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(Pow(e, Mul(matchpyInteger(2), n)), Pow(Mul(b, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(a, c, Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Mul(Add(Mul(a, d, Add(m, Mul(matchpyInteger(-1), n), Mul(n, q), matchpyInteger(1))), Mul(b, c, n, Add(p, matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule406)

    pattern407 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), Inequality(n_, matchpyInteger(GreaterEqual), Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), matchpyInteger(Greater), matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule407 = ReplacementRule(pattern407, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(e, Add(n, matchpyInteger(-1))), Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(e, n), Pow(Mul(n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1)), Pow(x, n))), x)), x)))))
    rubi.add(rule407)

    pattern408 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(p_), Less(p_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule408 = ReplacementRule(pattern408, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), b), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, e, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, b, Add(m, matchpyInteger(1))), Mul(n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), Mul(d, b, Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule408)

    pattern409 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, p_, q_), Greater(q_, matchpyInteger(0)), Less(m_, matchpyInteger(-1)), Greater(p_, matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, e, x, n, a, d, m, c)))
    rule409 = ReplacementRule(pattern409, lambda b, q, p, e, x, n, a, d, m, c : Add(Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(n, Pow(Mul(Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(b, c, p), Mul(a, d, q), Mul(b, d, Add(p, q), Pow(x, n))), x)), x)))))
    rubi.add(rule409)

    pattern410 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, q_), Greater(q_, matchpyInteger(1)), Less(m_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, e, x, n, a, d, m, c)))
    rule410 = ReplacementRule(pattern410, lambda b, q, p, e, x, n, a, d, m, c : Add(Mul(c, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(c, n, Add(Mul(b, c, Add(p, matchpyInteger(1))), Mul(a, d, Add(q, matchpyInteger(-1))))), Mul(d, Add(Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(c, b, n, Add(p, q))), Pow(x, n))), x)), x)))))
    rubi.add(rule410)

    pattern411 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, q_), Less(matchpyInteger(0), q_, matchpyInteger(1)), Less(m_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, e, x, n, a, d, m, c)))
    rule411 = ReplacementRule(pattern411, lambda b, q, p, e, x, n, a, d, m, c : Add(Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, b, Add(m, matchpyInteger(1))), Mul(n, Add(Mul(b, c, Add(p, matchpyInteger(1))), Mul(a, d, q))), Mul(d, Add(Mul(b, Add(m, matchpyInteger(1))), Mul(b, n, Add(p, q, matchpyInteger(1)))), Pow(x, n))), x)), x)))))
    rubi.add(rule411)

    pattern412 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(p_, q_), Greater(q_, matchpyInteger(0)), Greater(p_, matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule412 = ReplacementRule(pattern412, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(e, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(n, Pow(Add(m, Mul(n, Add(p, q)), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(a, c, Add(p, q)), Mul(Add(Mul(q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(a, d, Add(p, q))), Pow(x, n))), x)), x))))
    rubi.add(rule412)

    pattern413 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(q_), Greater(q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule413 = ReplacementRule(pattern413, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(d, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(b, e, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(c, b, n, Add(p, q)))), Mul(Add(Mul(d, Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(d, n, Add(q, matchpyInteger(-1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(c, b, d, n, Add(p, q))), Pow(x, n))), x)), x))))
    rubi.add(rule413)

    pattern414 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_, q_), Greater(q_, matchpyInteger(0)), Greater(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule414 = ReplacementRule(pattern414, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(e, Add(n, matchpyInteger(-1))), Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(b, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(e, n), Pow(Mul(b, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(a, c, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Add(Mul(a, d, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(n, q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))))), Pow(x, n))), x)), x)))))
    rubi.add(rule414)

    pattern415 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_), Greater(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), n_), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule415 = ReplacementRule(pattern415, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(e, Add(Mul(matchpyInteger(2), n), matchpyInteger(-1))), Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(b, d, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(e, Mul(matchpyInteger(2), n)), Pow(Mul(b, d, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(a, c, Add(m, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n)), matchpyInteger(1))), Mul(Add(Mul(a, d, Add(m, Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1))), Mul(b, c, Add(m, Mul(n, Add(p, matchpyInteger(-1))), matchpyInteger(1)))), Pow(x, n))), x)), x)))))
    rubi.add(rule415)

    pattern416 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_), Less(m_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, e, x, n, a, d, m, c)))
    rule416 = ReplacementRule(pattern416, lambda b, q, p, e, x, n, a, d, m, c : Add(Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, c, e, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, c, Pow(e, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(Add(Mul(b, c), Mul(a, d)), Add(m, n, matchpyInteger(1))), Mul(n, Add(Mul(b, c, p), Mul(a, d, q))), Mul(b, d, Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x)))))
    rubi.add(rule416)

    pattern417 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_), RationalQ(m_), LessEqual(n_, m_, Add(Mul(matchpyInteger(2), n_), matchpyInteger(-1)))), (b, x, e, n, a, d, m, c)))
    rule417 = ReplacementRule(pattern417, lambda b, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), a), Mul(Pow(e, n), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(c, Mul(Pow(e, n), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x))))
    rubi.add(rule417)

    pattern418 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(n_)), (b, x, e, n, a, d, m, c)))
    rule418 = ReplacementRule(pattern418, lambda b, x, e, n, a, d, m, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x)))))
    rubi.add(rule418)

    pattern419 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegersQ(Mul(m_, Pow(matchpyInteger(2), matchpyInteger(-1))), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))), Less(matchpyInteger(0), Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), n_), LessEqual(n_, matchpyInteger(4))), (b, x, n, a, d, m, c)))
    rule419 = ReplacementRule(pattern419, lambda b, x, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(1), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), n))), Pow(Sqrt(Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), n))), Pow(Mul(Add(a, Mul(b, Pow(x, n))), Sqrt(Add(c, Mul(d, Pow(x, n))))), matchpyInteger(-1))), x)))))
    rubi.add(rule419)

    pattern420 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule420 = ReplacementRule(pattern420, lambda b, x, a, d, c : With(List(Set(matchpyInteger(r), Numerator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2)))), Set(matchpyInteger(s), Denominator(Rt(Mul(Mul(matchpyInteger(-1), a), Pow(b, matchpyInteger(-1))), matchpyInteger(2))))), Add(Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(s), Pow(Mul(matchpyInteger(2), b), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(matchpyInteger(r), Mul(matchpyInteger(-1), Mul(matchpyInteger(s), Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), x))))))
    rubi.add(rule420)

    pattern421 = Pattern(Int(Mul(x_, Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(matchpyInteger(4), b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule421 = ReplacementRule(pattern421, lambda b, x, a, d, c : With(List(Set(matchpyInteger(q), Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(3)))), Add(Mul(Mul(matchpyInteger(-1), matchpyInteger(q)), Mul(ArcTan(Add(Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1))), Mul(Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Mul(Add(Sqrt(c), Mul(matchpyInteger(-1), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))))), Pow(Mul(Sqrt(matchpyInteger(3)), Sqrt(c), matchpyInteger(q), x), matchpyInteger(-1)))))), Pow(Mul(matchpyInteger(3), Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Sqrt(matchpyInteger(3)), b, Sqrt(c)), matchpyInteger(-1)))), Mul(matchpyInteger(q), Mul(ArcTan(Add(Mul(matchpyInteger(1), Pow(Sqrt(matchpyInteger(3)), matchpyInteger(-1))), Mul(Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Mul(Add(Sqrt(c), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3)))))), Pow(Mul(Sqrt(matchpyInteger(3)), Sqrt(c), matchpyInteger(q), x), matchpyInteger(-1)))))), Pow(Mul(matchpyInteger(3), Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), Sqrt(matchpyInteger(3)), b, Sqrt(c)), matchpyInteger(-1)))), Mul(matchpyInteger(q), Mul(ArcTanh(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), Pow(Sqrt(c), matchpyInteger(-1)))), Pow(Mul(matchpyInteger(9), Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), b, Sqrt(c)), matchpyInteger(-1)))), Mul(matchpyInteger(q), Mul(Log(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Pow(matchpyInteger(2), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(q), x)), Mul(matchpyInteger(-1), Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), Pow(Sqrt(c), matchpyInteger(-1)))))), Pow(Mul(matchpyInteger(6), Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), b, Sqrt(c)), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(matchpyInteger(q), Mul(Log(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Pow(matchpyInteger(2), Mul(matchpyInteger(1), Pow(matchpyInteger(3), matchpyInteger(-1)))), matchpyInteger(q), x)), Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), Pow(Sqrt(c), matchpyInteger(-1))))), Pow(Mul(matchpyInteger(6), Pow(matchpyInteger(2), Mul(matchpyInteger(2), Pow(matchpyInteger(3), matchpyInteger(-1)))), b, Sqrt(c)), matchpyInteger(-1))))))))
    rubi.add(rule421)

    pattern422 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(matchpyInteger(4), b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PositiveIntegerQ(Mul(Add(m_, matchpyInteger(-1)), Pow(matchpyInteger(3), matchpyInteger(-1))))), (b, x, a, d, m, c)))
    rule422 = ReplacementRule(pattern422, lambda b, x, a, d, m, c : Add(Mul(Mul(matchpyInteger(1), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, matchpyInteger(-3))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, matchpyInteger(-3))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(3)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule422)

    pattern423 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(matchpyInteger(4), b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(Mul(Add(m_, matchpyInteger(-1)), Pow(matchpyInteger(3), matchpyInteger(-1))))), (b, x, a, d, m, c)))
    rule423 = ReplacementRule(pattern423, lambda b, x, a, d, m, c : Add(Mul(Mul(matchpyInteger(1), Pow(a, matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(b, Pow(a, matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, matchpyInteger(3))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(3)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule423)

    pattern424 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, a, d, c)))
    rule424 = ReplacementRule(pattern424, lambda b, x, a, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, matchpyInteger(2)), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(4))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, matchpyInteger(2)), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(4)))))), matchpyInteger(-1))), x))))
    rubi.add(rule424)

    pattern425 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(3)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), ZeroQ(Add(Mul(matchpyInteger(4), b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegerQ(Mul(Add(m_, matchpyInteger(-1)), Pow(matchpyInteger(3), matchpyInteger(-1))))), (b, x, a, d, m, c)))
    rule425 = ReplacementRule(pattern425, lambda b, x, a, d, m, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(3)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(3)))))), matchpyInteger(-1))), x))))
    rubi.add(rule425)

    pattern426 = Pattern(Int(Mul(Pow(x_, matchpyInteger(2)), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), Not(SimplerSqrtQ(Mul(b_, Pow(a_, matchpyInteger(-1))), Mul(d_, Pow(c_, matchpyInteger(-1)))))), (b, x, a, d, c)))
    rule426 = ReplacementRule(pattern426, lambda b, x, a, d, c : Add(Mul(x, Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Mul(b, Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(c, Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule426)

    pattern427 = Pattern(Int(Mul(Pow(x_, n_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Or(EqQ(n_, matchpyInteger(2)), EqQ(n_, matchpyInteger(4))), Not(And(EqQ(n_, matchpyInteger(2)), SimplerSqrtQ(Mul(Mul(matchpyInteger(-1), b_), Pow(a_, matchpyInteger(-1))), Mul(Mul(matchpyInteger(-1), d_), Pow(c_, matchpyInteger(-1))))))), (b, x, n, a, d, c)))
    rule427 = ReplacementRule(pattern427, lambda b, x, n, a, d, c : Add(Mul(Mul(matchpyInteger(1), Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)))), Pow(Sqrt(Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(a, Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)))), Sqrt(Add(c, Mul(d, Pow(x, n))))), matchpyInteger(-1))), x)))))
    rubi.add(rule427)

    pattern428 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), IntegersQ(Add(p_, Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))), q_), Less(matchpyInteger(-1), p_, matchpyInteger(0))), (b, q, p, x, n, a, d, m, c)))
    rule428 = ReplacementRule(pattern428, lambda b, q, p, x, n, a, d, m, c : With(List(Set(matchpyInteger(k), Denominator(p))), Mul(matchpyInteger(k), Mul(Pow(a, Add(p, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))))), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Mul(Pow(Add(c, Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(x, matchpyInteger(k))))), q), Pow(Pow(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(k))))), Add(p, q, Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), matchpyInteger(1))), matchpyInteger(-1)))), x), x, Mul(Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))), Pow(Pow(Add(a, Mul(b, Pow(x, n))), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule428)

    pattern429 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(n_), IntegerQ(m_)), (b, q, p, x, n, a, d, m, c)))
    rule429 = ReplacementRule(pattern429, lambda b, q, p, x, n, a, d, m, c : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule429)

    pattern430 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(p, x), FreeQ(q, x), cons(And(NegativeIntegerQ(n_), FractionQ(m_)), (b, q, p, e, x, n, a, d, m, c)))
    rule430 = ReplacementRule(pattern430, lambda b, q, p, e, x, n, a, d, m, c : With(List(Set(matchpyInteger(g), Denominator(m))), Mul(Mul(Mul(matchpyInteger(-1), matchpyInteger(g)), Pow(e, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(e, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(g)), n)))), p), Mul(Pow(Add(c, Mul(d, Pow(e, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(g)), n)))), q), Pow(Pow(x, Add(Mul(matchpyInteger(g), Add(m, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(Pow(Mul(e, x), Mul(matchpyInteger(1), Pow(matchpyInteger(g), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule430)

    pattern431 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NegativeIntegerQ(n_), Not(RationalQ(m_))), (b, q, p, e, x, n, a, d, m, c)))
    rule431 = ReplacementRule(pattern431, lambda b, q, p, e, x, n, a, d, m, c : Mul(Mul(matchpyInteger(-1), Pow(Mul(e, x), m)), Pow(Pow(x, matchpyInteger(-1)), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule431)

    pattern432 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), FractionQ(n_)), (b, q, p, x, n, a, d, m, c)))
    rule432 = ReplacementRule(pattern432, lambda b, q, p, x, n, a, d, m, c : With(List(Set(matchpyInteger(g), Denominator(n))), Mul(matchpyInteger(g), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(g), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(g), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(g), n)))), q)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(g), matchpyInteger(-1))))))))
    rubi.add(rule432)

    pattern433 = Pattern(Int(Mul(Pow(Mul(e_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), FractionQ(n_)), (b, q, p, e, x, n, a, d, m, c)))
    rule433 = ReplacementRule(pattern433, lambda b, q, p, e, x, n, a, d, m, c : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule433)

    pattern434 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1))))), Not(IntegerQ(n_))), (b, q, p, x, n, a, d, m, c)))
    rule434 = ReplacementRule(pattern434, lambda b, q, p, x, n, a, d, m, c : Mul(Mul(matchpyInteger(1), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), p), Pow(Add(c, Mul(d, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), q)), x), x, Pow(x, Add(m, matchpyInteger(1))))))
    rubi.add(rule434)

    pattern435 = Pattern(Int(Mul(Pow(Mul(e_, x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1))))), Not(IntegerQ(n_))), (b, q, p, x, e, n, a, d, m, c)))
    rule435 = ReplacementRule(pattern435, lambda b, q, p, x, e, n, a, d, m, c : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule435)

    pattern436 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule436 = ReplacementRule(pattern436, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d)))), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(a, b, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(c, b, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))))), Mul(d, Add(Mul(c, b, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, Mul(n, Add(q, matchpyInteger(-1))), matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule436)

    pattern437 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Less(matchpyInteger(0), q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule437 = ReplacementRule(pattern437, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), Pow(Mul(e, x), Add(m, matchpyInteger(1)))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, e, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(m, Mul(n, Add(p, matchpyInteger(1))), matchpyInteger(1))), Mul(d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule437)

    pattern438 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_), Less(p_, matchpyInteger(-1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule438 = ReplacementRule(pattern438, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Mul(matchpyInteger(-1), b), Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, e, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, b, Add(m, matchpyInteger(1))), Mul(n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), Mul(d, b, Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule438)

    pattern439 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(p_, q_), Greater(q_, matchpyInteger(0)), Greater(p_, matchpyInteger(0)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule439 = ReplacementRule(pattern439, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(e, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(n, Pow(Add(m, Mul(n, Add(p, q)), matchpyInteger(1)), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(-1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(a, c, Add(p, q)), Mul(Add(Mul(q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(a, d, Add(p, q))), Pow(x, n))), x)), x))))
    rubi.add(rule439)

    pattern440 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), RationalQ(q_), Greater(q_, matchpyInteger(1)), IntBinomialQ(a_, b_, c_, d_, e_, m_, n_, p_, q_, x_)), (b, q, p, x, e, n, a, d, m, c)))
    rule440 = ReplacementRule(pattern440, lambda b, q, p, x, e, n, a, d, m, c : Add(Mul(d, Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Mul(b, e, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, Mul(n, Add(p, q)), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-2))), Simp(Add(Mul(c, Add(Mul(Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(c, b, n, Add(p, q)))), Mul(Add(Mul(d, Add(Mul(c, b), Mul(matchpyInteger(-1), Mul(a, d))), Add(m, matchpyInteger(1))), Mul(d, n, Add(q, matchpyInteger(-1)), Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(c, b, d, n, Add(p, q))), Pow(x, n))), x)), x))))
    rubi.add(rule440)

    pattern441 = Pattern(Int(Mul(Pow(x_, m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), Or(ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_))), ZeroQ(Add(m_, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n_)), matchpyInteger(1))))), (b, x, n, a, d, m, c)))
    rule441 = ReplacementRule(pattern441, lambda b, x, n, a, d, m, c : Add(Mul(Mul(Mul(matchpyInteger(-1), a), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(Mul(c, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x))))
    rubi.add(rule441)

    pattern442 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(m, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))))), (b, x, e, n, a, d, m, c)))
    rule442 = ReplacementRule(pattern442, lambda b, x, e, n, a, d, m, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x)))))
    rubi.add(rule442)

    pattern443 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), IntegersQ(m_, p_, q_), GreaterEqual(p_, matchpyInteger(-2)), Or(GreaterEqual(q_, matchpyInteger(-2)), And(Equal(q_, matchpyInteger(-3)), IntegerQ(Mul(Add(m_, matchpyInteger(-1)), Pow(matchpyInteger(2), matchpyInteger(-1))))))), (b, q, p, x, e, n, a, d, m, c)))
    rule443 = ReplacementRule(pattern443, lambda b, q, p, x, e, n, a, d, m, c : Int(ExpandIntegrand(Mul(Pow(Mul(e, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x))
    rubi.add(rule443)

    pattern444 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(q_), Or(PosQ(n_), Not(IntegerQ(p_)))), (q, b, p, x, n, a, d, m, mn, c)))
    rule444 = ReplacementRule(pattern444, lambda q, b, p, x, n, a, d, m, mn, c : Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, q)))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q)), x))
    rubi.add(rule444)

    pattern445 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), q_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), Not(IntegerQ(q_)), Not(IntegerQ(p_))), (b, q, p, x, n, a, d, m, mn, c)))
    rule445 = ReplacementRule(pattern445, lambda b, q, p, x, n, a, d, m, mn, c : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), FracPart(q)), Pow(Pow(Add(d, Mul(c, Pow(x, n))), FracPart(q)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, q)))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q)), x)))
    rubi.add(rule445)

    pattern446 = Pattern(Int(Mul(Pow(Mul(e_, x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_))), (q, b, p, e, n, x, a, d, m, mn, c)))
    rule446 = ReplacementRule(pattern446, lambda q, b, p, e, n, x, a, d, m, mn, c : Mul(Pow(e, IntPart(m)), Mul(Pow(Mul(e, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q)), x)))
    rubi.add(rule446)

    pattern447 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(m_, matchpyInteger(1))), NonzeroQ(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1))), PositiveQ(a_), PositiveQ(c_)), (b, q, p, x, e, n, a, d, m, c)))
    rule447 = ReplacementRule(pattern447, lambda b, q, p, x, e, n, a, d, m, c : Mul(Pow(a, p), Pow(c, q), Mul(Pow(Mul(e, x), Add(m, matchpyInteger(1))), Pow(Mul(e, Add(m, matchpyInteger(1))), matchpyInteger(-1))), AppellF1(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1))), Mul(matchpyInteger(-1), p), Mul(matchpyInteger(-1), q), Add(matchpyInteger(1), Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), b), Mul(Pow(x, n), Pow(a, matchpyInteger(-1)))), Mul(Mul(matchpyInteger(-1), d), Mul(Pow(x, n), Pow(c, matchpyInteger(-1)))))))
    rubi.add(rule447)

    pattern448 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('e', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(NonzeroQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_)))), NonzeroQ(Add(m_, matchpyInteger(1))), NonzeroQ(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1))), Not(PositiveQ(a_))), (b, q, p, x, e, n, a, d, m, c)))
    rule448 = ReplacementRule(pattern448, lambda b, q, p, x, e, n, a, d, m, c : Mul(Pow(a, IntPart(p)), Mul(Pow(Add(a, Mul(b, Pow(x, n))), FracPart(p)), Pow(Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), FracPart(p)), matchpyInteger(-1))), Int(Mul(Pow(Mul(e, x), m), Pow(Add(matchpyInteger(1), Mul(b, Mul(Pow(x, n), Pow(a, matchpyInteger(-1))))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule448)

    pattern449 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(x_, Wildcard.optional('m', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearQ(v_, x_), IntegerQ(m_), NonzeroQ(Add(v_, Mul(matchpyInteger(-1), x_)))), (b, q, v, p, x, n, a, d, m, c)))
    rule449 = ReplacementRule(pattern449, lambda b, q, v, p, x, n, a, d, m, c : Mul(Mul(matchpyInteger(1), Pow(Pow(Coefficient(v, x, matchpyInteger(1)), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Subst(Int(SimplifyIntegrand(Mul(Pow(Add(x, Mul(matchpyInteger(-1), Coefficient(v, x, matchpyInteger(0)))), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x), x, v)))
    rubi.add(rule449)

    pattern450 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(LinearPairQ(u_, v_, x_)), (b, q, v, p, u, x, n, a, d, m, c)))
    rule450 = ReplacementRule(pattern450, lambda b, q, v, p, u, x, n, a, d, m, c : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, matchpyInteger(1)), Pow(v, m)), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x), x, v)))
    rubi.add(rule450)

    pattern451 = Pattern(Int(Mul(Wildcard.optional('u', matchpyInteger(1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (q, b1, non2, p, u, x, n, b2, a2, a1, d, c)))
    rule451 = ReplacementRule(pattern451, lambda q, b1, non2, p, u, x, n, b2, a2, a1, d, c : Int(Mul(u, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))
    rubi.add(rule451)

    pattern452 = Pattern(Int(Mul(Wildcard.optional('u', matchpyInteger(1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), Mul(Wildcard.optional('e', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n_)))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_))), Or(IntegerQ(p_), And(PositiveQ(a1_), PositiveQ(a2_)))), (q, b1, n2, non2, p, u, e, n, b2, x, a2, a1, d, c)))
    rule452 = ReplacementRule(pattern452, lambda q, b1, n2, non2, p, u, e, n, b2, x, a2, a1, d, c : Int(Mul(u, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n)), Mul(e, Pow(x, Mul(matchpyInteger(2), n)))), q)), x))
    rubi.add(rule452)

    pattern453 = Pattern(Int(Mul(Wildcard.optional('u', matchpyInteger(1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), p_), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), p_)), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_)))), (q, b1, non2, p, u, x, n, b2, a2, a1, d, c)))
    rule453 = ReplacementRule(pattern453, lambda q, b1, non2, p, u, x, n, b2, a2, a1, d, c : Mul(Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), FracPart(p)), matchpyInteger(-1))), Int(Mul(u, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)))
    rubi.add(rule453)

    pattern454 = Pattern(Int(Mul(Wildcard.optional('u', matchpyInteger(1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), Mul(Wildcard.optional('e', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a1_, Mul(Wildcard.optional('b1', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(a2_, Mul(Wildcard.optional('b2', matchpyInteger(1)), Pow(x_, Wildcard.optional('non2', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1)))), x_), FreeQ(a1, x), FreeQ(b1, x), FreeQ(a2, x), FreeQ(b2, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(And(ZeroQ(Add(non2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(matchpyInteger(2), n_)))), ZeroQ(Add(Mul(a2_, b1_), Mul(a1_, b2_)))), (q, b1, n2, non2, p, u, e, n, b2, x, a2, a1, d, c)))
    rule454 = ReplacementRule(pattern454, lambda q, b1, n2, non2, p, u, e, n, b2, x, a2, a1, d, c : Mul(Pow(Add(a1, Mul(b1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(p)), Mul(Pow(Add(a2, Mul(b2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(p)), Pow(Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), FracPart(p)), matchpyInteger(-1))), Int(Mul(u, Pow(Add(Mul(a1, a2), Mul(b1, b2, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n)), Mul(e, Pow(x, Mul(matchpyInteger(2), n)))), q)), x)))
    rubi.add(rule454)

    pattern455 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(PositiveIntegerQ(p_, q_, r_)), (b, q, p, r, x, n, e, a, f, d, c)))
    rule455 = ReplacementRule(pattern455, lambda b, q, p, r, x, n, e, a, f, d, c : Int(ExpandIntegrand(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x), x))
    rubi.add(rule455)

    pattern456 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(True, (b, x, n, e, a, f, d, c)))
    rule456 = ReplacementRule(pattern456, lambda b, x, n, e, a, f, d, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(a, Mul(b, Pow(x, n))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x)))))
    rubi.add(rule456)

    pattern457 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(True, (b, x, n, e, a, f, d, c)))
    rule457 = ReplacementRule(pattern457, lambda b, x, n, e, a, f, d, c : Add(Mul(Mul(f, Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Sqrt(Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, n))), Sqrt(Add(c, Mul(d, Pow(x, n))))), matchpyInteger(-1))), x))))
    rubi.add(rule457)

    pattern458 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Rational(matchpyInteger(-1), matchpyInteger(2))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(Not(And(ZeroQ(Add(n_, matchpyInteger(-2))), Or(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PosQ(Mul(d_, Pow(c_, matchpyInteger(-1))))), And(NegQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), Or(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), And(PositiveQ(a_), Or(Not(PositiveQ(c_)), SimplerSqrtQ(Mul(Mul(matchpyInteger(-1), b_), Pow(a_, matchpyInteger(-1))), Mul(Mul(matchpyInteger(-1), d_), Pow(c_, matchpyInteger(-1)))))))))))), (b, x, n, e, a, f, d, c)))
    rule458 = ReplacementRule(pattern458, lambda b, x, n, e, a, f, d, c : Add(Mul(Mul(f, Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)))), Pow(Sqrt(Add(c, Mul(d, Pow(x, n)))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, n)))), Sqrt(Add(c, Mul(d, Pow(x, n))))), matchpyInteger(-1))), x))))
    rubi.add(rule458)

    pattern459 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(b_, Pow(a_, matchpyInteger(-1)))), PosQ(Mul(d_, Pow(c_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule459 = ReplacementRule(pattern459, lambda b, x, e, a, f, d, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule459)

    pattern460 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), cons(And(RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(0))), (b, q, p, x, n, e, a, f, d, c)))
    rule460 = ReplacementRule(pattern460, lambda b, q, p, x, n, e, a, f, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Mul(d, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(Mul(n, q), matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule460)

    pattern461 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(q, x), cons(And(RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, q, p, x, n, e, a, f, d, c)))
    rule461 = ReplacementRule(pattern461, lambda b, q, p, x, n, e, a, f, d, c : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Mul(e, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule461)

    pattern462 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(q_), Greater(q_, matchpyInteger(0)), NonzeroQ(Add(Mul(n_, Add(p_, q_, matchpyInteger(1))), matchpyInteger(1)))), (b, q, p, x, n, e, a, f, d, c)))
    rule462 = ReplacementRule(pattern462, lambda b, q, p, x, n, e, a, f, d, c : Add(Mul(f, x, Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(b, Add(Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)), Mul(b, e, n, Add(p, q, matchpyInteger(1))))), Mul(Add(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Mul(f, n, q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(b, d, e, n, Add(p, q, matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule462)

    pattern463 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), Rational(matchpyInteger(-3), matchpyInteger(4))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(4)))), matchpyInteger(-1)), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(4))))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule463 = ReplacementRule(pattern463, lambda b, x, e, a, f, d, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(3), Pow(matchpyInteger(4), matchpyInteger(-1)))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, matchpyInteger(4)))), Mul(matchpyInteger(1), Pow(matchpyInteger(4), matchpyInteger(-1)))), Pow(Add(c, Mul(d, Pow(x, matchpyInteger(4)))), matchpyInteger(-1))), x)))))
    rubi.add(rule463)

    pattern464 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(n, x), cons(True, (b, p, x, n, e, a, f, d, c)))
    rule464 = ReplacementRule(pattern464, lambda b, p, x, n, e, a, f, d, c : Add(Mul(Mul(f, Pow(d, matchpyInteger(-1))), Int(Pow(Add(a, Mul(b, Pow(x, n))), p), x)), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(d, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1))), x))))
    rubi.add(rule464)

    pattern465 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(True, (b, q, p, x, n, e, a, f, d, c)))
    rule465 = ReplacementRule(pattern465, lambda b, q, p, x, n, e, a, f, d, c : Add(Mul(e, Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)), Mul(f, Int(Mul(Pow(x, n), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))))
    rubi.add(rule465)

    pattern466 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule466 = ReplacementRule(pattern466, lambda b, x, e, a, f, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule466)

    pattern467 = Pattern(Int(Mul(Pow(x_, matchpyInteger(-2)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NonzeroQ(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))))), (x, e, f, d, c)))
    rule467 = ReplacementRule(pattern467, lambda x, e, f, d, c : Add(Mul(Mul(matchpyInteger(1), Pow(c, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Pow(x, matchpyInteger(2)), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule467)

    pattern468 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PositiveQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(Mul(f_, Pow(e_, matchpyInteger(-1)))), Not(SimplerSqrtQ(Mul(d_, Pow(c_, matchpyInteger(-1))), Mul(f_, Pow(e_, matchpyInteger(-1)))))), (b, x, e, a, f, d, c)))
    rule468 = ReplacementRule(pattern468, lambda b, x, e, a, f, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule468)

    pattern469 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(SimplerSqrtQ(Mul(Mul(matchpyInteger(-1), f_), Pow(e_, matchpyInteger(-1))), Mul(Mul(matchpyInteger(-1), d_), Pow(c_, matchpyInteger(-1)))))), (b, x, e, a, f, d, c)))
    rule469 = ReplacementRule(pattern469, lambda b, x, e, a, f, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule469)

    pattern470 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(f_, Pow(e_, matchpyInteger(-1)))), Not(SimplerSqrtQ(Mul(d_, Pow(c_, matchpyInteger(-1))), Mul(f_, Pow(e_, matchpyInteger(-1)))))), (b, x, e, a, f, d, c)))
    rule470 = ReplacementRule(pattern470, lambda b, x, e, a, f, d, c : Add(Mul(Mul(Mul(matchpyInteger(-1), f), Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(Mul(b, Pow(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule470)

    pattern471 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PositiveQ(c_), PositiveQ(e_), Not(And(NegQ(Mul(f_, Pow(e_, matchpyInteger(-1)))), SimplerSqrtQ(Mul(Mul(matchpyInteger(-1), f_), Pow(e_, matchpyInteger(-1))), Mul(Mul(matchpyInteger(-1), d_), Pow(c_, matchpyInteger(-1))))))), (b, x, e, a, f, d, c)))
    rule471 = ReplacementRule(pattern471, lambda b, x, e, a, f, d, c : Mul(Mul(matchpyInteger(1), Pow(Mul(a, Sqrt(c), Sqrt(e), Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2))), matchpyInteger(-1))), EllipticPi(Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))), ArcSin(Mul(Rt(Mul(Mul(matchpyInteger(-1), d), Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Mul(c, Mul(f, Pow(Mul(d, e), matchpyInteger(-1)))))))
    rubi.add(rule471)

    pattern472 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(Not(PositiveQ(c_))), (b, x, e, a, f, d, c)))
    rule472 = ReplacementRule(pattern472, lambda b, x, e, a, f, d, c : Mul(Mul(Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(matchpyInteger(1), Mul(Mul(d, Pow(c, matchpyInteger(-1))), Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))
    rubi.add(rule472)

    pattern473 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule473 = ReplacementRule(pattern473, lambda b, x, e, a, f, d, c : Mul(c, Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(a, e, Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Mul(c, Mul(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Pow(Mul(e, Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), EllipticPi(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Mul(c, Pow(Mul(a, d), matchpyInteger(-1)))))), ArcTan(Mul(Rt(Mul(d, Pow(c, matchpyInteger(-1))), matchpyInteger(2)), x)), Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(c, Mul(f, Pow(Mul(d, e), matchpyInteger(-1)))))))))
    rubi.add(rule473)

    pattern474 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(Mul(d_, Pow(c_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule474 = ReplacementRule(pattern474, lambda b, x, e, a, f, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule474)

    pattern475 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(f_, Pow(e_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule475 = ReplacementRule(pattern475, lambda b, x, e, a, f, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule475)

    pattern476 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(3), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(f_, Pow(e_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule476 = ReplacementRule(pattern476, lambda b, x, e, a, f, d, c : Add(Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), matchpyInteger(-1))), x)))))
    rubi.add(rule476)

    pattern477 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(3), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(d_, Pow(c_, matchpyInteger(-1)))), PosQ(Mul(f_, Pow(e_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule477 = ReplacementRule(pattern477, lambda b, x, e, a, f, d, c : Add(Mul(Mul(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), Pow(Pow(b, matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(Mul(d, Pow(Pow(b, matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Add(Mul(matchpyInteger(2), b, c), Mul(matchpyInteger(-1), Mul(a, d)), Mul(b, d, Pow(x, matchpyInteger(2)))), Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))), x))))
    rubi.add(rule477)

    pattern478 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(RationalQ(q_, r_), Less(q_, matchpyInteger(-1)), Greater(r_, matchpyInteger(1))), (b, q, r, x, e, a, f, d, c)))
    rule478 = ReplacementRule(pattern478, lambda b, q, r, x, e, a, f, d, c : Add(Mul(b, Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Add(q, matchpyInteger(2))), Mul(Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Add(r, matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), x)), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), q), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Add(r, matchpyInteger(-1))), Add(Mul(matchpyInteger(2), b, c, d, e), Mul(matchpyInteger(-1), Mul(a, Pow(d, matchpyInteger(2)), e)), Mul(matchpyInteger(-1), Mul(b, Pow(c, matchpyInteger(2)), f)), Mul(Pow(d, matchpyInteger(2)), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(x, matchpyInteger(2))))), x)))))
    rubi.add(rule478)

    pattern479 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(r, x), cons(And(RationalQ(q_), Greater(q_, matchpyInteger(1))), (b, q, r, x, e, a, f, d, c)))
    rule479 = ReplacementRule(pattern479, lambda b, q, r, x, e, a, f, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Add(q, matchpyInteger(-1))), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r)), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Add(q, matchpyInteger(-1))), Mul(Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), x))))
    rubi.add(rule479)

    pattern480 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(r, x), cons(And(RationalQ(q_), Less(q_, matchpyInteger(-1))), (b, q, r, x, e, a, f, d, c)))
    rule480 = ReplacementRule(pattern480, lambda b, q, r, x, e, a, f, d, c : Add(Mul(Mul(Pow(b, matchpyInteger(2)), Pow(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Add(q, matchpyInteger(2))), Mul(Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(2)), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), q), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r), Add(Mul(matchpyInteger(2), b, c), Mul(matchpyInteger(-1), Mul(a, d)), Mul(b, d, Pow(x, matchpyInteger(2))))), x)))))
    rubi.add(rule480)

    pattern481 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-1)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(r, x), cons(And(RationalQ(q_), LessEqual(q_, matchpyInteger(-1))), (b, q, r, x, e, a, f, d, c)))
    rule481 = ReplacementRule(pattern481, lambda b, q, r, x, e, a, f, d, c : Add(Mul(Mul(Mul(matchpyInteger(-1), d), Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), q), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r)), x)), Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Add(q, matchpyInteger(1))), Mul(Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), r), Pow(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), matchpyInteger(-1)))), x))))
    rubi.add(rule481)

    pattern482 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-2)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule482 = ReplacementRule(pattern482, lambda b, x, e, a, f, d, c : Add(Mul(x, Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(matchpyInteger(2), a, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))), Mul(d, Mul(f, Pow(Mul(matchpyInteger(2), a, Pow(b, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Add(a, Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(Mul(Add(Mul(Pow(b, matchpyInteger(2)), c, e), Mul(matchpyInteger(-1), Mul(Pow(a, matchpyInteger(2)), d, f))), Pow(Mul(matchpyInteger(2), a, Pow(b, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule482)

    pattern483 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), matchpyInteger(-2)), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule483 = ReplacementRule(pattern483, lambda b, x, e, a, f, d, c : Add(Mul(Pow(b, matchpyInteger(2)), x, Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(matchpyInteger(2), a, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(d, Mul(f, Pow(Mul(matchpyInteger(2), a, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Pow(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))), Mul(Mul(Add(Mul(Pow(b, matchpyInteger(2)), c, e), Mul(matchpyInteger(3), Pow(a, matchpyInteger(2)), d, f), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), a, b, Add(Mul(d, e), Mul(c, f))))), Pow(Mul(matchpyInteger(2), a, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Add(a, Mul(b, Pow(x, matchpyInteger(2)))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))))
    rubi.add(rule483)

    pattern484 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(r, x), cons(And(NegativeIntegerQ(p_), RationalQ(q_), Greater(q_, matchpyInteger(0))), (b, q, p, r, x, n, e, a, f, d, c)))
    rule484 = ReplacementRule(pattern484, lambda b, q, p, r, x, n, e, a, f, d, c : Add(Mul(Mul(d, Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)), Mul(Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Pow(b, matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Pow(Add(e, Mul(f, Pow(x, n))), r)), x))))
    rubi.add(rule484)

    pattern485 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(q, x), cons(And(NegativeIntegerQ(p_), RationalQ(q_), LessEqual(q_, matchpyInteger(-1))), (b, q, p, r, x, n, e, a, f, d, c)))
    rule485 = ReplacementRule(pattern485, lambda b, q, p, r, x, n, e, a, f, d, c : Add(Mul(Mul(b, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)), Mul(matchpyInteger(-1), Mul(Mul(d, Pow(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))))
    rubi.add(rule485)

    pattern486 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule486 = ReplacementRule(pattern486, lambda b, x, e, a, f, d, c : Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Mul(a, Mul(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Pow(Mul(e, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))), Pow(Mul(c, Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Sqrt(Mul(a, Mul(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Pow(Mul(c, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(c, matchpyInteger(-1))))))), Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(e, matchpyInteger(-1)))))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))))
    rubi.add(rule486)

    pattern487 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule487 = ReplacementRule(pattern487, lambda b, x, e, a, f, d, c : Mul(a, Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Mul(a, Mul(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Pow(Mul(e, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))), Pow(Mul(c, Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Sqrt(Mul(a, Mul(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Pow(Mul(c, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), Subst(Int(Mul(matchpyInteger(1), Pow(Mul(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(c, matchpyInteger(-1))))))), Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(e, matchpyInteger(-1)))))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))))
    rubi.add(rule487)

    pattern488 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule488 = ReplacementRule(pattern488, lambda b, x, e, a, f, d, c : Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Mul(a, Mul(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Pow(Mul(e, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))), Pow(Mul(a, Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Sqrt(Mul(a, Mul(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Pow(Mul(c, Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1)))))), matchpyInteger(-1))), Subst(Int(Mul(Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Mul(Pow(x, matchpyInteger(2)), Pow(c, matchpyInteger(-1))))))), Pow(Sqrt(Add(matchpyInteger(1), Mul(matchpyInteger(-1), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Pow(x, matchpyInteger(2)), Pow(e, matchpyInteger(-1))))))), matchpyInteger(-1))), x), x, Mul(x, Pow(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), matchpyInteger(-1))))))
    rubi.add(rule488)

    pattern489 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(PosQ(Mul(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), Pow(c_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule489 = ReplacementRule(pattern489, lambda b, x, e, a, f, d, c : Add(Mul(d, x, Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(matchpyInteger(2), f, Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(c, Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Mul(matchpyInteger(2), f), matchpyInteger(-1))), Int(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Mul(Pow(Add(c, Mul(d, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1)))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x))), Mul(b, c, Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(c, f))), Pow(Mul(matchpyInteger(2), d, f), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, d, e), Mul(matchpyInteger(-1), Mul(b, c, f)), Mul(matchpyInteger(-1), Mul(a, d, f))), Pow(Mul(matchpyInteger(2), d, f), matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule489)

    pattern490 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-1), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(And(NegQ(Mul(Add(Mul(d_, e_), Mul(matchpyInteger(-1), Mul(c_, f_))), Pow(c_, matchpyInteger(-1))))), (b, x, e, a, f, d, c)))
    rule490 = ReplacementRule(pattern490, lambda b, x, e, a, f, d, c : Add(Mul(x, Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Mul(matchpyInteger(2), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1)))), Mul(e, Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Mul(matchpyInteger(2), f), matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1))))), matchpyInteger(-1))), x)), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Mul(Add(Mul(d, e), Mul(matchpyInteger(-1), Mul(matchpyInteger(2), c, f))), Pow(Mul(matchpyInteger(2), Pow(f, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(matchpyInteger(1), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, d, e), Mul(matchpyInteger(-1), Mul(b, c, f)), Mul(matchpyInteger(-1), Mul(a, d, f))), Pow(Mul(matchpyInteger(2), Pow(f, matchpyInteger(2))), matchpyInteger(-1))), Int(Mul(Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)))))
    rubi.add(rule490)

    pattern491 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(1), matchpyInteger(2))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, matchpyInteger(2)))), Rational(matchpyInteger(-3), matchpyInteger(2)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), cons(True, (b, x, e, a, f, d, c)))
    rule491 = ReplacementRule(pattern491, lambda b, x, e, a, f, d, c : Add(Mul(Mul(b, Pow(f, matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Sqrt(Add(e, Mul(f, Pow(x, matchpyInteger(2)))))), matchpyInteger(-1))), x)), Mul(matchpyInteger(-1), Mul(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(f, matchpyInteger(-1))), Int(Mul(Sqrt(Add(c, Mul(d, Pow(x, matchpyInteger(2))))), Pow(Mul(Sqrt(Add(a, Mul(b, Pow(x, matchpyInteger(2))))), Pow(Add(e, Mul(f, Pow(x, matchpyInteger(2)))), Mul(matchpyInteger(3), Pow(matchpyInteger(2), matchpyInteger(-1))))), matchpyInteger(-1))), x)))))
    rubi.add(rule491)

    pattern492 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(PositiveIntegerQ(n_)), (b, q, p, r, x, n, e, a, f, d, c)))
    rule492 = ReplacementRule(pattern492, lambda b, q, p, r, x, n, e, a, f, d, c : With(List(Set(matchpyInteger(u), ExpandIntegrand(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x))), Condition(Int(matchpyInteger(u), x), SumQ(matchpyInteger(u)))))
    rubi.add(rule492)

    pattern493 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(NegativeIntegerQ(n_)), (b, q, p, r, x, n, e, a, f, d, c)))
    rule493 = ReplacementRule(pattern493, lambda b, q, p, r, x, n, e, a, f, d, c : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Mul(Pow(Add(e, Mul(f, Pow(x, Mul(matchpyInteger(-1), n)))), r), Pow(Pow(x, matchpyInteger(2)), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule493)

    pattern494 = Pattern(Int(Mul(Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(True, (b, q, p, r, x, n, e, a, f, d, c)))
    rule494 = ReplacementRule(pattern494, lambda b, q, p, r, x, n, e, a, f, d, c : Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x))
    rubi.add(rule494)

    pattern495 = Pattern(Int(Mul(Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(u_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(Wildcard.optional('e', matchpyInteger(0)), Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(w_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(n, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(u_, Mul(matchpyInteger(-1), v_))), ZeroQ(Add(u_, Mul(matchpyInteger(-1), w_))), LinearQ(u_, x_), NonzeroQ(Add(u_, Mul(matchpyInteger(-1), x_)))), (b, q, v, p, r, u, w, e, n, x, a, f, d, c)))
    rule495 = ReplacementRule(pattern495, lambda b, q, v, p, r, u, w, e, n, x, a, f, d, c : Mul(Mul(matchpyInteger(1), Pow(Coefficient(u, x, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x), x, u)))
    rubi.add(rule495)

    pattern496 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(r, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(q_)), (q, b, p, r, x, n, e, a, f, d, mn, c)))
    rule496 = ReplacementRule(pattern496, lambda q, b, p, r, x, n, e, a, f, d, mn, c : Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q), Mul(Pow(Add(e, Mul(f, Pow(x, n))), r), Pow(Pow(x, Mul(n, q)), matchpyInteger(-1)))), x))
    rubi.add(rule496)

    pattern497 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(p_), IntegerQ(r_)), (q, b, p, r, x, n, e, a, f, d, mn, c)))
    rule497 = ReplacementRule(pattern497, lambda q, b, p, r, x, n, e, a, f, d, mn, c : Int(Mul(Pow(x, Mul(n, Add(p, r))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Add(f, Mul(e, Pow(x, Mul(matchpyInteger(-1), n)))), r)), x))
    rubi.add(rule497)

    pattern498 = Pattern(Int(Mul(Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), q_), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), Not(IntegerQ(q_))), (b, q, p, r, x, n, e, a, f, d, mn, c)))
    rule498 = ReplacementRule(pattern498, lambda b, q, p, r, x, n, e, a, f, d, mn, c : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), FracPart(q)), Pow(Pow(Add(d, Mul(c, Pow(x, n))), FracPart(q)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q), Mul(Pow(Add(e, Mul(f, Pow(x, n))), r), Pow(Pow(x, Mul(n, q)), matchpyInteger(-1)))), x)))
    rubi.add(rule498)

    pattern499 = Pattern(Int(Mul(Pow(Add(e1_, Mul(Wildcard.optional('f1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(e2_, Mul(Wildcard.optional('f2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e1, x), FreeQ(f1, x), FreeQ(e2, x), FreeQ(f2, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(e2_, f1_), Mul(e1_, f2_))), Or(IntegerQ(r_), And(PositiveQ(e1_), PositiveQ(e2_)))), (b, q, n2, r, p, e1, f2, x, e2, n, a, f1, d, c)))
    rule499 = ReplacementRule(pattern499, lambda b, q, n2, r, p, e1, f2, x, e2, n, a, f1, d, c : Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), r)), x))
    rubi.add(rule499)

    pattern500 = Pattern(Int(Mul(Pow(Add(e1_, Mul(Wildcard.optional('f1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(e2_, Mul(Wildcard.optional('f2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e1, x), FreeQ(f1, x), FreeQ(e2, x), FreeQ(f2, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(e2_, f1_), Mul(e1_, f2_)))), (b, q, n2, r, p, e1, f2, x, e2, n, a, f1, d, c)))
    rule500 = ReplacementRule(pattern500, lambda b, q, n2, r, p, e1, f2, x, e2, n, a, f1, d, c : Mul(Pow(Add(e1, Mul(f1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(r)), Mul(Pow(Add(e2, Mul(f2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(r)), Pow(Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), FracPart(r)), matchpyInteger(-1))), Int(Mul(Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), r)), x)))
    rubi.add(rule500)

    pattern501 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_)), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(Or(IntegerQ(m_), PositiveQ(g_)), IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, r, p, c, x, n, e, f, d, m, g)))
    rule501 = ReplacementRule(pattern501, lambda b, q, r, p, c, x, n, e, f, d, m, g : Mul(Mul(Pow(g, m), Pow(Mul(n, Pow(b, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1)))), matchpyInteger(-1))), Subst(Int(Mul(Pow(Mul(b, x), Add(p, Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(c, Mul(d, x)), q), Pow(Add(e, Mul(f, x)), r)), x), x, Pow(x, n))))
    rubi.add(rule501)

    pattern502 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(Or(IntegerQ(m_), PositiveQ(g_)), Not(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1))))))), (b, q, r, p, c, x, n, e, f, d, m, g)))
    rule502 = ReplacementRule(pattern502, lambda b, q, r, p, c, x, n, e, f, d, m, g : Mul(Pow(g, m), Pow(b, IntPart(p)), Mul(Pow(Mul(b, Pow(x, n)), FracPart(p)), Pow(Pow(x, Mul(n, FracPart(p))), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(n, p))), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule502)

    pattern503 = Pattern(Int(Mul(Pow(Mul(g_, x_), m_), Pow(Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1)))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(Not(IntegerQ(m_))), (b, q, r, p, c, x, n, e, f, d, m, g)))
    rule503 = ReplacementRule(pattern503, lambda b, q, r, p, c, x, n, e, f, d, m, g : Mul(Pow(g, IntPart(m)), Mul(Pow(Mul(g, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Mul(b, Pow(x, n)), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule503)

    pattern504 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(PositiveIntegerQ(Add(p_, matchpyInteger(2)), q_, r_)), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule504 = ReplacementRule(pattern504, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Int(ExpandIntegrand(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x), x))
    rubi.add(rule504)

    pattern505 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)))), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule505 = ReplacementRule(pattern505, lambda b, q, p, r, x, n, e, a, f, d, m, c : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, x)), p), Pow(Add(c, Mul(d, x)), q), Pow(Add(e, Mul(f, x)), r)), x), x, Pow(x, n))))
    rubi.add(rule505)

    pattern506 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), cons(And(IntegersQ(p_, q_, r_), NegQ(n_)), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule506 = ReplacementRule(pattern506, lambda b, q, p, r, x, n, e, a, f, d, m, c : Int(Mul(Pow(x, Add(m, Mul(n, Add(p, q, r)))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(d, Mul(c, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Add(f, Mul(e, Pow(x, Mul(matchpyInteger(-1), n)))), r)), x))
    rubi.add(rule506)

    pattern507 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule507 = ReplacementRule(pattern507, lambda b, q, p, r, x, n, e, a, f, d, m, c : Mul(Mul(matchpyInteger(1), Pow(n, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Simplify(Mul(Add(m, matchpyInteger(1)), Pow(n, matchpyInteger(-1)))), matchpyInteger(-1))), Pow(Add(a, Mul(b, x)), p), Pow(Add(c, Mul(d, x)), q), Pow(Add(e, Mul(f, x)), r)), x), x, Pow(x, n))))
    rubi.add(rule507)

    pattern508 = Pattern(Int(Mul(Pow(Mul(g_, x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(IntegerQ(Simplify(Mul(Add(m_, matchpyInteger(1)), Pow(n_, matchpyInteger(-1)))))), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule508 = ReplacementRule(pattern508, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Mul(Pow(g, IntPart(m)), Mul(Pow(Mul(g, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule508)

    pattern509 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(PositiveIntegerQ(n_), IntegerQ(m_)), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule509 = ReplacementRule(pattern509, lambda b, q, p, r, x, n, e, a, f, d, m, c : With(List(Set(matchpyInteger(k), GCD(Add(m, matchpyInteger(1)), n))), Condition(Mul(Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(Add(m, matchpyInteger(1)), Pow(matchpyInteger(k), matchpyInteger(-1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), p), Pow(Add(c, Mul(d, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), q), Pow(Add(e, Mul(f, Pow(x, Mul(n, Pow(matchpyInteger(k), matchpyInteger(-1)))))), r)), x), x, Pow(x, matchpyInteger(k)))), Unequal(matchpyInteger(k), matchpyInteger(1)))))
    rubi.add(rule509)

    pattern510 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), r_)), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(PositiveIntegerQ(n_), FractionQ(m_)), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule510 = ReplacementRule(pattern510, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(matchpyInteger(k), Pow(g, matchpyInteger(-1))), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(g, n), matchpyInteger(-1))))), p), Pow(Add(c, Mul(d, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(g, n), matchpyInteger(-1))))), q), Pow(Add(e, Mul(f, Mul(Pow(x, Mul(matchpyInteger(k), n)), Pow(Pow(g, n), matchpyInteger(-1))))), r)), x), x, Pow(Mul(g, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule510)

    pattern511 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(0)), Not(And(Equal(q_, matchpyInteger(1)), SimplerQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))))))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule511 = ReplacementRule(pattern511, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, b, g, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))))), Mul(d, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(n, q), matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule511)

    pattern512 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, p_), Less(p_, matchpyInteger(-1)), Greater(Add(m_, Mul(matchpyInteger(-1), n_), matchpyInteger(1)), matchpyInteger(0))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule512 = ReplacementRule(pattern512, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(Pow(g, Add(n, matchpyInteger(-1))), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Pow(Mul(g, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(b, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(g, n), Pow(Mul(b, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Add(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(n, q), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(b, n, Add(Mul(c, f), Mul(matchpyInteger(-1), Mul(d, e))), Add(p, matchpyInteger(1))))), Pow(x, n))), x)), x)))))
    rubi.add(rule512)

    pattern513 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_), RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule513 = ReplacementRule(pattern513, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, g, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(e, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule513)

    pattern514 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_, q_), Greater(q_, matchpyInteger(0)), Less(m_, matchpyInteger(-1)), Not(And(Equal(q_, matchpyInteger(1)), SimplerQ(Add(e_, Mul(f_, Pow(x_, n_))), Add(c_, Mul(d_, Pow(x_, n_))))))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule514 = ReplacementRule(pattern514, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(e, Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, g, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(matchpyInteger(1), Pow(Mul(a, Pow(g, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(e, n, Add(Mul(b, c, Add(p, matchpyInteger(1))), Mul(a, d, q))), Mul(d, Add(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(b, e, n, Add(p, q, matchpyInteger(1)))), Pow(x, n))), x)), x)))))
    rubi.add(rule514)

    pattern515 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_), RationalQ(q_), Greater(q_, matchpyInteger(0)), Not(And(Equal(q_, matchpyInteger(1)), SimplerQ(Add(e_, Mul(f_, Pow(x_, n_))), Add(c_, Mul(d_, Pow(x_, n_))))))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule515 = ReplacementRule(pattern515, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(f, Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(b, g, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(b, e, n, Add(p, q, matchpyInteger(1))))), Mul(Add(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(f, n, q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(b, e, d, n, Add(p, q, matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule515)

    pattern516 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_), Greater(m_, Add(n_, matchpyInteger(-1)))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule516 = ReplacementRule(pattern516, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(f, Pow(g, Add(n, matchpyInteger(-1))), Pow(Mul(g, x), Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(b, d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(matchpyInteger(-1), Mul(Mul(Pow(g, n), Pow(Mul(b, d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, Mul(matchpyInteger(-1), n))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(a, f, c, Add(m, Mul(matchpyInteger(-1), n), matchpyInteger(1))), Mul(Add(Mul(a, f, d, Add(m, Mul(n, q), matchpyInteger(1))), Mul(b, Add(Mul(f, c, Add(m, Mul(n, p), matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(e, d, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))))))), Pow(x, n))), x)), x)))))
    rubi.add(rule516)

    pattern517 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_), RationalQ(m_), Less(m_, matchpyInteger(-1))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule517 = ReplacementRule(pattern517, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(e, Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, c, g, Add(m, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, c, Pow(g, n), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(a, f, c, Add(m, matchpyInteger(1))), Mul(matchpyInteger(-1), Mul(e, Add(Mul(b, c), Mul(a, d)), Add(m, n, matchpyInteger(1)))), Mul(matchpyInteger(-1), Mul(e, n, Add(Mul(b, c, p), Mul(a, d, q)))), Mul(matchpyInteger(-1), Mul(b, e, d, Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n)))), x)), x))))
    rubi.add(rule517)

    pattern518 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), cons(And(PositiveIntegerQ(n_)), (b, p, c, x, n, e, a, f, d, m, g)))
    rule518 = ReplacementRule(pattern518, lambda b, p, c, x, n, e, a, f, d, m, g : Int(ExpandIntegrand(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Add(e, Mul(f, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1)))), x), x))
    rubi.add(rule518)

    pattern519 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_)), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule519 = ReplacementRule(pattern519, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(e, Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)), Mul(Mul(f, Pow(Pow(e, n), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))))
    rubi.add(rule519)

    pattern520 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), cons(And(PositiveIntegerQ(n_), PositiveIntegerQ(r_)), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule520 = ReplacementRule(pattern520, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Add(Mul(e, Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), Add(r, matchpyInteger(-1)))), x)), Mul(Mul(f, Pow(Pow(e, n), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), Add(r, matchpyInteger(-1)))), x))))
    rubi.add(rule520)

    pattern521 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(NegativeIntegerQ(n_), IntegerQ(m_)), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule521 = ReplacementRule(pattern521, lambda b, q, p, r, x, n, e, a, f, d, m, c : Mul(matchpyInteger(-1), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Mul(Pow(Add(e, Mul(f, Pow(x, Mul(matchpyInteger(-1), n)))), r), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule521)

    pattern522 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(NegativeIntegerQ(n_), FractionQ(m_)), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule522 = ReplacementRule(pattern522, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : With(List(Set(matchpyInteger(k), Denominator(m))), Mul(Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), Pow(g, matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(g, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), p), Pow(Add(c, Mul(d, Pow(g, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), q), Mul(Pow(Add(e, Mul(f, Pow(g, Mul(matchpyInteger(-1), n)), Pow(x, Mul(Mul(matchpyInteger(-1), matchpyInteger(k)), n)))), r), Pow(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(Pow(Mul(g, x), Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1)))), matchpyInteger(-1)))))))
    rubi.add(rule522)

    pattern523 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(NegativeIntegerQ(n_), Not(RationalQ(m_))), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule523 = ReplacementRule(pattern523, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Mul(Mul(matchpyInteger(-1), Pow(Mul(g, x), m)), Pow(Pow(x, matchpyInteger(-1)), m), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Mul(Pow(Add(e, Mul(f, Pow(x, Mul(matchpyInteger(-1), n)))), r), Pow(Pow(x, Add(m, matchpyInteger(2))), matchpyInteger(-1)))), x), x, Mul(matchpyInteger(1), Pow(x, matchpyInteger(-1))))))
    rubi.add(rule523)

    pattern524 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(FractionQ(n_)), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule524 = ReplacementRule(pattern524, lambda b, q, p, r, x, n, e, a, f, d, m, c : With(List(Set(matchpyInteger(k), Denominator(n))), Mul(matchpyInteger(k), Subst(Int(Mul(Pow(x, Add(Mul(matchpyInteger(k), Add(m, matchpyInteger(1))), matchpyInteger(-1))), Pow(Add(a, Mul(b, Pow(x, Mul(matchpyInteger(k), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(k), n)))), q), Pow(Add(e, Mul(f, Pow(x, Mul(matchpyInteger(k), n)))), r)), x), x, Pow(x, Mul(matchpyInteger(1), Pow(matchpyInteger(k), matchpyInteger(-1))))))))
    rubi.add(rule524)

    pattern525 = Pattern(Int(Mul(Pow(Mul(g_, x_), m_), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(FractionQ(n_)), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule525 = ReplacementRule(pattern525, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Mul(Pow(g, IntPart(m)), Mul(Pow(Mul(g, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule525)

    pattern526 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1)))))), (b, q, p, r, x, n, e, a, f, d, m, c)))
    rule526 = ReplacementRule(pattern526, lambda b, q, p, r, x, n, e, a, f, d, m, c : Mul(Mul(matchpyInteger(1), Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))), Subst(Int(Mul(Pow(Add(a, Mul(b, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), p), Pow(Add(c, Mul(d, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), q), Pow(Add(e, Mul(f, Pow(x, Simplify(Mul(n, Pow(Add(m, matchpyInteger(1)), matchpyInteger(-1))))))), r)), x), x, Pow(x, Add(m, matchpyInteger(1))))))
    rubi.add(rule526)

    pattern527 = Pattern(Int(Mul(Pow(Mul(g_, x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(IntegerQ(Simplify(Mul(n_, Pow(Add(m_, matchpyInteger(1)), matchpyInteger(-1)))))), (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule527 = ReplacementRule(pattern527, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Mul(Pow(g, IntPart(m)), Mul(Pow(Mul(g, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule527)

    pattern528 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), cons(And(RationalQ(p_, q_), Less(p_, matchpyInteger(-1)), Greater(q_, matchpyInteger(0)), Not(And(Equal(q_, matchpyInteger(1)), SimplerQ(Add(Mul(b_, c_), Mul(matchpyInteger(-1), Mul(a_, d_))), Add(Mul(b_, e_), Mul(matchpyInteger(-1), Mul(a_, f_))))))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule528 = ReplacementRule(pattern528, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(a, b, g, n, Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, b, n, Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))))), Mul(d, Add(Mul(b, e, n, Add(p, matchpyInteger(1))), Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(n, q), matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule528)

    pattern529 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(RationalQ(p_), Less(p_, matchpyInteger(-1))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule529 = ReplacementRule(pattern529, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(Mul(matchpyInteger(-1), Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f)))), Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(1))), Pow(Mul(a, g, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(a, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Pow(Add(c, Mul(d, Pow(x, n))), q), Simp(Add(Mul(c, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(e, n, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d))), Add(p, matchpyInteger(1))), Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, Mul(n, Add(p, q, matchpyInteger(2))), matchpyInteger(1)), Pow(x, n))), x)), x))))
    rubi.add(rule529)

    pattern530 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(And(RationalQ(q_), Greater(q_, matchpyInteger(0)), Not(And(Equal(q_, matchpyInteger(1)), SimplerQ(Add(e_, Mul(f_, Pow(x_, n_))), Add(c_, Mul(d_, Pow(x_, n_))))))), (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule530 = ReplacementRule(pattern530, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(f, Pow(Mul(g, x), Add(m, matchpyInteger(1))), Pow(Add(a, Mul(b, Pow(x, n))), Add(p, matchpyInteger(1))), Mul(Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Mul(b, g, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1)))), Mul(Mul(matchpyInteger(1), Pow(Mul(b, Add(m, Mul(n, Add(p, q, matchpyInteger(1))), matchpyInteger(1))), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), Add(q, matchpyInteger(-1))), Simp(Add(Mul(c, Add(Mul(Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(b, e, n, Add(p, q, matchpyInteger(1))))), Mul(Add(Mul(d, Add(Mul(b, e), Mul(matchpyInteger(-1), Mul(a, f))), Add(m, matchpyInteger(1))), Mul(f, n, q, Add(Mul(b, c), Mul(matchpyInteger(-1), Mul(a, d)))), Mul(b, e, d, n, Add(p, q, matchpyInteger(1)))), Pow(x, n))), x)), x))))
    rubi.add(rule530)

    pattern531 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), matchpyInteger(-1)), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), cons(True, (b, p, c, x, n, e, a, f, d, m, g)))
    rule531 = ReplacementRule(pattern531, lambda b, p, c, x, n, e, a, f, d, m, g : Int(ExpandIntegrand(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Mul(Add(e, Mul(f, Pow(x, n))), Pow(Add(c, Mul(d, Pow(x, n))), matchpyInteger(-1)))), x), x))
    rubi.add(rule531)

    pattern532 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), p_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), q_), Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), cons(True, (b, q, p, c, x, n, e, a, f, d, m, g)))
    rule532 = ReplacementRule(pattern532, lambda b, q, p, c, x, n, e, a, f, d, m, g : Add(Mul(e, Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x)), Mul(f, Mul(Pow(Mul(g, x), m), Pow(Pow(x, m), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, n)), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q)), x))))
    rubi.add(rule532)

    pattern533 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(r, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(q_)), (q, b, p, r, x, n, e, a, f, d, m, mn, c)))
    rule533 = ReplacementRule(pattern533, lambda q, b, p, r, x, n, e, a, f, d, m, mn, c : Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, q)))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x))
    rubi.add(rule533)

    pattern534 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(q, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), IntegerQ(p_), IntegerQ(r_)), (q, b, p, r, x, n, e, a, f, d, m, mn, c)))
    rule534 = ReplacementRule(pattern534, lambda q, b, p, r, x, n, e, a, f, d, m, mn, c : Int(Mul(Pow(x, Add(m, Mul(n, Add(p, r)))), Pow(Add(b, Mul(a, Pow(x, Mul(matchpyInteger(-1), n)))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Add(f, Mul(e, Pow(x, Mul(matchpyInteger(-1), n)))), r)), x))
    rubi.add(rule534)

    pattern535 = Pattern(Int(Mul(Pow(x_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), q_), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_)), Not(IntegerQ(q_))), (b, q, p, r, x, n, e, a, f, d, m, mn, c)))
    rule535 = ReplacementRule(pattern535, lambda b, q, p, r, x, n, e, a, f, d, m, mn, c : Mul(Pow(x, Mul(n, FracPart(q))), Mul(Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), FracPart(q)), Pow(Pow(Add(d, Mul(c, Pow(x, n))), FracPart(q)), matchpyInteger(-1))), Int(Mul(Pow(x, Add(m, Mul(matchpyInteger(-1), Mul(n, q)))), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(d, Mul(c, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule535)

    pattern536 = Pattern(Int(Mul(Pow(Mul(g_, x_), m_), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, Wildcard.optional('mn', matchpyInteger(1))))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, Wildcard.optional('n', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(EqQ(mn_, Mul(matchpyInteger(-1), n_))), (q, b, p, r, c, x, n, e, a, f, d, m, mn, g)))
    rule536 = ReplacementRule(pattern536, lambda q, b, p, r, c, x, n, e, a, f, d, m, mn, g : Mul(Pow(g, IntPart(m)), Mul(Pow(Mul(g, x), FracPart(m)), Pow(Pow(x, FracPart(m)), matchpyInteger(-1))), Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, Mul(matchpyInteger(-1), n)))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x)))
    rubi.add(rule536)

    pattern537 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(True, (b, q, p, r, c, x, n, e, a, f, d, m, g)))
    rule537 = ReplacementRule(pattern537, lambda b, q, p, r, c, x, n, e, a, f, d, m, g : Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x))
    rubi.add(rule537)

    pattern538 = Pattern(Int(Mul(Pow(u_, Wildcard.optional('m', matchpyInteger(1))), Pow(Add(Wildcard.optional('a', matchpyInteger(0)), Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(Wildcard.optional('c', matchpyInteger(0)), Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('q', matchpyInteger(1))), Pow(Add(e_, Mul(Wildcard.optional('f', matchpyInteger(1)), Pow(v_, n_))), Wildcard.optional('r', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e, x), FreeQ(f, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(LinearPairQ(u_, v_, x_)), (b, q, v, p, r, u, e, n, x, a, f, d, m, c)))
    rule538 = ReplacementRule(pattern538, lambda b, q, v, p, r, u, e, n, x, a, f, d, m, c : Mul(Mul(Pow(u, m), Pow(Mul(Coefficient(v, x, matchpyInteger(1)), Pow(v, m)), matchpyInteger(-1))), Subst(Int(Mul(Pow(x, m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(e, Mul(f, Pow(x, n))), r)), x), x, v)))
    rubi.add(rule538)

    pattern539 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(e1_, Mul(Wildcard.optional('f1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(e2_, Mul(Wildcard.optional('f2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e1, x), FreeQ(f1, x), FreeQ(e2, x), FreeQ(f2, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(e2_, f1_), Mul(e1_, f2_))), Or(IntegerQ(r_), And(PositiveQ(e1_), PositiveQ(e2_)))), (b, q, n2, r, p, e1, c, f2, x, e2, n, a, f1, d, m, g)))
    rule539 = ReplacementRule(pattern539, lambda b, q, n2, r, p, e1, c, f2, x, e2, n, a, f1, d, m, g : Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), r)), x))
    rubi.add(rule539)

    pattern540 = Pattern(Int(Mul(Pow(Mul(Wildcard.optional('g', matchpyInteger(1)), x_), Wildcard.optional('m', matchpyInteger(1))), Pow(Add(e1_, Mul(Wildcard.optional('f1', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(e2_, Mul(Wildcard.optional('f2', matchpyInteger(1)), Pow(x_, Wildcard.optional('n2', matchpyInteger(1))))), Wildcard.optional('r', matchpyInteger(1))), Pow(Add(a_, Mul(Wildcard.optional('b', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('p', matchpyInteger(1))), Pow(Add(c_, Mul(Wildcard.optional('d', matchpyInteger(1)), Pow(x_, n_))), Wildcard.optional('q', matchpyInteger(1)))), x_), FreeQ(a, x), FreeQ(b, x), FreeQ(c, x), FreeQ(d, x), FreeQ(e1, x), FreeQ(f1, x), FreeQ(e2, x), FreeQ(f2, x), FreeQ(g, x), FreeQ(m, x), FreeQ(n, x), FreeQ(p, x), FreeQ(q, x), FreeQ(r, x), cons(And(ZeroQ(Add(n2_, Mul(matchpyInteger(-1), Mul(n_, Pow(matchpyInteger(2), matchpyInteger(-1)))))), ZeroQ(Add(Mul(e2_, f1_), Mul(e1_, f2_)))), (b, q, n2, r, p, e1, c, f2, x, e2, n, a, f1, d, m, g)))
    rule540 = ReplacementRule(pattern540, lambda b, q, n2, r, p, e1, c, f2, x, e2, n, a, f1, d, m, g : Mul(Pow(Add(e1, Mul(f1, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(r)), Mul(Pow(Add(e2, Mul(f2, Pow(x, Mul(n, Pow(matchpyInteger(2), matchpyInteger(-1)))))), FracPart(r)), Pow(Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), FracPart(r)), matchpyInteger(-1))), Int(Mul(Pow(Mul(g, x), m), Pow(Add(a, Mul(b, Pow(x, n))), p), Pow(Add(c, Mul(d, Pow(x, n))), q), Pow(Add(Mul(e1, e2), Mul(f1, f2, Pow(x, n))), r)), x)))
    rubi.add(rule540)

    return rubi
